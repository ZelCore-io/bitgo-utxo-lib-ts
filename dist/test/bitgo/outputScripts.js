"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const bitcoinjs_lib_1 = require("bitcoinjs-lib");
const assert = require("assert");
const outputScripts_1 = require("../../src/bitgo/outputScripts");
const src_1 = require("../../src");
const testutil_1 = require("../../src/testutil");
const keys = (0, testutil_1.getKeyTriple)('utxo');
const pubkeys = keys.map((k) => k.publicKey);
describe('output script support', function () {
    it('has expected values for each network', function () {
        assert.deepStrictEqual((0, src_1.getNetworkList)().map((n) => [(0, src_1.getNetworkName)(n), outputScripts_1.scriptTypes2Of3.filter((t) => (0, outputScripts_1.isSupportedScriptType)(n, t))]), [
            ['bitcoin', ['p2sh', 'p2shP2wsh', 'p2wsh', 'p2tr', 'p2trMusig2']],
            ['testnet', ['p2sh', 'p2shP2wsh', 'p2wsh', 'p2tr', 'p2trMusig2']],
            ['bitcoincash', ['p2sh']],
            ['bitcoincashTestnet', ['p2sh']],
            ['bitcoingold', ['p2sh', 'p2shP2wsh', 'p2wsh']],
            ['bitcoingoldTestnet', ['p2sh', 'p2shP2wsh', 'p2wsh']],
            ['bitcoinsv', ['p2sh']],
            ['bitcoinsvTestnet', ['p2sh']],
            ['dash', ['p2sh']],
            ['dashTest', ['p2sh']],
            ['dogecoin', ['p2sh']],
            ['dogecoinTest', ['p2sh']],
            ['ecash', ['p2sh']],
            ['ecashTest', ['p2sh']],
            ['litecoin', ['p2sh', 'p2shP2wsh', 'p2wsh']],
            ['litecoinTest', ['p2sh', 'p2shP2wsh', 'p2wsh']],
            ['zcash', ['p2sh']],
            ['zcashTest', ['p2sh']],
        ]);
    });
    it('does not allow unsupported scripts when network parameter is provided', function () {
        (0, src_1.getNetworkList)().forEach((n) => {
            outputScripts_1.scriptTypes2Of3
                .filter((t) => !(0, outputScripts_1.isSupportedScriptType)(n, t))
                .forEach((t) => assert.throws(() => (0, outputScripts_1.createOutputScript2of3)(pubkeys, t, n), (err) => !!(err instanceof Error && err.message.match(/^unsupported script type/))));
        });
    });
});
describe('createOutputScript2of3()', function () {
    const p2ms = '522103f1667be6e8b8eb0c980155dfcda742affeeb0b0ca10969c54152713185' +
        '6d65c9210305902cf20a0bbc9274e62414aa4afea8c96e3e83abb5233d72355c' +
        '27d7de660a2103c79183d6641585179d25bbc091b2a7fce86c9f15d311e5aca0' +
        'a020478d8f208753ae';
    const p2wsh = '002095ecaacb606b9ece3821c0111c0a1208dd1d35192809bf8cf6cbad4bbeaca67f';
    const p2tr = '5120a4ce7d122bdc05224b27415228728e5d5bf485961a07493d068ddbb4d4569059';
    const p2trMusig2 = '51207cd79799a4cf6183b018a29960ffe8351e90afdb2383b9b9dcd3ec07929c72e3';
    outputScripts_1.scriptTypes2Of3.forEach((scriptType) => {
        it(`creates output script (type=${scriptType})`, function () {
            const { scriptPubKey, redeemScript, witnessScript } = (0, outputScripts_1.createOutputScript2of3)(pubkeys, scriptType);
            switch (scriptType) {
                case 'p2sh':
                    assert.strictEqual(scriptPubKey.toString('hex'), 'a91491590bed8198ea7ca57ba68ab7cbfabc656cbbaf87');
                    assert.strictEqual(redeemScript && redeemScript.toString('hex'), p2ms);
                    assert.strictEqual(witnessScript, undefined);
                    break;
                case 'p2shP2wsh':
                    assert.strictEqual(scriptPubKey.toString('hex'), 'a9140312dd6f801ab11d53c35f6a2bdac9c602a55d9d87');
                    assert.strictEqual(redeemScript && redeemScript.toString('hex'), p2wsh);
                    assert.strictEqual(witnessScript && witnessScript.toString('hex'), p2ms);
                    break;
                case 'p2wsh':
                    assert.strictEqual(scriptPubKey.toString('hex'), p2wsh);
                    assert.strictEqual(redeemScript, undefined);
                    assert.strictEqual(witnessScript && witnessScript.toString('hex'), p2ms);
                    break;
                case 'p2tr':
                    assert.strictEqual(scriptPubKey.toString('hex'), p2tr);
                    // TODO: validate script control blocks once they are returned by payments.p2tr()
                    break;
                case 'p2trMusig2':
                    assert.strictEqual(scriptPubKey.toString('hex'), p2trMusig2);
                    break;
                default:
                    throw new Error(`unexpected type ${scriptType}`);
            }
        });
    });
});
describe('createOutputScriptP2shP2pk', function () {
    it('create output script p2shP2pk', function () {
        const keypair = src_1.ECPair.fromWIF('cTLxw4KC55LQfFj3eZz51NpWX1j2ja4WkbQFbHaTuaRkSFGeJ4yS', bitcoinjs_lib_1.networks.testnet);
        const { scriptPubKey, redeemScript, witnessScript } = (0, outputScripts_1.createOutputScriptP2shP2pk)(keypair.publicKey);
        assert.strictEqual(scriptPubKey.toString('hex'), 'a914172dcc4e025361d951a9511c670973a4e3720c9887');
        assert.strictEqual(redeemScript === null || redeemScript === void 0 ? void 0 : redeemScript.toString('hex'), '210219da48412c2268865fe8c126327d1b12eee350a3b69eb09e3323cc9a11828945ac');
        assert.strictEqual(witnessScript, undefined);
    });
});
describe('createPaymentP2tr', () => {
    const controlBlocks = [
        'c1aa3303d48847f4d54aa02a4ff97448f1f430b07eecd632c41f390e3f8431a166487df024a0eb38aeb56b5263cf22c84a2c9c7daad9a8e55cce2e3cac87c52a0a',
        'c1aa3303d48847f4d54aa02a4ff97448f1f430b07eecd632c41f390e3f8431a1660a75f62db677b9c1974741735aa4b0c2c8718796c82578b960e1fa0986d4f25cf0b2127669c12ad75a079c25502a5456764de23f30df1fcdb88418fe970834d7',
        'c1aa3303d48847f4d54aa02a4ff97448f1f430b07eecd632c41f390e3f8431a1669c039366a9ce89ad30c9935268a10110cb1a4b6357dcc2c651e9de38639c206af0b2127669c12ad75a079c25502a5456764de23f30df1fcdb88418fe970834d7',
    ];
    it('allows no redeemIndex', () => {
        const p2tr = (0, outputScripts_1.createPaymentP2tr)(pubkeys);
        assert.strictEqual(p2tr.controlBlock, undefined);
    });
    for (let i = 0; i < 3; i++) {
        it(`creates controlBlock for redeemIndex ${i}`, () => {
            var _a;
            const p2tr = (0, outputScripts_1.createPaymentP2tr)(pubkeys, i);
            assert.strictEqual((_a = p2tr.controlBlock) === null || _a === void 0 ? void 0 : _a.toString('hex'), controlBlocks[i]);
        });
    }
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib3V0cHV0U2NyaXB0cy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3Rlc3QvYml0Z28vb3V0cHV0U2NyaXB0cy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLGlEQUF5QztBQUN6QyxpQ0FBaUM7QUFFakMsaUVBTXVDO0FBQ3ZDLG1DQUFtRTtBQUNuRSxpREFBa0Q7QUFFbEQsTUFBTSxJQUFJLEdBQUcsSUFBQSx1QkFBWSxFQUFDLE1BQU0sQ0FBQyxDQUFDO0FBQ2xDLE1BQU0sT0FBTyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQTZCLENBQUM7QUFFekUsUUFBUSxDQUFDLHVCQUF1QixFQUFFO0lBQ2hDLEVBQUUsQ0FBQyxzQ0FBc0MsRUFBRTtRQUN6QyxNQUFNLENBQUMsZUFBZSxDQUNwQixJQUFBLG9CQUFjLEdBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsSUFBQSxvQkFBYyxFQUFDLENBQUMsQ0FBQyxFQUFFLCtCQUFlLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxJQUFBLHFDQUFxQixFQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFDNUc7WUFDRSxDQUFDLFNBQVMsRUFBRSxDQUFDLE1BQU0sRUFBRSxXQUFXLEVBQUUsT0FBTyxFQUFFLE1BQU0sRUFBRSxZQUFZLENBQUMsQ0FBQztZQUNqRSxDQUFDLFNBQVMsRUFBRSxDQUFDLE1BQU0sRUFBRSxXQUFXLEVBQUUsT0FBTyxFQUFFLE1BQU0sRUFBRSxZQUFZLENBQUMsQ0FBQztZQUNqRSxDQUFDLGFBQWEsRUFBRSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1lBQ3pCLENBQUMsb0JBQW9CLEVBQUUsQ0FBQyxNQUFNLENBQUMsQ0FBQztZQUNoQyxDQUFDLGFBQWEsRUFBRSxDQUFDLE1BQU0sRUFBRSxX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QyxPQUFPLEVBQUUsQ0FBQyxDQUFDLENBQUM7WUFDM0MsTUFBTSxDQUFDLFdBQVcsQ0FBQyxNQUFBLElBQUksQ0FBQyxZQUFZLDBDQUFFLFFBQVEsQ0FBQyxLQUFLLENBQUMsRUFBRSxhQUFhLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUMzRSxDQUFDLENBQUMsQ0FBQztLQUNKO0FBQ0gsQ0FBQyxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBuZXR3b3JrcyB9IGZyb20gJ2JpdGNvaW5qcy1saWInO1xyXG5pbXBvcnQgKiBhcyBhc3NlcnQgZnJvbSAnYXNzZXJ0JztcclxuXHJcbmltcG9ydCB7XHJcbiAgY3JlYXRlT3V0cHV0U2NyaXB0Mm9mMyxcclxuICBjcmVhdGVPdXRwdXRTY3JpcHRQMnNoUDJwayxcclxuICBjcmVhdGVQYXltZW50UDJ0cixcclxuICBpc1N1cHBvcnRlZFNjcmlwdFR5cGUsXHJcbiAgc2NyaXB0VHlwZXMyT2YzLFxyXG59IGZyb20gJy4uLy4uL3NyYy9iaXRnby9vdXRwdXRTY3JpcHRzJztcclxuaW1wb3J0IHsgRUNQYWlyLCBnZXROZXR3b3JrTmFtZSwgZ2V0TmV0d29ya0xpc3QgfSBmcm9tICcuLi8uLi9zcmMnO1xyXG5pbXBvcnQgeyBnZXRLZXlUcmlwbGUgfSBmcm9tICcuLi8uLi9zcmMvdGVzdHV0aWwnO1xyXG5cclxuY29uc3Qga2V5cyA9IGdldEtleVRyaXBsZSgndXR4bycpO1xyXG5jb25zdCBwdWJrZXlzID0ga2V5cy5tYXAoKGspID0+IGsucHVibGljS2V5KSBhcyBbQnVmZmVyLCBCdWZmZXIsIEJ1ZmZlcl07XHJcblxyXG5kZXNjcmliZSgnb3V0cHV0IHNjcmlwdCBzdXBwb3J0JywgZnVuY3Rpb24gKCkge1xyXG4gIGl0KCdoYXMgZXhwZWN0ZWQgdmFsdWVzIGZvciBlYWNoIG5ldHdvcmsnLCBmdW5jdGlvbiAoKSB7XHJcbiAgICBhc3NlcnQuZGVlcFN0cmljdEVxdWFsKFxyXG4gICAgICBnZXROZXR3b3JrTGlzdCgpLm1hcCgobikgPT4gW2dldE5ldHdvcmtOYW1lKG4pLCBzY3JpcHRUeXBlczJPZjMuZmlsdGVyKCh0KSA9PiBpc1N1cHBvcnRlZFNjcmlwdFR5cGUobiwgdCkpXSksXHJcbiAgICAgIFtcclxuICAgICAgICBbJ2JpdGNvaW4nLCBbJ3Ayc2gnLCAncDJzaFAyd3NoJywgJ3Ayd3NoJywgJ3AydHInLCAncDJ0ck11c2lnMiddXSxcclxuICAgICAgICBbJ3Rlc3RuZXQnLCBbJ3Ayc2gnLCAncDJzaFAyd3NoJywgJ3Ayd3NoJywgJ3AydHInLCAncDJ0ck11c2lnMiddXSxcclxuICAgICAgICBbJ2JpdGNvaW5jYXNoJywgWydwMnNoJ11dLFxyXG4gICAgICAgIFsnYml0Y29pbmNhc2hUZXN0bmV0JywgWydwMnNoJ11dLFxyXG4gICAgICAgIFsnYml0Y29pbmdvbGQnLCBbJ3Ayc2gnLCAncDJzaFAyd3NoJywgJ3Ayd3NoJ11dLFxyXG4gICAgICAgIFsnYml0Y29pbmdvbGRUZXN0bmV0JywgWydwMnNoJywgJ3Ayc2hQMndzaCcsICdwMndzaCddXSxcclxuICAgICAgICBbJ2JpdGNvaW5zdicsIFsncDJzaCddXSxcclxuICAgICAgICBbJ2JpdGNvaW5zdlRlc3RuZXQnLCBbJ3Ayc2gnXV0sXHJcbiAgICAgICAgWydkYXNoJywgWydwMnNoJ11dLFxyXG4gICAgICAgIFsnZGFzaFRlc3QnLCBbJ3Ayc2gnXV0sXHJcbiAgICAgICAgWydkb2dlY29pbicsIFsncDJzaCddXSxcclxuICAgICAgICBbJ2RvZ2Vjb2luVGVzdCcsIFsncDJzaCddXSxcclxuICAgICAgICBbJ2VjYXNoJywgWydwMnNoJ11dLFxyXG4gICAgICAgIFsnZWNhc2hUZXN0JywgWydwMnNoJ11dLFxyXG4gICAgICAgIFsnbGl0ZWNvaW4nLCBbJ3Ayc2gnLCAncDJzaFAyd3NoJywgJ3Ayd3NoJ11dLFxyXG4gICAgICAgIFsnbGl0ZWNvaW5UZXN0JywgWydwMnNoJywgJ3Ayc2hQMndzaCcsICdwMndzaCddXSxcclxuICAgICAgICBbJ3pjYXNoJywgWydwMnNoJ11dLFxyXG4gICAgICAgIFsnemNhc2hUZXN0JywgWydwMnNoJ11dLFxyXG4gICAgICBdXHJcbiAgICApO1xyXG4gIH0pO1xyXG5cclxuICBpdCgnZG9lcyBub3QgYWxsb3cgdW5zdXBwb3J0ZWQgc2NyaXB0cyB3aGVuIG5ldHdvcmsgcGFyYW1ldGVyIGlzIHByb3ZpZGVkJywgZnVuY3Rpb24gKCkge1xyXG4gICAgZ2V0TmV0d29ya0xpc3QoKS5mb3JFYWNoKChuKSA9PiB7XHJcbiAgICAgIHNjcmlwdFR5cGVzMk9mM1xyXG4gICAgICAgIC5maWx0ZXIoKHQpID0+ICFpc1N1cHBvcnRlZFNjcmlwdFR5cGUobiwgdCkpXHJcbiAgICAgICAgLmZvckVhY2goKHQpID0+XHJcbiAgICAgICAgICBhc3NlcnQudGhyb3dzKFxyXG4gICAgICAgICAgICAoKSA9PiBjcmVhdGVPdXRwdXRTY3JpcHQyb2YzKHB1YmtleXMsIHQsIG4pLFxyXG4gICAgICAgICAgICAoZXJyKSA9PiAhIShlcnIgaW5zdGFuY2VvZiBFcnJvciAmJiBlcnIubWVzc2FnZS5tYXRjaCgvXnVuc3VwcG9ydGVkIHNjcmlwdCB0eXBlLykpXHJcbiAgICAgICAgICApXHJcbiAgICAgICAgKTtcclxuICAgIH0pO1xyXG4gIH0pO1xyXG59KTtcclxuXHJcbmRlc2NyaWJlKCdjcmVhdGVPdXRwdXRTY3JpcHQyb2YzKCknLCBmdW5jdGlvbiAoKSB7XHJcbiAgY29uc3QgcDJtcyA9XHJcbiAgICAnNTIyMTAzZjE2NjdiZTZlOGI4ZWIwYzk4MDE1NWRmY2RhNzQyYWZmZWViMGIwY2ExMDk2OWM1NDE1MjcxMzE4NScgK1xyXG4gICAgJzZkNjVjOTIxMDMwNTkwMmNmMjBhMGJiYzkyNzRlNjI0MTRhYTRhZmVhOGM5NmUzZTgzYWJiNTIzM2Q3MjM1NWMnICtcclxuICAgICcyN2Q3ZGU2NjBhMjEwM2M3OTE4M2Q2NjQxNTg1MTc5ZDI1YmJjMDkxYjJhN2ZjZTg2YzlmMTVkMzExZTVhY2EwJyArXHJcbiAgICAnYTAyMDQ3OGQ4ZjIwODc1M2FlJztcclxuICBjb25zdCBwMndzaCA9ICcwMDIwOTVlY2FhY2I2MDZiOWVjZTM4MjFjMDExMWMwYTEyMDhkZDFkMzUxOTI4MDliZjhjZjZjYmFkNGJiZWFjYTY3Zic7XHJcbiAgY29uc3QgcDJ0ciA9ICc1MTIwYTRjZTdkMTIyYmRjMDUyMjRiMjc0MTUyMjg3MjhlNWQ1YmY0ODU5NjFhMDc0OTNkMDY4ZGRiYjRkNDU2OTA1OSc7XHJcbiAgY29uc3QgcDJ0ck11c2lnMiA9ICc1MTIwN2NkNzk3OTlhNGNmNjE4M2IwMThhMjk5NjBmZmU4MzUxZTkwYWZkYjIzODNiOWI5ZGNkM2VjMDc5MjljNzJlMyc7XHJcblxyXG4gIHNjcmlwdFR5cGVzMk9mMy5mb3JFYWNoKChzY3JpcHRUeXBlKSA9PiB7XHJcbiAgICBpdChgY3JlYXRlcyBvdXRwdXQgc2NyaXB0ICh0eXBlPSR7c2NyaXB0VHlwZX0pYCwgZnVuY3Rpb24gKCkge1xyXG4gICAgICBjb25zdCB7IHNjcmlwdFB1YktleSwgcmVkZWVtU2NyaXB0LCB3aXRuZXNzU2NyaXB0IH0gPSBjcmVhdGVPdXRwdXRTY3JpcHQyb2YzKHB1YmtleXMsIHNjcmlwdFR5cGUpO1xyXG5cclxuICAgICAgc3dpdGNoIChzY3JpcHRUeXBlKSB7XHJcbiAgICAgICAgY2FzZSAncDJzaCc6XHJcbiAgICAgICAgICBhc3NlcnQuc3RyaWN0RXF1YWwoc2NyaXB0UHViS2V5LnRvU3RyaW5nKCdoZXgnKSwgJ2E5MTQ5MTU5MGJlZDgxOThlYTdjYTU3YmE2OGFiN2NiZmFiYzY1NmNiYmFmODcnKTtcclxuICAgICAgICAgIGFzc2VydC5zdHJpY3RFcXVhbChyZWRlZW1TY3JpcHQgJiYgcmVkZWVtU2NyaXB0LnRvU3RyaW5nKCdoZXgnKSwgcDJtcyk7XHJcbiAgICAgICAgICBhc3NlcnQuc3RyaWN0RXF1YWwod2l0bmVzc1NjcmlwdCwgdW5kZWZpbmVkKTtcclxuICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIGNhc2UgJ3Ayc2hQMndzaCc6XHJcbiAgICAgICAgICBhc3NlcnQuc3RyaWN0RXF1YWwoc2NyaXB0UHViS2V5LnRvU3RyaW5nKCdoZXgnKSwgJ2E5MTQwMzEyZGQ2ZjgwMWFiMTFkNTNjMzVmNmEyYmRhYzljNjAyYTU1ZDlkODcnKTtcclxuICAgICAgICAgIGFzc2VydC5zdHJpY3RFcXVhbChyZWRlZW1TY3JpcHQgJiYgcmVkZWVtU2NyaXB0LnRvU3RyaW5nKCdoZXgnKSwgcDJ3c2gpO1xyXG4gICAgICAgICAgYXNzZXJ0LnN0cmljdEVxdWFsKHdpdG5lc3NTY3JpcHQgJiYgd2l0bmVzc1NjcmlwdC50b1N0cmluZygnaGV4JyksIHAybXMpO1xyXG4gICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgY2FzZSAncDJ3c2gnOlxyXG4gICAgICAgICAgYXNzZXJ0LnN0cmljdEVxdWFsKHNjcmlwdFB1YktleS50b1N0cmluZygnaGV4JyksIHAyd3NoKTtcclxuICAgICAgICAgIGFzc2VydC5zdHJpY3RFcXVhbChyZWRlZW1TY3JpcHQsIHVuZGVmaW5lZCk7XHJcbiAgICAgICAgICBhc3NlcnQuc3RyaWN0RXF1YWwod2l0bmVzc1NjcmlwdCAmJiB3aXRuZXNzU2NyaXB0LnRvU3RyaW5nKCdoZXgnKSwgcDJtcyk7XHJcbiAgICAgICAgICBicmVhaztcclxuICAgICAgICBjYXNlICdwMnRyJzpcclxuICAgICAgICAgIGFzc2VydC5zdHJpY3RFcXVhbChzY3JpcHRQdWJLZXkudG9TdHJpbmcoJ2hleCcpLCBwMnRyKTtcclxuICAgICAgICAgIC8vIFRPRE86IHZhbGlkYXRlIHNjcmlwdCBjb250cm9sIGJsb2NrcyBvbmNlIHRoZXkgYXJlIHJldHVybmVkIGJ5IHBheW1lbnRzLnAydHIoKVxyXG4gICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgY2FzZSAncDJ0ck11c2lnMic6XHJcbiAgICAgICAgICBhc3NlcnQuc3RyaWN0RXF1YWwoc2NyaXB0UHViS2V5LnRvU3RyaW5nKCdoZXgnKSwgcDJ0ck11c2lnMik7XHJcbiAgICAgICAgICBicmVhaztcclxuICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGB1bmV4cGVjdGVkIHR5cGUgJHtzY3JpcHRUeXBlfWApO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICB9KTtcclxufSk7XHJcblxyXG5kZXNjcmliZSgnY3JlYXRlT3V0cHV0U2NyaXB0UDJzaFAycGsnLCBmdW5jdGlvbiAoKSB7XHJcbiAgaXQoJ2NyZWF0ZSBvdXRwdXQgc2NyaXB0IHAyc2hQMnBrJywgZnVuY3Rpb24gKCkge1xyXG4gICAgY29uc3Qga2V5cGFpciA9IEVDUGFpci5mcm9tV0lGKCdjVEx4dzRLQzU1TFFmRmozZVp6NTFOcFdYMWoyamE0V2tiUUZiSGFUdWFSa1NGR2VKNHlTJywgbmV0d29ya3MudGVzdG5ldCk7XHJcbiAgICBjb25zdCB7IHNjcmlwdFB1YktleSwgcmVkZWVtU2NyaXB0LCB3aXRuZXNzU2NyaXB0IH0gPSBjcmVhdGVPdXRwdXRTY3JpcHRQMnNoUDJwayhrZXlwYWlyLnB1YmxpY0tleSk7XHJcbiAgICBhc3NlcnQuc3RyaWN0RXF1YWwoc2NyaXB0UHViS2V5LnRvU3RyaW5nKCdoZXgnKSwgJ2E5MTQxNzJkY2M0ZTAyNTM2MWQ5NTFhOTUxMWM2NzA5NzNhNGUzNzIwYzk4ODcnKTtcclxuICAgIGFzc2VydC5zdHJpY3RFcXVhbChcclxuICAgICAgcmVkZWVtU2NyaXB0Py50b1N0cmluZygnaGV4JyksXHJcbiAgICAgICcyMTAyMTlkYTQ4NDEyYzIyNjg4NjVmZThjMTI2MzI3ZDFiMTJlZWUzNTBhM2I2OWViMDllMzMyM2NjOWExMTgyODk0NWFjJ1xyXG4gICAgKTtcclxuICAgIGFzc2VydC5zdHJpY3RFcXVhbCh3aXRuZXNzU2NyaXB0LCB1bmRlZmluZWQpO1xyXG4gIH0pO1xyXG59KTtcclxuXHJcbmRlc2NyaWJlKCdjcmVhdGVQYXltZW50UDJ0cicsICgpID0+IHtcclxuICBjb25zdCBjb250cm9sQmxvY2tzID0gW1xyXG4gICAgJ2MxYWEzMzAzZDQ4ODQ3ZjRkNTRhYTAyYTRmZjk3NDQ4ZjFmNDMwYjA3ZWVjZDYzMmM0MWYzOTBlM2Y4NDMxYTE2NjQ4N2RmMDI0YTBlYjM4YWViNTZiNTI2M2NmMjJjODRhMmM5YzdkYWFkOWE4ZTU1Y2NlMmUzY2FjODdjNTJhMGEnLFxyXG4gICAgJ2MxYWEzMzAzZDQ4ODQ3ZjRkNTRhYTAyYTRmZjk3NDQ4ZjFmNDMwYjA3ZWVjZDYzMmM0MWYzOTBlM2Y4NDMxYTE2NjBhNzVmNjJkYjY3N2I5YzE5NzQ3NDE3MzVhYTRiMGMyYzg3MTg3OTZjODI1NzhiOTYwZTFmYTA5ODZkNGYyNWNmMGIyMTI3NjY5YzEyYWQ3NWEwNzljMjU1MDJhNTQ1Njc2NGRlMjNmMzBkZjFmY2RiODg0MThmZTk3MDgzNGQ3JyxcclxuICAgICdjMWFhMzMwM2Q0ODg0N2Y0ZDU0YWEwMmE0ZmY5NzQ0OGYxZjQzMGIwN2VlY2Q2MzJjNDFmMzkwZTNmODQzMWExNjY5YzAzOTM2NmE5Y2U4OWFkMzBjOTkzNTI2OGExMDExMGNiMWE0YjYzNTdkY2MyYzY1MWU5ZGUzODYzOWMyMDZhZjBiMjEyNzY2OWMxMmFkNzVhMDc5YzI1NTAyYTU0NTY3NjRkZTIzZjMwZGYxZmNkYjg4NDE4ZmU5NzA4MzRkNycsXHJcbiAgXTtcclxuXHJcbiAgaXQoJ2FsbG93cyBubyByZWRlZW1JbmRleCcsICgpID0+IHtcclxuICAgIGNvbnN0IHAydHIgPSBjcmVhdGVQYXltZW50UDJ0cihwdWJrZXlzKTtcclxuICAgIGFzc2VydC5zdHJpY3RFcXVhbChwMnRyLmNvbnRyb2xCbG9jaywgdW5kZWZpbmVkKTtcclxuICB9KTtcclxuXHJcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCAzOyBpKyspIHtcclxuICAgIGl0KGBjcmVhdGVzIGNvbnRyb2xCbG9jayBmb3IgcmVkZWVtSW5kZXggJHtpfWAsICgpID0+IHtcclxuICAgICAgY29uc3QgcDJ0ciA9IGNyZWF0ZVBheW1lbnRQMnRyKHB1YmtleXMsIGkpO1xyXG4gICAgICBhc3NlcnQuc3RyaWN0RXF1YWwocDJ0ci5jb250cm9sQmxvY2s/LnRvU3RyaW5nKCdoZXgnKSwgY29udHJvbEJsb2Nrc1tpXSk7XHJcbiAgICB9KTtcclxuICB9XHJcbn0pO1xyXG4iXX0=