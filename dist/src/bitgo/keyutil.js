"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.privateKeyBufferFromECPair = exports.privateKeyBufferToECPair = void 0;
const noble_ecc_1 = require("../noble_ecc");
/**
 * Create an ECPair from the raw private key bytes
 * @param {Buffer} buffer - Private key for the ECPair. Must be exactly 32 bytes.
 * @param {Object} [network] - Network for the ECPair. Defaults to bitcoin.
 * @return {ECPair}
 */
function privateKeyBufferToECPair(buffer, network) {
    if (!Buffer.isBuffer(buffer) || buffer.length !== 32) {
        throw new Error('invalid private key buffer');
    }
    return noble_ecc_1.ECPair.fromPrivateKey(buffer);
}
exports.privateKeyBufferToECPair = privateKeyBufferToECPair;
/**
 * Get the private key as a 32 bytes buffer. If it is smaller than 32 bytes, pad it with zeros
 * @param {ECPair} ecPair
 * @return Buffer 32 bytes
 */
function privateKeyBufferFromECPair(ecPair) {
    if (ecPair.constructor.name !== 'ECPair') {
        throw new TypeError(`invalid argument ecpair`);
    }
    const privkey = ecPair.privateKey;
    if (!Buffer.isBuffer(privkey)) {
        throw new Error(`unexpected privkey type`);
    }
    if (privkey.length !== 32) {
        throw new Error(`unexpected privkey length`);
    }
    return privkey;
}
exports.privateKeyBufferFromECPair = privateKeyBufferFromECPair;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoia2V5dXRpbC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9iaXRnby9rZXl1dGlsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUVBLDRDQUFzQztBQUV0Qzs7Ozs7R0FLRztBQUNILFNBQWdCLHdCQUF3QixDQUFDLE1BQWMsRUFBRSxPQUFpQjtJQUN4RSxJQUFJLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsSUFBSSxNQUFNLENBQUMsTUFBTSxLQUFLLEVBQUUsRUFBRTtRQUNwRCxNQUFNLElBQUksS0FBSyxDQUFDLDRCQUE0QixDQUFDLENBQUM7S0FDL0M7SUFFRCxPQUFPLGtCQUFNLENBQUMsY0FBYyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0FBQ3ZDLENBQUM7QUFORCw0REFNQztBQUVEOzs7O0dBSUc7QUFDSCxTQUFnQiwwQkFBMEIsQ0FBQyxNQUF1QjtJQUNoRSxJQUFJLE1BQU0sQ0FBQyxXQUFXLENBQUMsSUFBSSxLQUFLLFFBQVEsRUFBRTtRQUN4QyxNQUFNLElBQUksU0FBUyxDQUFDLHlCQUF5QixDQUFDLENBQUM7S0FDaEQ7SUFFRCxNQUFNLE9BQU8sR0FBRyxNQUFNLENBQUMsVUFBVSxDQUFDO0lBQ2xDLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxFQUFFO1FBQzdCLE1BQU0sSUFBSSxLQUFLLENBQUMseUJBQXlCLENBQUMsQ0FBQztLQUM1QztJQUNELElBQUksT0FBTyxDQUFDLE1BQU0sS0FBSyxFQUFFLEVBQUU7UUFDekIsTUFBTSxJQUFJLEtBQUssQ0FBQywyQkFBMkIsQ0FBQyxDQUFDO0tBQzlDO0lBRUQsT0FBTyxPQUFPLENBQUM7QUFDakIsQ0FBQztBQWRELGdFQWNDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRUNQYWlySW50ZXJmYWNlIH0gZnJvbSAnZWNwYWlyJztcclxuaW1wb3J0IHsgTmV0d29yayB9IGZyb20gJy4uL25ldHdvcmtzJztcclxuaW1wb3J0IHsgRUNQYWlyIH0gZnJvbSAnLi4vbm9ibGVfZWNjJztcclxuXHJcbi8qKlxyXG4gKiBDcmVhdGUgYW4gRUNQYWlyIGZyb20gdGhlIHJhdyBwcml2YXRlIGtleSBieXRlc1xyXG4gKiBAcGFyYW0ge0J1ZmZlcn0gYnVmZmVyIC0gUHJpdmF0ZSBrZXkgZm9yIHRoZSBFQ1BhaXIuIE11c3QgYmUgZXhhY3RseSAzMiBieXRlcy5cclxuICogQHBhcmFtIHtPYmplY3R9IFtuZXR3b3JrXSAtIE5ldHdvcmsgZm9yIHRoZSBFQ1BhaXIuIERlZmF1bHRzIHRvIGJpdGNvaW4uXHJcbiAqIEByZXR1cm4ge0VDUGFpcn1cclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBwcml2YXRlS2V5QnVmZmVyVG9FQ1BhaXIoYnVmZmVyOiBCdWZmZXIsIG5ldHdvcms/OiBOZXR3b3JrKTogRUNQYWlySW50ZXJmYWNlIHtcclxuICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcihidWZmZXIpIHx8IGJ1ZmZlci5sZW5ndGggIT09IDMyKSB7XHJcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ2ludmFsaWQgcHJpdmF0ZSBrZXkgYnVmZmVyJyk7XHJcbiAgfVxyXG5cclxuICByZXR1cm4gRUNQYWlyLmZyb21Qcml2YXRlS2V5KGJ1ZmZlcik7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBHZXQgdGhlIHByaXZhdGUga2V5IGFzIGEgMzIgYnl0ZXMgYnVmZmVyLiBJZiBpdCBpcyBzbWFsbGVyIHRoYW4gMzIgYnl0ZXMsIHBhZCBpdCB3aXRoIHplcm9zXHJcbiAqIEBwYXJhbSB7RUNQYWlyfSBlY1BhaXJcclxuICogQHJldHVybiBCdWZmZXIgMzIgYnl0ZXNcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBwcml2YXRlS2V5QnVmZmVyRnJvbUVDUGFpcihlY1BhaXI6IEVDUGFpckludGVyZmFjZSk6IEJ1ZmZlciB7XHJcbiAgaWYgKGVjUGFpci5jb25zdHJ1Y3Rvci5uYW1lICE9PSAnRUNQYWlyJykge1xyXG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihgaW52YWxpZCBhcmd1bWVudCBlY3BhaXJgKTtcclxuICB9XHJcblxyXG4gIGNvbnN0IHByaXZrZXkgPSBlY1BhaXIucHJpdmF0ZUtleTtcclxuICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcihwcml2a2V5KSkge1xyXG4gICAgdGhyb3cgbmV3IEVycm9yKGB1bmV4cGVjdGVkIHByaXZrZXkgdHlwZWApO1xyXG4gIH1cclxuICBpZiAocHJpdmtleS5sZW5ndGggIT09IDMyKSB7XHJcbiAgICB0aHJvdyBuZXcgRXJyb3IoYHVuZXhwZWN0ZWQgcHJpdmtleSBsZW5ndGhgKTtcclxuICB9XHJcblxyXG4gIHJldHVybiBwcml2a2V5O1xyXG59XHJcbiJdfQ==