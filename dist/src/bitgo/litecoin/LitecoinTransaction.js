"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.LitecoinTransaction = void 0;
const bufferutils_1 = require("bitcoinjs-lib/src/bufferutils");
const UtxoTransaction_1 = require("../UtxoTransaction");
const networks_1 = require("../../networks");
/**
 * We only care about reading a transaction that can have a potentially different advanced transaction flag,
 * but we dont need to write one.
 */
class LitecoinTransaction extends UtxoTransaction_1.UtxoTransaction {
    constructor(network, tx, amountType) {
        super(network, tx, amountType);
        if (!(0, networks_1.isLitecoin)(network)) {
            throw new Error(`invalid network`);
        }
    }
    static newTransaction(network, transaction, amountType) {
        return new LitecoinTransaction(network, transaction, amountType);
    }
    clone(amountType) {
        return new LitecoinTransaction(this.network, this, amountType);
    }
    static fromBuffer(buffer, noStrict, amountType = 'number', network) {
        if (!network) {
            throw new Error(`must provide network`);
        }
        const bufferReader = new bufferutils_1.BufferReader(buffer);
        const txVersion = bufferReader.readInt32();
        const marker = bufferReader.readUInt8();
        const flag = bufferReader.readUInt8();
        if (marker === LitecoinTransaction.ADVANCED_TRANSACTION_MARKER &&
            flag === LitecoinTransaction.MWEB_PEGOUT_TX_FLAG) {
            // Litecoin has an MWEB advanced transaction marker. Slice out the marker and 5th to last byte  and read like a normal transaction
            const bufferWriter = new bufferutils_1.BufferWriter(Buffer.allocUnsafe(buffer.length - 3));
            bufferWriter.writeUInt32(txVersion);
            bufferWriter.writeSlice(buffer.slice(6, buffer.length - 5));
            bufferWriter.writeSlice(buffer.slice(buffer.length - 4, buffer.length));
            return super.fromBuffer(bufferWriter.buffer, noStrict, amountType, network);
        }
        return super.fromBuffer(buffer, noStrict, amountType, network);
    }
}
exports.LitecoinTransaction = LitecoinTransaction;
LitecoinTransaction.MWEB_PEGOUT_TX_FLAG = 0x08;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTGl0ZWNvaW5UcmFuc2FjdGlvbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9iaXRnby9saXRlY29pbi9MaXRlY29pblRyYW5zYWN0aW9uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLCtEQUEyRTtBQUUzRSx3REFBcUQ7QUFDckQsNkNBQStEO0FBSS9EOzs7R0FHRztBQUNILE1BQWEsbUJBQThELFNBQVEsaUNBQXdCO0lBR3pHLFlBQVksT0FBZ0IsRUFBRSxFQUF5QyxFQUFFLFVBQWdDO1FBQ3ZHLEtBQUssQ0FBQyxPQUFPLEVBQUUsRUFBRSxFQUFFLFVBQVUsQ0FBQyxDQUFDO1FBRS9CLElBQUksQ0FBQyxJQUFBLHFCQUFVLEVBQUMsT0FBTyxDQUFDLEVBQUU7WUFDeEIsTUFBTSxJQUFJLEtBQUssQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO1NBQ3BDO0lBQ0gsQ0FBQztJQUVTLE1BQU0sQ0FBQyxjQUFjLENBQzdCLE9BQWdCLEVBQ2hCLFdBQWtELEVBQ2xELFVBQWdDO1FBRWhDLE9BQU8sSUFBSSxtQkFBbUIsQ0FBVSxPQUFPLEVBQUUsV0FBVyxFQUFFLFVBQVUsQ0FBQyxDQUFDO0lBQzVFLENBQUM7SUFFRCxLQUFLLENBQXdDLFVBQWdDO1FBQzNFLE9BQU8sSUFBSSxtQkFBbUIsQ0FBTSxJQUFJLENBQUMsT0FBTyxFQUFFLElBQUksRUFBRSxVQUFVLENBQUMsQ0FBQztJQUN0RSxDQUFDO0lBRUQsTUFBTSxDQUFDLFVBQVUsQ0FDZixNQUFjLEVBQ2QsUUFBaUIsRUFDakIsYUFBa0MsUUFBUSxFQUMxQyxPQUF5QjtRQUV6QixJQUFJLENBQUMsT0FBTyxFQUFFO1lBQ1osTUFBTSxJQUFJLEtBQUssQ0FBQyxzQkFBc0IsQ0FBQyxDQUFDO1NBQ3pDO1FBRUQsTUFBTSxZQUFZLEdBQUcsSUFBSSwwQkFBWSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQzlDLE1BQU0sU0FBUyxHQUFHLFlBQVksQ0FBQyxTQUFTLEVBQUUsQ0FBQztRQUMzQyxNQUFNLE1BQU0sR0FBRyxZQUFZLENBQUMsU0FBUyxFQUFFLENBQUM7UUFDeEMsTUFBTSxJQUFJLEdBQUcsWUFBWSxDQUFDLFNBQVMsRUFBRSxDQUFDO1FBRXRDLElBQ0UsTUFBTSxLQUFLLG1CQUFtQixDQUFDLDJCQUEyQjtZQUMxRCxJQUFJLEtBQUssbUJBQW1CLENBQUMsbUJBQW1CLEVBQ2hEO1lBQ0Esa0lBQWtJO1lBQ2xJLE1BQU0sWUFBWSxHQUFHLElBQUksMEJBQVksQ0FBQyxNQUFNLENBQUMsV0FBVyxDQUFDLE1BQU0sQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUM3RSxZQUFZLENBQUMsV0FBVyxDQUFDLFNBQVMsQ0FBQyxDQUFDO1lBQ3BDLFlBQVksQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsTUFBTSxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQzVELFlBQVksQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRSxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztZQUN4RSxPQUFPLEtBQUssQ0FBQyxVQUFVLENBQUMsWUFBWSxDQUFDLE1BQU0sRUFBRSxRQUFRLEVBQUUsVUFBVSxFQUFFLE9BQU8sQ0FBQyxDQUFDO1NBQzdFO1FBQ0QsT0FBTyxLQUFLLENBQUMsVUFBVSxDQUFDLE1BQU0sRUFBRSxRQUFRLEVBQUUsVUFBVSxFQUFFLE9BQU8sQ0FBQyxDQUFDO0lBQ2pFLENBQUM7O0FBbERILGtEQW1EQztBQWxEUSx1Q0FBbUIsR0FBRyxJQUFJLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBCdWZmZXJSZWFkZXIsIEJ1ZmZlcldyaXRlciB9IGZyb20gJ2JpdGNvaW5qcy1saWIvc3JjL2J1ZmZlcnV0aWxzJztcclxuXHJcbmltcG9ydCB7IFV0eG9UcmFuc2FjdGlvbiB9IGZyb20gJy4uL1V0eG9UcmFuc2FjdGlvbic7XHJcbmltcG9ydCB7IGlzTGl0ZWNvaW4sIE5ldHdvcmssIG5ldHdvcmtzIH0gZnJvbSAnLi4vLi4vbmV0d29ya3MnO1xyXG5cclxuZXhwb3J0IHR5cGUgTGl0ZWNvaW5OZXR3b3JrID0gdHlwZW9mIG5ldHdvcmtzLmxpdGVjb2luIHwgdHlwZW9mIG5ldHdvcmtzLmxpdGVjb2luVGVzdDtcclxuXHJcbi8qKlxyXG4gKiBXZSBvbmx5IGNhcmUgYWJvdXQgcmVhZGluZyBhIHRyYW5zYWN0aW9uIHRoYXQgY2FuIGhhdmUgYSBwb3RlbnRpYWxseSBkaWZmZXJlbnQgYWR2YW5jZWQgdHJhbnNhY3Rpb24gZmxhZyxcclxuICogYnV0IHdlIGRvbnQgbmVlZCB0byB3cml0ZSBvbmUuXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgTGl0ZWNvaW5UcmFuc2FjdGlvbjxUTnVtYmVyIGV4dGVuZHMgbnVtYmVyIHwgYmlnaW50ID0gbnVtYmVyPiBleHRlbmRzIFV0eG9UcmFuc2FjdGlvbjxUTnVtYmVyPiB7XHJcbiAgc3RhdGljIE1XRUJfUEVHT1VUX1RYX0ZMQUcgPSAweDA4O1xyXG5cclxuICBjb25zdHJ1Y3RvcihuZXR3b3JrOiBOZXR3b3JrLCB0eD86IExpdGVjb2luVHJhbnNhY3Rpb248YmlnaW50IHwgbnVtYmVyPiwgYW1vdW50VHlwZT86ICdiaWdpbnQnIHwgJ251bWJlcicpIHtcclxuICAgIHN1cGVyKG5ldHdvcmssIHR4LCBhbW91bnRUeXBlKTtcclxuXHJcbiAgICBpZiAoIWlzTGl0ZWNvaW4obmV0d29yaykpIHtcclxuICAgICAgdGhyb3cgbmV3IEVycm9yKGBpbnZhbGlkIG5ldHdvcmtgKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHByb3RlY3RlZCBzdGF0aWMgbmV3VHJhbnNhY3Rpb248VE51bWJlciBleHRlbmRzIG51bWJlciB8IGJpZ2ludCA9IG51bWJlcj4oXHJcbiAgICBuZXR3b3JrOiBOZXR3b3JrLFxyXG4gICAgdHJhbnNhY3Rpb24/OiBMaXRlY29pblRyYW5zYWN0aW9uPG51bWJlciB8IGJpZ2ludD4sXHJcbiAgICBhbW91bnRUeXBlPzogJ251bWJlcicgfCAnYmlnaW50J1xyXG4gICk6IExpdGVjb2luVHJhbnNhY3Rpb248VE51bWJlcj4ge1xyXG4gICAgcmV0dXJuIG5ldyBMaXRlY29pblRyYW5zYWN0aW9uPFROdW1iZXI+KG5ldHdvcmssIHRyYW5zYWN0aW9uLCBhbW91bnRUeXBlKTtcclxuICB9XHJcblxyXG4gIGNsb25lPFROMiBleHRlbmRzIGJpZ2ludCB8IG51bWJlciA9IFROdW1iZXI+KGFtb3VudFR5cGU/OiAnbnVtYmVyJyB8ICdiaWdpbnQnKTogTGl0ZWNvaW5UcmFuc2FjdGlvbjxUTjI+IHtcclxuICAgIHJldHVybiBuZXcgTGl0ZWNvaW5UcmFuc2FjdGlvbjxUTjI+KHRoaXMubmV0d29yaywgdGhpcywgYW1vdW50VHlwZSk7XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgZnJvbUJ1ZmZlcjxUTnVtYmVyIGV4dGVuZHMgbnVtYmVyIHwgYmlnaW50ID0gbnVtYmVyPihcclxuICAgIGJ1ZmZlcjogQnVmZmVyLFxyXG4gICAgbm9TdHJpY3Q6IGJvb2xlYW4sXHJcbiAgICBhbW91bnRUeXBlOiAnbnVtYmVyJyB8ICdiaWdpbnQnID0gJ251bWJlcicsXHJcbiAgICBuZXR3b3JrPzogTGl0ZWNvaW5OZXR3b3JrXHJcbiAgKTogTGl0ZWNvaW5UcmFuc2FjdGlvbjxUTnVtYmVyPiB7XHJcbiAgICBpZiAoIW5ldHdvcmspIHtcclxuICAgICAgdGhyb3cgbmV3IEVycm9yKGBtdXN0IHByb3ZpZGUgbmV0d29ya2ApO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IGJ1ZmZlclJlYWRlciA9IG5ldyBCdWZmZXJSZWFkZXIoYnVmZmVyKTtcclxuICAgIGNvbnN0IHR4VmVyc2lvbiA9IGJ1ZmZlclJlYWRlci5yZWFkSW50MzIoKTtcclxuICAgIGNvbnN0IG1hcmtlciA9IGJ1ZmZlclJlYWRlci5yZWFkVUludDgoKTtcclxuICAgIGNvbnN0IGZsYWcgPSBidWZmZXJSZWFkZXIucmVhZFVJbnQ4KCk7XHJcblxyXG4gICAgaWYgKFxyXG4gICAgICBtYXJrZXIgPT09IExpdGVjb2luVHJhbnNhY3Rpb24uQURWQU5DRURfVFJBTlNBQ1RJT05fTUFSS0VSICYmXHJcbiAgICAgIGZsYWcgPT09IExpdGVjb2luVHJhbnNhY3Rpb24uTVdFQl9QRUdPVVRfVFhfRkxBR1xyXG4gICAgKSB7XHJcbiAgICAgIC8vIExpdGVjb2luIGhhcyBhbiBNV0VCIGFkdmFuY2VkIHRyYW5zYWN0aW9uIG1hcmtlci4gU2xpY2Ugb3V0IHRoZSBtYXJrZXIgYW5kIDV0aCB0byBsYXN0IGJ5dGUgIGFuZCByZWFkIGxpa2UgYSBub3JtYWwgdHJhbnNhY3Rpb25cclxuICAgICAgY29uc3QgYnVmZmVyV3JpdGVyID0gbmV3IEJ1ZmZlcldyaXRlcihCdWZmZXIuYWxsb2NVbnNhZmUoYnVmZmVyLmxlbmd0aCAtIDMpKTtcclxuICAgICAgYnVmZmVyV3JpdGVyLndyaXRlVUludDMyKHR4VmVyc2lvbik7XHJcbiAgICAgIGJ1ZmZlcldyaXRlci53cml0ZVNsaWNlKGJ1ZmZlci5zbGljZSg2LCBidWZmZXIubGVuZ3RoIC0gNSkpO1xyXG4gICAgICBidWZmZXJXcml0ZXIud3JpdGVTbGljZShidWZmZXIuc2xpY2UoYnVmZmVyLmxlbmd0aCAtIDQsIGJ1ZmZlci5sZW5ndGgpKTtcclxuICAgICAgcmV0dXJuIHN1cGVyLmZyb21CdWZmZXIoYnVmZmVyV3JpdGVyLmJ1ZmZlciwgbm9TdHJpY3QsIGFtb3VudFR5cGUsIG5ldHdvcmspO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHN1cGVyLmZyb21CdWZmZXIoYnVmZmVyLCBub1N0cmljdCwgYW1vdW50VHlwZSwgbmV0d29yayk7XHJcbiAgfVxyXG59XHJcbiJdfQ==