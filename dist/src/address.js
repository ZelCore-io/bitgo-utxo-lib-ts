"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.toBech32 = exports.fromBech32 = exports.fromBase58Check = exports.toBase58Check = exports.toOutputScript = exports.fromOutputScript = void 0;
const bitcoinjs = require("bitcoinjs-lib");
const zcashAddress = require("../src/bitgo/zcash/address");
const grsAddress = require("groestlcoinjs-lib/src/address");
const networks_1 = require("./networks");
const index_1 = require("./index");
function fromOutputScript(outputScript, network) {
    if ((0, networks_1.isValidNetwork)(network) && (0, networks_1.isZcash)(network)) {
        return zcashAddress.fromOutputScript(outputScript, network);
    }
    if ((0, networks_1.isValidNetwork)(network) && (0, networks_1.isGroestlcoin)(network)) {
        return grsAddress.fromOutputScript(outputScript);
    }
    // We added p2tr payments from our forked bitcoinjs-lib to utxo-lib instead. Our bitcoinjs fork will no longer have
    // p2tr support so utxo-lib should take care of retrieving a p2tr address from outputScript and bitcoinjs-lib can
    // handle the other type of payments.
    try {
        return index_1.p2trPayments.p2tr({ output: outputScript, network }).address;
    }
    catch (e) {
        // noop. try the bitcoinjs method
    }
    return bitcoinjs.address.fromOutputScript(outputScript, network);
}
exports.fromOutputScript = fromOutputScript;
function toOutputScript(address, network) {
    if ((0, networks_1.isValidNetwork)(network) && (0, networks_1.isZcash)(network)) {
        return zcashAddress.toOutputScript(address, network);
    }
    if ((0, networks_1.isValidNetwork)(network) && (0, networks_1.isGroestlcoin)(network)) {
        return grsAddress.toOutputScript(address);
    }
    return bitcoinjs.address.toOutputScript(address, network);
}
exports.toOutputScript = toOutputScript;
function toBase58Check(hash, version, network) {
    if ((0, networks_1.isValidNetwork)(network) && (0, networks_1.isZcash)(network)) {
        return zcashAddress.toBase58Check(hash, version);
    }
    if ((0, networks_1.isValidNetwork)(network) && (0, networks_1.isGroestlcoin)(network)) {
        return grsAddress.toBase58GrsCheck(hash, version);
    }
    return bitcoinjs.address.toBase58Check(hash, version);
}
exports.toBase58Check = toBase58Check;
function fromBase58Check(address, network) {
    if ((0, networks_1.isValidNetwork)(network) && (0, networks_1.isZcash)(network)) {
        return zcashAddress.fromBase58Check(address);
    }
    if ((0, networks_1.isValidNetwork)(network) && (0, networks_1.isGroestlcoin)(network)) {
        return grsAddress.fromBase58GrsCheck(address);
    }
    return bitcoinjs.address.fromBase58Check(address);
}
exports.fromBase58Check = fromBase58Check;
_a = bitcoinjs.address, exports.fromBech32 = _a.fromBech32, exports.toBech32 = _a.toBech32;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWRkcmVzcy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9hZGRyZXNzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSwyQ0FBMkM7QUFHM0MsMkRBQTJEO0FBQzNELDREQUE0RDtBQUM1RCx5Q0FBNkU7QUFDN0UsbUNBQXVDO0FBRXZDLFNBQWdCLGdCQUFnQixDQUFDLFlBQW9CLEVBQUUsT0FBZ0I7SUFDckUsSUFBSSxJQUFBLHlCQUFjLEVBQUMsT0FBTyxDQUFDLElBQUksSUFBQSxrQkFBTyxFQUFDLE9BQU8sQ0FBQyxFQUFFO1FBQy9DLE9BQU8sWUFBWSxDQUFDLGdCQUFnQixDQUFDLFlBQVksRUFBRSxPQUFPLENBQUMsQ0FBQztLQUM3RDtJQUNELElBQUksSUFBQSx5QkFBYyxFQUFDLE9BQU8sQ0FBQyxJQUFJLElBQUEsd0JBQWEsRUFBQyxPQUFPLENBQUMsRUFBRTtRQUNyRCxPQUFPLFVBQVUsQ0FBQyxnQkFBZ0IsQ0FBQyxZQUFZLENBQUMsQ0FBQztLQUNsRDtJQUNELG1IQUFtSDtJQUNuSCxpSEFBaUg7SUFDakgscUNBQXFDO0lBQ3JDLElBQUk7UUFDRixPQUFPLG9CQUFZLENBQUMsSUFBSSxDQUFDLEVBQUUsTUFBTSxFQUFFLFlBQVksRUFBRSxPQUFPLEVBQUUsQ0FBQyxDQUFDLE9BQWlCLENBQUM7S0FDL0U7SUFBQyxPQUFPLENBQUMsRUFBRTtRQUNWLGlDQUFpQztLQUNsQztJQUVELE9BQU8sU0FBUyxDQUFDLE9BQU8sQ0FBQyxnQkFBZ0IsQ0FBQyxZQUFZLEVBQUUsT0FBNEIsQ0FBQyxDQUFDO0FBQ3hGLENBQUM7QUFqQkQsNENBaUJDO0FBRUQsU0FBZ0IsY0FBYyxDQUFDLE9BQWUsRUFBRSxPQUFnQjtJQUM5RCxJQUFJLElBQUEseUJBQWMsRUFBQyxPQUFPLENBQUMsSUFBSSxJQUFBLGtCQUFPLEVBQUMsT0FBTyxDQUFDLEVBQUU7UUFDL0MsT0FBTyxZQUFZLENBQUMsY0FBYyxDQUFDLE9BQU8sRUFBRSxPQUFPLENBQUMsQ0FBQztLQUN0RDtJQUNELElBQUksSUFBQSx5QkFBYyxFQUFDLE9BQU8sQ0FBQyxJQUFJLElBQUEsd0JBQWEsRUFBQyxPQUFPLENBQUMsRUFBRTtRQUNyRCxPQUFPLFVBQVUsQ0FBQyxjQUFjLENBQUMsT0FBTyxDQUFDLENBQUM7S0FDM0M7SUFDRCxPQUFPLFNBQVMsQ0FBQyxPQUFPLENBQUMsY0FBYyxDQUFDLE9BQU8sRUFBRSxPQUE0QixDQUFDLENBQUM7QUFDakYsQ0FBQztBQVJELHdDQVFDO0FBRUQsU0FBZ0IsYUFBYSxDQUFDLElBQVksRUFBRSxPQUFlLEVBQUUsT0FBZ0I7SUFDM0UsSUFBSSxJQUFBLHlCQUFjLEVBQUMsT0FBTyxDQUFDLElBQUksSUFBQSxrQkFBTyxFQUFDLE9BQU8sQ0FBQyxFQUFFO1FBQy9DLE9BQU8sWUFBWSxDQUFDLGFBQWEsQ0FBQyxJQUFJLEVBQUUsT0FBTyxDQUFDLENBQUM7S0FDbEQ7SUFDRCxJQUFJLElBQUEseUJBQWMsRUFBQyxPQUFPLENBQUMsSUFBSSxJQUFBLHdCQUFhLEVBQUMsT0FBTyxDQUFDLEVBQUU7UUFDckQsT0FBTyxVQUFVLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxFQUFFLE9BQU8sQ0FBQyxDQUFDO0tBQ25EO0lBQ0QsT0FBTyxTQUFTLENBQUMsT0FBTyxDQUFDLGFBQWEsQ0FBQyxJQUFJLEVBQUUsT0FBTyxDQUFDLENBQUM7QUFDeEQsQ0FBQztBQVJELHNDQVFDO0FBRUQsU0FBZ0IsZUFBZSxDQUFDLE9BQWUsRUFBRSxPQUFnQjtJQUMvRCxJQUFJLElBQUEseUJBQWMsRUFBQyxPQUFPLENBQUMsSUFBSSxJQUFBLGtCQUFPLEVBQUMsT0FBTyxDQUFDLEVBQUU7UUFDL0MsT0FBTyxZQUFZLENBQUMsZUFBZSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0tBQzlDO0lBQ0QsSUFBSSxJQUFBLHlCQUFjLEVBQUMsT0FBTyxDQUFDLElBQUksSUFBQSx3QkFBYSxFQUFDLE9BQU8sQ0FBQyxFQUFFO1FBQ3JELE9BQU8sVUFBVSxDQUFDLGtCQUFrQixDQUFDLE9BQU8sQ0FBQyxDQUFDO0tBQy9DO0lBQ0QsT0FBTyxTQUFTLENBQUMsT0FBTyxDQUFDLGVBQWUsQ0FBQyxPQUFPLENBQUMsQ0FBQztBQUNwRCxDQUFDO0FBUkQsMENBUUM7QUFFWSxLQUEyQixTQUFTLENBQUMsT0FBTyxFQUExQyxrQkFBVSxrQkFBRSxnQkFBUSxlQUF1QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIGJpdGNvaW5qcyBmcm9tICdiaXRjb2luanMtbGliJztcclxuaW1wb3J0IHsgQmFzZTU4Q2hlY2tSZXN1bHQsIEJlY2gzMlJlc3VsdCB9IGZyb20gJ2JpdGNvaW5qcy1saWIvc3JjL2FkZHJlc3MnO1xyXG5cclxuaW1wb3J0ICogYXMgemNhc2hBZGRyZXNzIGZyb20gJy4uL3NyYy9iaXRnby96Y2FzaC9hZGRyZXNzJztcclxuaW1wb3J0ICogYXMgZ3JzQWRkcmVzcyBmcm9tICdncm9lc3RsY29pbmpzLWxpYi9zcmMvYWRkcmVzcyc7XHJcbmltcG9ydCB7IGlzVmFsaWROZXR3b3JrLCBpc1pjYXNoLCBpc0dyb2VzdGxjb2luLCBOZXR3b3JrIH0gZnJvbSAnLi9uZXR3b3Jrcyc7XHJcbmltcG9ydCB7IHAydHJQYXltZW50cyB9IGZyb20gJy4vaW5kZXgnO1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGZyb21PdXRwdXRTY3JpcHQob3V0cHV0U2NyaXB0OiBCdWZmZXIsIG5ldHdvcms6IE5ldHdvcmspOiBzdHJpbmcge1xyXG4gIGlmIChpc1ZhbGlkTmV0d29yayhuZXR3b3JrKSAmJiBpc1pjYXNoKG5ldHdvcmspKSB7XHJcbiAgICByZXR1cm4gemNhc2hBZGRyZXNzLmZyb21PdXRwdXRTY3JpcHQob3V0cHV0U2NyaXB0LCBuZXR3b3JrKTtcclxuICB9XHJcbiAgaWYgKGlzVmFsaWROZXR3b3JrKG5ldHdvcmspICYmIGlzR3JvZXN0bGNvaW4obmV0d29yaykpIHtcclxuICAgIHJldHVybiBncnNBZGRyZXNzLmZyb21PdXRwdXRTY3JpcHQob3V0cHV0U2NyaXB0KTtcclxuICB9XHJcbiAgLy8gV2UgYWRkZWQgcDJ0ciBwYXltZW50cyBmcm9tIG91ciBmb3JrZWQgYml0Y29pbmpzLWxpYiB0byB1dHhvLWxpYiBpbnN0ZWFkLiBPdXIgYml0Y29pbmpzIGZvcmsgd2lsbCBubyBsb25nZXIgaGF2ZVxyXG4gIC8vIHAydHIgc3VwcG9ydCBzbyB1dHhvLWxpYiBzaG91bGQgdGFrZSBjYXJlIG9mIHJldHJpZXZpbmcgYSBwMnRyIGFkZHJlc3MgZnJvbSBvdXRwdXRTY3JpcHQgYW5kIGJpdGNvaW5qcy1saWIgY2FuXHJcbiAgLy8gaGFuZGxlIHRoZSBvdGhlciB0eXBlIG9mIHBheW1lbnRzLlxyXG4gIHRyeSB7XHJcbiAgICByZXR1cm4gcDJ0clBheW1lbnRzLnAydHIoeyBvdXRwdXQ6IG91dHB1dFNjcmlwdCwgbmV0d29yayB9KS5hZGRyZXNzIGFzIHN0cmluZztcclxuICB9IGNhdGNoIChlKSB7XHJcbiAgICAvLyBub29wLiB0cnkgdGhlIGJpdGNvaW5qcyBtZXRob2RcclxuICB9XHJcblxyXG4gIHJldHVybiBiaXRjb2luanMuYWRkcmVzcy5mcm9tT3V0cHV0U2NyaXB0KG91dHB1dFNjcmlwdCwgbmV0d29yayBhcyBiaXRjb2luanMuTmV0d29yayk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiB0b091dHB1dFNjcmlwdChhZGRyZXNzOiBzdHJpbmcsIG5ldHdvcms6IE5ldHdvcmspOiBCdWZmZXIge1xyXG4gIGlmIChpc1ZhbGlkTmV0d29yayhuZXR3b3JrKSAmJiBpc1pjYXNoKG5ldHdvcmspKSB7XHJcbiAgICByZXR1cm4gemNhc2hBZGRyZXNzLnRvT3V0cHV0U2NyaXB0KGFkZHJlc3MsIG5ldHdvcmspO1xyXG4gIH1cclxuICBpZiAoaXNWYWxpZE5ldHdvcmsobmV0d29yaykgJiYgaXNHcm9lc3RsY29pbihuZXR3b3JrKSkge1xyXG4gICAgcmV0dXJuIGdyc0FkZHJlc3MudG9PdXRwdXRTY3JpcHQoYWRkcmVzcyk7XHJcbiAgfVxyXG4gIHJldHVybiBiaXRjb2luanMuYWRkcmVzcy50b091dHB1dFNjcmlwdChhZGRyZXNzLCBuZXR3b3JrIGFzIGJpdGNvaW5qcy5OZXR3b3JrKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHRvQmFzZTU4Q2hlY2soaGFzaDogQnVmZmVyLCB2ZXJzaW9uOiBudW1iZXIsIG5ldHdvcms6IE5ldHdvcmspOiBzdHJpbmcge1xyXG4gIGlmIChpc1ZhbGlkTmV0d29yayhuZXR3b3JrKSAmJiBpc1pjYXNoKG5ldHdvcmspKSB7XHJcbiAgICByZXR1cm4gemNhc2hBZGRyZXNzLnRvQmFzZTU4Q2hlY2soaGFzaCwgdmVyc2lvbik7XHJcbiAgfVxyXG4gIGlmIChpc1ZhbGlkTmV0d29yayhuZXR3b3JrKSAmJiBpc0dyb2VzdGxjb2luKG5ldHdvcmspKSB7XHJcbiAgICByZXR1cm4gZ3JzQWRkcmVzcy50b0Jhc2U1OEdyc0NoZWNrKGhhc2gsIHZlcnNpb24pO1xyXG4gIH1cclxuICByZXR1cm4gYml0Y29pbmpzLmFkZHJlc3MudG9CYXNlNThDaGVjayhoYXNoLCB2ZXJzaW9uKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGZyb21CYXNlNThDaGVjayhhZGRyZXNzOiBzdHJpbmcsIG5ldHdvcms6IE5ldHdvcmspOiBCYXNlNThDaGVja1Jlc3VsdCB7XHJcbiAgaWYgKGlzVmFsaWROZXR3b3JrKG5ldHdvcmspICYmIGlzWmNhc2gobmV0d29yaykpIHtcclxuICAgIHJldHVybiB6Y2FzaEFkZHJlc3MuZnJvbUJhc2U1OENoZWNrKGFkZHJlc3MpO1xyXG4gIH1cclxuICBpZiAoaXNWYWxpZE5ldHdvcmsobmV0d29yaykgJiYgaXNHcm9lc3RsY29pbihuZXR3b3JrKSkge1xyXG4gICAgcmV0dXJuIGdyc0FkZHJlc3MuZnJvbUJhc2U1OEdyc0NoZWNrKGFkZHJlc3MpO1xyXG4gIH1cclxuICByZXR1cm4gYml0Y29pbmpzLmFkZHJlc3MuZnJvbUJhc2U1OENoZWNrKGFkZHJlc3MpO1xyXG59XHJcblxyXG5leHBvcnQgY29uc3QgeyBmcm9tQmVjaDMyLCB0b0JlY2gzMiB9ID0gYml0Y29pbmpzLmFkZHJlc3M7XHJcblxyXG5leHBvcnQgeyBCYXNlNThDaGVja1Jlc3VsdCwgQmVjaDMyUmVzdWx0IH07XHJcbiJdfQ==