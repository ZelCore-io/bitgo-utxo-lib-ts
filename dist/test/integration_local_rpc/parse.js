"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const assert = require("assert");
const mocha_1 = require("mocha");
const src_1 = require("../../src");
const testutil_1 = require("../../src/testutil");
const bitgo_1 = require("../../src/bitgo");
const outputScripts_1 = require("../../src/bitgo/outputScripts");
const outputScripts_util_1 = require("./generate/outputScripts.util");
const fixtures_1 = require("./generate/fixtures");
const transaction_util_1 = require("../transaction_util");
const compare_1 = require("./compare");
const testutil_2 = require("../testutil");
const fixtureTxTypes = ['deposit', 'spend'];
function getScriptTypes() {
    // FIXME(BG-66941): p2trMusig2 signing does not work in this test suite yet
    //  because the test suite is written with TransactionBuilder
    return outputScripts_util_1.scriptTypes.filter((scriptType) => scriptType !== 'p2trMusig2');
}
function runTestParse(protocol, txType, scriptType, amountType) {
    if (txType === 'deposit' && !(0, outputScripts_util_1.isSupportedDepositType)(protocol.network, scriptType)) {
        return;
    }
    if (txType === 'spend' && !(0, outputScripts_util_1.isSupportedSpendType)(protocol.network, scriptType)) {
        return;
    }
    const fixtureName = `${txType}_${scriptType}.json`;
    (0, mocha_1.describe)(`${fixtureName} amountType=${amountType}`, function () {
        let fixture;
        let txBuffer;
        let parsedTx;
        before(async function () {
            var _a;
            fixture = await (0, fixtures_1.readFixture)({
                network: protocol.network,
                version: (_a = protocol.version) !== null && _a !== void 0 ? _a : (0, bitgo_1.getDefaultTransactionVersion)(protocol.network),
            }, fixtureName);
            txBuffer = Buffer.from(fixture.transaction.hex, 'hex');
            parsedTx = (0, bitgo_1.createTransactionFromBuffer)(txBuffer, protocol.network, {
                version: protocol.version,
                amountType,
            });
        });
        function getPrevOutput(input) {
            if (input.hash) {
                input = {
                    ...input,
                    ...(0, bitgo_1.getOutputIdForInput)(input),
                };
            }
            const inputTx = fixture.inputs.find((tx) => tx.txid === input.txid);
            if (!inputTx) {
                throw new Error(`could not find inputTx`);
            }
            const prevOutput = inputTx.vout[input.index];
            if (!prevOutput) {
                throw new Error(`could not prevOutput`);
            }
            return prevOutput;
        }
        function getPrevOutputValue(input) {
            return (0, testutil_2.decimalCoinsToSats)(getPrevOutput(input).value, amountType);
        }
        function getPrevOutputScript(input) {
            return Buffer.from(getPrevOutput(input).scriptPubKey.hex, 'hex');
        }
        function getPrevOutputs() {
            return parsedTx.ins.map((i) => ({
                ...(0, bitgo_1.getOutputIdForInput)(i),
                script: getPrevOutputScript(i),
                value: getPrevOutputValue(i),
                prevTx: txBuffer,
            }));
        }
        (0, mocha_1.it)(`round-trip`, function () {
            (0, transaction_util_1.parseTransactionRoundTrip)(Buffer.from(fixture.transaction.hex, 'hex'), protocol.network, {
                inputs: getPrevOutputs(),
                amountType,
                version: protocol.version,
                // FIXME: prevTx parsing for Zcash not working yet
                roundTripPsbt: txType === 'spend' && protocol.network !== src_1.networks.zcashTest,
            });
        });
        (0, mocha_1.it)(`round-trip (high-precision values)`, function () {
            if (amountType !== 'bigint') {
                return;
            }
            const tx = (0, bitgo_1.createTransactionFromBuffer)(Buffer.from(fixture.transaction.hex, 'hex'), protocol.network, {
                amountType,
            });
            tx.outs.forEach((o) => {
                o.value = (BigInt(1e16) + BigInt(1));
                assert.notStrictEqual(BigInt(Number(o.value)), o.value);
            });
            const txRoundTrip = (0, transaction_util_1.parseTransactionRoundTrip)(tx.toBuffer(), protocol.network, { amountType });
            assert.strictEqual(txRoundTrip.outs.length, tx.outs.length);
            txRoundTrip.outs.forEach((o, i) => {
                assert.deepStrictEqual(o, tx.outs[i]);
            });
        });
        (0, mocha_1.it)(`recreate from unsigned hex`, function () {
            if (txType === 'deposit') {
                return;
            }
            const txbUnsigned = (0, bitgo_1.createTransactionBuilderForNetwork)(protocol.network, { version: protocol.version });
            getPrevOutputs().forEach((o) => {
                txbUnsigned.addInput(o.txid, o.vout);
            });
            fixture.transaction.vout.forEach((o) => {
                txbUnsigned.addOutput(Buffer.from(o.scriptPubKey.hex, 'hex'), (0, testutil_2.decimalCoinsToSats)(o.value, amountType));
            });
            const tx = (0, bitgo_1.createTransactionFromBuffer)(txbUnsigned.buildIncomplete().toBuffer(), protocol.network, {
                version: protocol.version,
                amountType,
            });
            const txb = (0, bitgo_1.createTransactionBuilderFromTransaction)(tx, getPrevOutputs());
            const signKeys = [fixtures_1.fixtureKeys[0], fixtures_1.fixtureKeys[2]];
            const publicKeys = fixtures_1.fixtureKeys.map((k) => k.publicKey);
            getPrevOutputs().forEach(({ value }, vin) => {
                signKeys.forEach((key) => {
                    (0, bitgo_1.signInput2Of3)(txb, vin, scriptType, publicKeys, key, (0, testutil_1.getDefaultCosigner)(publicKeys, key.publicKey), value);
                });
            });
            assert.strictEqual(txb.build().version, tx.version);
            assert.strictEqual(txb.build().toBuffer().toString('hex'), fixture.transaction.hex);
        });
        (0, mocha_1.it)('compare against RPC data', function () {
            assert.deepStrictEqual((0, compare_1.normalizeRpcTransaction)(fixture.transaction, protocol.network), (0, compare_1.normalizeParsedTransaction)(parsedTx, protocol.network));
        });
        (0, mocha_1.it)(`parseSignatureScript`, function () {
            if (txType === 'deposit') {
                return;
            }
            parsedTx.ins.forEach((input, i) => {
                const result = (0, bitgo_1.parseSignatureScript)(input);
                assert.strict(result.publicKeys !== undefined);
                assert.strictEqual(result.publicKeys.length, scriptType === 'p2tr' ? 2 : 3);
            });
        });
        if (txType === 'deposit') {
            return;
        }
        (0, mocha_1.it)(`verifySignatures for original transaction`, function () {
            parsedTx.ins.forEach((input, i) => {
                const prevOutValue = getPrevOutputValue(input);
                const result = (0, bitgo_1.parseSignatureScript2Of3)(input);
                assert.ok(result.scriptType !== 'taprootKeyPathSpend');
                if (!result.publicKeys) {
                    throw new Error(`expected publicKeys`);
                }
                assert.strictEqual(result.publicKeys.length, scriptType === 'p2tr' ? 2 : 3);
                if (scriptType === 'p2tr') {
                    // TODO implement verifySignature for p2tr
                    this.skip();
                }
                result.publicKeys.forEach((publicKey, publicKeyIndex) => {
                    assert.strictEqual((0, bitgo_1.verifySignature)(parsedTx, i, prevOutValue, {
                        publicKey,
                    }), publicKeyIndex === 0 || publicKeyIndex === 2);
                });
                assert.strictEqual((0, bitgo_1.verifySignature)(parsedTx, i, prevOutValue), true);
            });
        });
        function getRebuiltTransaction(signKeys) {
            assert.strict(parsedTx.outs.length === 1);
            assert.strict((0, outputScripts_1.isScriptType2Of3)(scriptType));
            const recipientScript = parsedTx.outs[0].script;
            return (0, outputScripts_util_1.createSpendTransactionFromPrevOutputs)(fixtures_1.fixtureKeys, scriptType, getPrevOutputs(), recipientScript, protocol.network, { signKeys, version: protocol.version });
        }
        (0, mocha_1.it)(`verifySignatures with one or two signatures`, function () {
            fixtures_1.fixtureKeys.forEach((key1) => {
                const rebuiltTx = getRebuiltTransaction([key1]);
                const prevOutputs = rebuiltTx.ins.map((v) => ({
                    script: getPrevOutputScript(v),
                    value: getPrevOutputValue(v),
                }));
                rebuiltTx.ins.forEach((input, i) => {
                    assert.strict((0, bitgo_1.verifySignature)(rebuiltTx, i, getPrevOutputValue(input), {}, prevOutputs));
                });
                fixtures_1.fixtureKeys.forEach((key2) => {
                    if (key1 === key2) {
                        return;
                    }
                    if (scriptType === 'p2tr') {
                        const keypair = [fixtures_1.fixtureKeys[0], fixtures_1.fixtureKeys[2]];
                        if (!keypair.includes(key1) || !keypair.includes(key2)) {
                            return;
                        }
                    }
                    const rebuiltTx = getRebuiltTransaction([key1, key2]);
                    rebuiltTx.ins.forEach((input, i) => {
                        assert.strict((0, bitgo_1.verifySignature)(rebuiltTx, i, getPrevOutputValue(input), {}, prevOutputs));
                    });
                });
            });
        });
        (0, mocha_1.it)('createSpendTransaction match', function () {
            const rebuiltTx = getRebuiltTransaction();
            assert.strictEqual(rebuiltTx.toBuffer().toString('hex'), fixture.transaction.hex);
        });
    });
}
(0, mocha_1.describe)(`regtest fixtures`, function () {
    (0, src_1.getNetworkList)().forEach((network) => {
        if (!(0, src_1.isTestnet)(network)) {
            return;
        }
        const allVersions = (0, fixtures_1.getProtocolVersions)(network);
        (0, mocha_1.it)('tests default version', function () {
            assert.strictEqual(allVersions.filter((v) => v === (0, bitgo_1.getDefaultTransactionVersion)(network)).length, 1);
        });
        (0, fixtures_1.getProtocolVersions)(network).forEach((version) => {
            const isDefault = version === (0, bitgo_1.getDefaultTransactionVersion)(network);
            (0, mocha_1.describe)(`${(0, src_1.getNetworkName)(network)} fixtures (version=${version}, isDefault=${isDefault})`, function () {
                getScriptTypes().forEach((scriptType) => {
                    fixtureTxTypes.forEach((txType) => {
                        runTestParse({ network, version }, txType, scriptType, network === src_1.networks.dogecoinTest ? 'bigint' : 'number');
                    });
                });
            });
        });
    });
});
//# sourceMappingURL=data:application/json;base64,