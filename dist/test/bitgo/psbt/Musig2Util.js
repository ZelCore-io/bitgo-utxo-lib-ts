"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.validateParsedTaprootScriptPathTxInput = exports.validateParsedTaprootKeyPathTxInput = exports.validateParsedTaprootScriptPathPsbt = exports.validateParsedTaprootKeyPathPsbt = exports.validateFinalizedInput = exports.validateParticipantsKeyVals = exports.validatePartialSigKeyVals = exports.validateNoncesKeyVals = exports.validatePsbtP2trMusig2Output = exports.validatePsbtP2trMusig2Input = exports.getUnspents = exports.constructPsbt = exports.invalidPartialSig = exports.invalidParticipantPubKeys = exports.invalidTxHash = exports.invalidTapInputKey = exports.invalidTapOutputKey = exports.dummyPartialSig = exports.dummyPrivateKey = exports.dummyAggNonce = exports.dummyPubNonce = exports.dummyParticipantPubKeys = exports.dummyTapInternalKey = exports.dummyTapOutputKey = exports.rootWalletKeys = exports.network = void 0;
const assert = require("assert");
const bitgo_1 = require("../../../src/bitgo");
const outputScripts_1 = require("../../../src/bitgo/outputScripts");
const testutil_1 = require("../../../src/testutil");
const src_1 = require("../../../src");
const PsbtUtil_1 = require("../../../src/bitgo/PsbtUtil");
exports.network = src_1.networks.bitcoin;
const outputType = 'p2trMusig2';
const CHANGE_INDEX = 100;
const FEE = BigInt(100);
const keys = [1, 2, 3].map((v) => src_1.bip32.fromSeed(Buffer.alloc(16, `test/2/${v}`), exports.network));
exports.rootWalletKeys = new bitgo_1.RootWalletKeys([keys[0], keys[1], keys[2]]);
const dummyKey1 = exports.rootWalletKeys.deriveForChainAndIndex(50, 200);
const dummyKey2 = exports.rootWalletKeys.deriveForChainAndIndex(60, 201);
exports.dummyTapOutputKey = dummyKey1.user.publicKey.subarray(1, 33);
exports.dummyTapInternalKey = dummyKey1.bitgo.publicKey.subarray(1, 33);
exports.dummyParticipantPubKeys = [dummyKey1.user.publicKey, dummyKey1.backup.publicKey];
exports.dummyPubNonce = Buffer.concat([dummyKey2.user.publicKey, dummyKey2.bitgo.publicKey]);
exports.dummyAggNonce = Buffer.concat([dummyKey2.backup.publicKey, dummyKey2.bitgo.publicKey]);
exports.dummyPrivateKey = dummyKey2.user.privateKey;
exports.dummyPartialSig = dummyKey2.backup.privateKey;
exports.invalidTapOutputKey = Buffer.allocUnsafe(1);
exports.invalidTapInputKey = Buffer.allocUnsafe(1);
exports.invalidTxHash = Buffer.allocUnsafe(1);
exports.invalidParticipantPubKeys = [Buffer.allocUnsafe(1), Buffer.allocUnsafe(1)];
exports.invalidPartialSig = Buffer.allocUnsafe(1);
function constructPsbt(unspents, rootWalletKeys, signer, cosigner, outputs) {
    const psbt = (0, bitgo_1.createPsbtForNetwork)({ network: exports.network });
    if (Array.isArray(outputs)) {
        outputs.forEach((output) => (0, bitgo_1.addWalletOutputToPsbt)(psbt, rootWalletKeys, output.chain, output.index, output.value));
    }
    else {
        const total = BigInt((0, bitgo_1.unspentSum)(unspents, 'bigint'));
        (0, bitgo_1.addWalletOutputToPsbt)(psbt, rootWalletKeys, (0, bitgo_1.getInternalChainCode)(outputs), CHANGE_INDEX, total - FEE);
    }
    unspents.forEach((u) => {
        if ((0, bitgo_1.isWalletUnspent)(u)) {
            (0, bitgo_1.addWalletUnspentToPsbt)(psbt, u, rootWalletKeys, signer, cosigner);
        }
        else {
            const { redeemScript } = (0, outputScripts_1.createOutputScriptP2shP2pk)(testutil_1.replayProtectionKeyPair.publicKey);
            assert.ok(redeemScript);
            (0, bitgo_1.addReplayProtectionUnspentToPsbt)(psbt, u, redeemScript);
        }
    });
    return psbt;
}
exports.constructPsbt = constructPsbt;
function getUnspents(inputScriptTypes, rootWalletKeys) {
    return inputScriptTypes.map((t, i) => {
        if (!bitgo_1.outputScripts.isScriptType2Of3(t)) {
            throw new Error(`invalid input type ${t}`);
        }
        const unspent = (0, testutil_1.mockWalletUnspent)(exports.network, BigInt('10000000000000000'), {
            keys: rootWalletKeys,
            chain: (0, bitgo_1.getExternalChainCode)(t),
            vout: i,
        });
        if ((0, bitgo_1.isWalletUnspent)(unspent)) {
            return unspent;
        }
        throw new Error('Invalid unspent');
    });
}
exports.getUnspents = getUnspents;
function validatePsbtP2trMusig2Input(psbt, index, unspent, spendType) {
    var _a, _b;
    const input = psbt.data.inputs[index];
    assert.strictEqual((_a = input.tapBip32Derivation) === null || _a === void 0 ? void 0 : _a.length, 2);
    let leafHashesCount = 0;
    if (spendType === 'keyPath') {
        const inputWalletKeys = exports.rootWalletKeys.deriveForChainAndIndex(unspent.chain, unspent.index);
        const { internalPubkey, taptreeRoot } = (0, outputScripts_1.createKeyPathP2trMusig2)(inputWalletKeys.publicKeys);
        assert.ok(!input.tapLeafScript);
        assert.ok(input.tapInternalKey);
        assert.ok(input.tapMerkleRoot);
        assert.ok(input.tapInternalKey.equals(internalPubkey));
        assert.ok(input.tapMerkleRoot.equals(taptreeRoot));
    }
    else {
        assert.ok(input.tapLeafScript);
        assert.ok(!input.tapInternalKey);
        assert.ok(!input.tapMerkleRoot);
        leafHashesCount = 1;
    }
    (_b = input.tapBip32Derivation) === null || _b === void 0 ? void 0 : _b.forEach((bv) => {
        assert.strictEqual(bv.leafHashes.length, leafHashesCount);
    });
}
exports.validatePsbtP2trMusig2Input = validatePsbtP2trMusig2Input;
function validatePsbtP2trMusig2Output(psbt, index) {
    var _a, _b;
    const outputWalletKeys = exports.rootWalletKeys.deriveForChainAndIndex((0, bitgo_1.getInternalChainCode)(outputType), CHANGE_INDEX);
    const payment = (0, outputScripts_1.createPaymentP2trMusig2)(outputWalletKeys.publicKeys);
    const output = psbt.data.outputs[index];
    assert.ok(!!payment.internalPubkey);
    assert.ok(!!output.tapInternalKey);
    assert.ok(output.tapInternalKey.equals(payment.internalPubkey));
    assert.strictEqual((_a = output.tapBip32Derivation) === null || _a === void 0 ? void 0 : _a.length, 3);
    (_b = output.tapBip32Derivation) === null || _b === void 0 ? void 0 : _b.forEach((bv) => {
        const leafHashesCount = bv.pubkey.equals((0, outputScripts_1.toXOnlyPublicKey)(outputWalletKeys.backup.publicKey)) ? 2 : 1;
        assert.strictEqual(bv.leafHashes.length, leafHashesCount);
    });
}
exports.validatePsbtP2trMusig2Output = validatePsbtP2trMusig2Output;
function validateNoncesKeyVals(psbt, index, unspent) {
    const keyVals = psbt.getProprietaryKeyVals(index);
    const walletKeys = exports.rootWalletKeys.deriveForChainAndIndex(unspent.chain, unspent.index);
    const { outputPubkey } = (0, outputScripts_1.createKeyPathP2trMusig2)(walletKeys.publicKeys);
    const participantPubKeys = [walletKeys.user.publicKey, walletKeys.bitgo.publicKey];
    const nonces = keyVals.filter((kv) => kv.key.subtype === bitgo_1.ProprietaryKeySubtype.MUSIG2_PUB_NONCE);
    assert.strictEqual(nonces.length, 2);
    const nonceKeydata = participantPubKeys.map((p) => {
        const keydata = Buffer.alloc(65);
        p.copy(keydata);
        outputPubkey.copy(keydata, 33);
        return keydata;
    });
    nonces.forEach((kv) => {
        assert.strictEqual(kv.key.identifier, bitgo_1.PSBT_PROPRIETARY_IDENTIFIER);
        assert.strictEqual(kv.value.length, 66);
        assert.strictEqual(nonceKeydata.filter((kd) => kd.equals(kv.key.keydata)).length, 1);
    });
}
exports.validateNoncesKeyVals = validateNoncesKeyVals;
function validatePartialSigKeyVals(psbt, index, unspent) {
    const keyVals = psbt.getProprietaryKeyVals(index);
    const inputWalletKeys = exports.rootWalletKeys.deriveForChainAndIndex(unspent.chain, unspent.index);
    const { outputPubkey } = (0, outputScripts_1.createKeyPathP2trMusig2)(inputWalletKeys.publicKeys);
    const participantPubKeys = [inputWalletKeys.user.publicKey, inputWalletKeys.bitgo.publicKey];
    const partialSigs = keyVals.filter((kv) => kv.key.subtype === bitgo_1.ProprietaryKeySubtype.MUSIG2_PARTIAL_SIG);
    assert.strictEqual(partialSigs.length, 2);
    const partialSigKeydata = participantPubKeys.map((p) => {
        const keydata = Buffer.alloc(65);
        p.copy(keydata);
        outputPubkey.copy(keydata, 33);
        return keydata;
    });
    partialSigs.forEach((kv) => {
        assert.strictEqual(kv.key.identifier, bitgo_1.PSBT_PROPRIETARY_IDENTIFIER);
        assert.strictEqual(kv.value.length, 32);
        assert.strictEqual(partialSigKeydata.filter((kd) => kd.equals(kv.key.keydata)).length, 1);
    });
}
exports.validatePartialSigKeyVals = validatePartialSigKeyVals;
function validateParticipantsKeyVals(psbt, index, unspent) {
    const keyVals = psbt.getProprietaryKeyVals(index);
    const walletKeys = exports.rootWalletKeys.deriveForChainAndIndex(unspent.chain, unspent.index);
    const { internalPubkey, outputPubkey } = (0, outputScripts_1.createKeyPathP2trMusig2)(walletKeys.publicKeys);
    const participantPubKeys = [walletKeys.user.publicKey, walletKeys.bitgo.publicKey];
    const participantsKeyVals = keyVals.filter((kv) => kv.key.subtype === bitgo_1.ProprietaryKeySubtype.MUSIG2_PARTICIPANT_PUB_KEYS);
    assert.strictEqual(participantsKeyVals.length, 1);
    const kv = participantsKeyVals[0];
    assert.strictEqual(kv.key.identifier, bitgo_1.PSBT_PROPRIETARY_IDENTIFIER);
    assert.ok(Buffer.concat([outputPubkey, internalPubkey]).equals(kv.key.keydata));
    const valueMatch = [Buffer.concat(participantPubKeys), Buffer.concat(participantPubKeys.reverse())].some((pks) => {
        return pks.equals(kv.value);
    });
    assert.ok(valueMatch);
}
exports.validateParticipantsKeyVals = validateParticipantsKeyVals;
function validateFinalizedInput(psbt, index, unspent, spendType) {
    var _a, _b;
    const input = psbt.data.inputs[index];
    assert.ok((0, PsbtUtil_1.isPsbtInputFinalized)(input));
    if ((0, bitgo_1.scriptTypeForChain)(unspent.chain) === 'p2trMusig2' && spendType === 'keyPath') {
        assert.strictEqual((_a = input.finalScriptWitness) === null || _a === void 0 ? void 0 : _a.length, 66);
    }
    assert.ok(!((_b = input.unknownKeyVals) === null || _b === void 0 ? void 0 : _b.length));
}
exports.validateFinalizedInput = validateFinalizedInput;
function validateParsedTaprootKeyPathPsbt(psbt, index, signature) {
    var _a, _b;
    const parsed = (0, bitgo_1.parsePsbtInput)(psbt.data.inputs[0]);
    assert.ok(parsed.scriptType === 'taprootKeyPathSpend');
    assert.strictEqual(parsed.pubScript.length, 34);
    assert.strictEqual(parsed.publicKeys.length, 1);
    assert.strictEqual(parsed.publicKeys[0].length, 32);
    if (signature === 'unsigned') {
        assert.strictEqual(parsed.signatures, undefined);
        assert.strictEqual(parsed.participantPublicKeys, undefined);
    }
    else {
        const expected = signature === 'halfsigned' ? 1 : 2;
        assert.strictEqual((_a = parsed.signatures) === null || _a === void 0 ? void 0 : _a.length, expected);
        parsed.signatures.forEach((sig) => {
            assert.strictEqual(sig.length, 32);
        });
        assert.strictEqual((_b = parsed.participantPublicKeys) === null || _b === void 0 ? void 0 : _b.length, expected);
        parsed.participantPublicKeys.forEach((pk) => {
            assert.strictEqual(pk.length, 33);
        });
    }
}
exports.validateParsedTaprootKeyPathPsbt = validateParsedTaprootKeyPathPsbt;
function validateParsedTaprootScriptPathPsbt(psbt, index, signature) {
    var _a;
    const input = psbt.data.inputs[index];
    const parsed = (0, bitgo_1.parsePsbtInput)(psbt.data.inputs[0]);
    assert.ok(parsed.scriptType === 'taprootScriptPathSpend');
    assert.ok(input.tapLeafScript);
    assert.ok(parsed.pubScript.equals(input.tapLeafScript[0].script));
    assert.ok(parsed.controlBlock.equals(input.tapLeafScript[0].controlBlock));
    assert.strictEqual(parsed.scriptPathLevel, 1);
    assert.strictEqual(parsed.leafVersion, input.tapLeafScript[0].leafVersion);
    parsed.publicKeys.forEach((pk) => {
        assert.strictEqual(pk.length, 32);
    });
    if (signature === 'unsigned') {
        assert.strictEqual(parsed.signatures, undefined);
    }
    else {
        const expected = signature === 'halfsigned' ? 1 : 2;
        assert.strictEqual((_a = parsed.signatures) === null || _a === void 0 ? void 0 : _a.length, expected);
        parsed.signatures.forEach((sig) => {
            assert.strictEqual(sig.length, 64);
        });
    }
}
exports.validateParsedTaprootScriptPathPsbt = validateParsedTaprootScriptPathPsbt;
function validateParsedTaprootKeyPathTxInput(psbt, tx) {
    const parsedTxInput = (0, bitgo_1.parseSignatureScript2Of3)(tx.ins[0]);
    assert.ok(parsedTxInput.scriptType === 'taprootKeyPathSpend');
    assert.strictEqual(parsedTxInput.signatures.length, 1);
    assert.strictEqual(parsedTxInput.signatures[0].length, 64);
}
exports.validateParsedTaprootKeyPathTxInput = validateParsedTaprootKeyPathTxInput;
function validateParsedTaprootScriptPathTxInput(psbt, tx, index) {
    var _a;
    const input = psbt.data.inputs[index];
    const parsedTxInput = (0, bitgo_1.parseSignatureScript2Of3)(tx.ins[0]);
    assert.ok(parsedTxInput);
    assert.ok(parsedTxInput.scriptType === 'taprootScriptPathSpend');
    assert.ok(input.tapLeafScript);
    assert.ok(parsedTxInput.pubScript.equals(input.tapLeafScript[0].script));
    assert.ok(parsedTxInput.controlBlock.equals(input.tapLeafScript[0].controlBlock));
    assert.strictEqual(parsedTxInput.scriptPathLevel, 1);
    assert.strictEqual(parsedTxInput.leafVersion, input.tapLeafScript[0].leafVersion);
    parsedTxInput.publicKeys.forEach((pk) => {
        assert.strictEqual(pk.length, 32);
    });
    assert.strictEqual((_a = parsedTxInput.signatures) === null || _a === void 0 ? void 0 : _a.length, 2);
    parsedTxInput.signatures.forEach((sig) => {
        assert.strictEqual(sig.length, 64);
    });
}
exports.validateParsedTaprootScriptPathTxInput = validateParsedTaprootScriptPathTxInput;
//# sourceMappingURL=data:application/json;base64,