"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const assert = require("assert");
const src_1 = require("../../src");
const testutil_1 = require("../../src/testutil");
const networks_1 = require("../../src/networks");
const outputScripts_1 = require("../../src/bitgo/outputScripts");
const bitgo_1 = require("../../src/bitgo");
const fixtureUtil = require("../fixture.util");
const fixtures_1 = require("../integration_local_rpc/generate/fixtures");
const transaction_util_1 = require("../transaction_util");
const signatureModify_1 = require("./signatureModify");
const normalize_1 = require("../testutil/normalize");
function getScriptTypes2Of3() {
    // FIXME(BG-66941): p2trMusig2 signing does not work in this test suite yet
    //  because the test suite is written with TransactionBuilder
    return outputScripts_1.scriptTypes2Of3.filter((scriptType) => scriptType !== 'p2trMusig2');
}
function keyName(k) {
    return (0, testutil_1.getKeyName)(fixtures_1.fixtureKeys, k);
}
async function readFixture(network, scriptType, name, defaultValue) {
    return await fixtureUtil.readFixture(`${__dirname}/fixtures/signature/${(0, networks_1.getNetworkName)(network)}/${scriptType}/${name}.json`, defaultValue);
}
function runTestCheckScriptStructure(network, scriptType, signer1, signer2, amountType = 'number') {
    it(`has expected script structure [${(0, networks_1.getNetworkName)(network)} ${scriptType} ` +
        `${keyName(signer1)} ${signer2 ? keyName(signer2) : ''} ${amountType}]`, async function () {
        let tx;
        if (scriptType === 'p2shP2pk') {
            tx = (0, transaction_util_1.getFullSignedTransactionP2shP2pk)(fixtures_1.fixtureKeys, signer1, network, { amountType });
        }
        else {
            if (!signer2) {
                throw new Error(`must set cosigner`);
            }
            tx = (0, transaction_util_1.getFullSignedTransaction2Of3)(fixtures_1.fixtureKeys, signer1, signer2, scriptType, network, { amountType });
        }
        const { script, witness } = tx.ins[0];
        const scriptDecompiled = src_1.script.decompile(script);
        if (!scriptDecompiled) {
            throw new Error();
        }
        const scriptASM = src_1.script.toASM(script).split(' ');
        const classifyInput = src_1.classify.input(script);
        const classifyWitness = src_1.classify.witness(witness);
        let pubScript;
        let classifyPubScript;
        let pubScriptASM;
        let tapscript;
        let tapscriptASM;
        let classifyTapscript;
        if (classifyInput === 'scripthash' || classifyWitness === 'witnessscripthash') {
            if (witness.length) {
                pubScript = witness[witness.length - 1];
            }
            else {
                pubScript = scriptDecompiled[scriptDecompiled.length - 1];
            }
            classifyPubScript = src_1.classify.output(pubScript);
            pubScriptASM = src_1.script.toASM(pubScript).split(' ');
        }
        else if (classifyWitness === 'taproot') {
            tapscript = witness[witness.length - 2];
            classifyTapscript = src_1.classify.output(tapscript);
            tapscriptASM = src_1.script.toASM(tapscript).split(' ');
        }
        const structure = {
            publicKeys: fixtures_1.fixtureKeys.map((k) => k.publicKey.toString('hex')),
            script: script === null || script === void 0 ? void 0 : script.toString('hex'),
            witness: witness === null || witness === void 0 ? void 0 : witness.map((w) => w.toString('hex')),
            scriptASM,
            pubScriptASM,
            tapscriptASM,
            classifyInput,
            classifyWitness,
            classifyPubScript,
            classifyTapscript,
        };
        const fixtureName = ['structure', keyName(signer1), signer2 ? keyName(signer2) : 'none'].join('-');
        fixtureUtil.assertEqualJSON(structure, await readFixture(network, scriptType, fixtureName, structure));
    });
}
function runTestParseScript(network, scriptType, k1, k2, amountType = 'number') {
    async function testParseSignedInputs(tx, name, expectedScriptType, { expectedPlaceholderSignatures }) {
        const parsed = (0, bitgo_1.parseSignatureScript)(tx.ins[0]);
        assert.strictEqual(parsed.scriptType, expectedScriptType === 'p2tr' ? 'taprootScriptPathSpend' : expectedScriptType);
        const parsed2Of3 = { ...parsed, scriptType: expectedScriptType };
        fixtureUtil.assertEqualJSON(parsed2Of3, await readFixture(network, scriptType, ['parsed', keyName(k1), keyName(k2), name].join('-'), parsed2Of3));
        if (!parsed.scriptType) {
            return;
        }
        switch (parsed.scriptType) {
            case 'p2shP2pk':
                // we don't parse the signature for this script type
                break;
            case 'p2sh':
            case 'p2shP2wsh':
            case 'p2wsh':
            case 'taprootScriptPathSpend':
                assert.strictEqual(parsed.signatures.filter((s) => (0, bitgo_1.isPlaceholderSignature)(s)).length, expectedPlaceholderSignatures);
                break;
            default:
                throw new Error(`unexpected scriptType ${parsed.scriptType}`);
        }
    }
    if (scriptType !== 'p2shP2pk') {
        it(`parses half-signed inputs [${(0, networks_1.getNetworkName)(network)} ${scriptType} ${amountType}]`, async function () {
            await testParseSignedInputs((0, transaction_util_1.getHalfSignedTransaction2Of3)(fixtures_1.fixtureKeys, k1, k2, scriptType, network, { amountType }), 'halfSigned', scriptType, { expectedPlaceholderSignatures: scriptType === 'p2tr' ? 1 : 2 });
        });
    }
    it(`parses full-signed inputs [${(0, networks_1.getNetworkName)(network)} ${scriptType} ${amountType}]`, async function () {
        if (scriptType === 'p2shP2pk') {
            await testParseSignedInputs((0, transaction_util_1.getFullSignedTransactionP2shP2pk)(fixtures_1.fixtureKeys, k1, network, { amountType }), 'fullSigned', scriptType, { expectedPlaceholderSignatures: 0 });
        }
        else {
            await testParseSignedInputs((0, transaction_util_1.getFullSignedTransaction2Of3)(fixtures_1.fixtureKeys, k1, k2, scriptType, network, { amountType }), 'fullSigned', scriptType, { expectedPlaceholderSignatures: 0 });
        }
    });
}
function assertVerifySignatureEquals(tx, prevOutputs, value, testOutputAmount, verificationSettings) {
    tx.ins.forEach((input, i) => {
        assert.doesNotThrow(() => {
            (0, bitgo_1.getSignatureVerifications)(tx, i, testOutputAmount, verificationSettings, prevOutputs);
        });
        assert.strictEqual((0, bitgo_1.verifySignature)(tx, i, testOutputAmount, verificationSettings, prevOutputs), value, JSON.stringify(verificationSettings));
        if ((verificationSettings === null || verificationSettings === void 0 ? void 0 : verificationSettings.signatureIndex) === undefined && (verificationSettings === null || verificationSettings === void 0 ? void 0 : verificationSettings.publicKey)) {
            assert.strictEqual((0, bitgo_1.verifySignatureWithPublicKey)(tx, i, prevOutputs, verificationSettings.publicKey), value);
        }
    });
}
function checkSignTransaction(tx, scriptType, signKeys, testOutputAmount) {
    const prevOutputs = (0, transaction_util_1.getPrevOutputs)(scriptType, testOutputAmount, tx.network);
    // return true iff there are any valid signatures at all
    assertVerifySignatureEquals(tx, prevOutputs, signKeys.length > 0, testOutputAmount);
    fixtures_1.fixtureKeys.forEach((k) => {
        // if publicKey is given, return true iff it is included in signKeys
        assertVerifySignatureEquals(tx, prevOutputs, signKeys.includes(k), testOutputAmount, {
            publicKey: k.publicKey,
        });
    });
    // When transactions are signed, the signatures have the same order as the public keys in the outputScript.
    const orderedSigningKeys = fixtures_1.fixtureKeys.filter((fixtureKey) => signKeys.includes(fixtureKey));
    [0, 1, 2].forEach((signatureIndex) => {
        if (scriptType === 'p2tr') {
            // signatureIndex parameter not support for p2tr verification
            return;
        }
        fixtures_1.fixtureKeys.forEach((k) => {
            // If no public key is given, return true iff any valid signature with given index exists.
            assertVerifySignatureEquals(tx, prevOutputs, signatureIndex < signKeys.length, testOutputAmount, {
                signatureIndex,
            });
            // If publicKey and signatureIndex are provided only return if both match.
            assertVerifySignatureEquals(tx, prevOutputs, signatureIndex === orderedSigningKeys.indexOf(k), testOutputAmount, {
                publicKey: k.publicKey,
                signatureIndex,
            });
        });
    });
    tx.ins.forEach((input, i) => {
        const signatureCount = (res) => res.reduce((sum, b) => sum + (b ? 1 : 0), 0);
        const pubkeys = fixtures_1.fixtureKeys.map((k) => k.publicKey);
        const verifyResult = (0, bitgo_1.verifySignatureWithPublicKeys)(tx, i, prevOutputs, pubkeys);
        assert.deepStrictEqual(verifyResult, fixtures_1.fixtureKeys.map((k) => signKeys.includes(k)));
        assert.strictEqual(signatureCount(verifyResult), signKeys.length);
        if (signKeys.length > 0) {
            (0, signatureModify_1.getTransactionWithHighS)(tx, i).forEach((txWithHighS) => {
                assert.strictEqual(signatureCount((0, bitgo_1.verifySignatureWithPublicKeys)(txWithHighS, i, prevOutputs, pubkeys)), signKeys.length - 1);
            });
            if (scriptType !== 'p2tr' && scriptType !== 'p2trMusig2') {
                assert.throws(() => signatureCount((0, bitgo_1.verifySignatureWithPublicKeys)(tx, i, (0, signatureModify_1.getPrevOutsWithInvalidOutputScript)(prevOutputs, i), pubkeys)), /prevout script .* does not match computed script .*/);
            }
        }
    });
}
function runTestCheckSignatureVerify(network, scriptType, k1, k2, amountType = 'number') {
    if (k1 && k2) {
        describe(`verifySignature ${(0, networks_1.getNetworkName)(network)} ${scriptType} ${keyName(k1)} ${keyName(k2)} ${amountType}`, function () {
            it(`verifies half-signed`, function () {
                checkSignTransaction((0, transaction_util_1.getHalfSignedTransaction2Of3)(fixtures_1.fixtureKeys, k1, k2, scriptType, network, { amountType }), scriptType, [k1], (0, bitgo_1.toTNumber)(transaction_util_1.defaultTestOutputAmount, amountType));
            });
            it(`verifies full-signed`, function () {
                checkSignTransaction((0, transaction_util_1.getFullSignedTransaction2Of3)(fixtures_1.fixtureKeys, k1, k2, scriptType, network, { amountType }), scriptType, [k1, k2], (0, bitgo_1.toTNumber)(transaction_util_1.defaultTestOutputAmount, amountType));
            });
        });
    }
    else {
        describe(`verifySignature ${(0, networks_1.getNetworkName)(network)} ${scriptType} ${amountType} unsigned`, function () {
            it(`verifies unsigned`, function () {
                checkSignTransaction((0, transaction_util_1.getUnsignedTransaction2Of3)(fixtures_1.fixtureKeys, scriptType, network, { amountType }), scriptType, [], (0, bitgo_1.toTNumber)(transaction_util_1.defaultTestOutputAmount, amountType));
            });
        });
    }
}
describe('Signature (scriptTypes2Of3)', function () {
    (0, networks_1.getNetworkList)()
        .filter(networks_1.isMainnet)
        // The signing and verification methods are largely network-independent so let's focus on a
        // single network to reduce test time.
        // During development it might make sense to test all networks.
        .filter(networks_1.isBitcoin)
        .forEach((network) => {
        getScriptTypes2Of3().forEach((scriptType) => {
            runTestCheckSignatureVerify(network, scriptType);
            (0, transaction_util_1.getSignKeyCombinations)(2).map(([k1, k2]) => {
                runTestCheckSignatureVerify(network, scriptType, k1, k2);
                runTestCheckScriptStructure(network, scriptType, k1, k2);
                runTestParseScript(network, scriptType, k1, k2);
            });
        });
        getScriptTypes2Of3().forEach((scriptType) => {
            runTestCheckSignatureVerify(network, scriptType, undefined, undefined, 'bigint');
            (0, transaction_util_1.getSignKeyCombinations)(2).map(([k1, k2]) => {
                runTestCheckSignatureVerify(network, scriptType, k1, k2, 'bigint');
                runTestCheckScriptStructure(network, scriptType, k1, k2, 'bigint');
                runTestParseScript(network, scriptType, k1, k2, 'bigint');
            });
        });
    });
});
describe('Signature (p2shP2pk)', function () {
    it('sign and parse', function () {
        const signedTransaction = (0, transaction_util_1.getFullSignedTransactionP2shP2pk)(fixtures_1.fixtureKeys, fixtures_1.fixtureKeys[0], networks_1.networks.bitcoin);
        signedTransaction.ins.forEach((input) => {
            assert.deepStrictEqual((0, normalize_1.normDefault)((0, bitgo_1.parseSignatureScript)(input)), (0, normalize_1.normDefault)({
                scriptType: 'p2shP2pk',
                publicKeys: [fixtures_1.fixtureKeys[0].publicKey],
                signatures: [
                    '3045022100e637466be405032a633dcef0bd161305fe93d34ffe2aabc4af434d6f265912210220113d7085b1e00435a2583af82b8a4df3fb009a8d279d231351e42f31d6bac74401',
                ],
            }));
        });
    });
    runTestCheckScriptStructure(networks_1.networks.bitcoin, 'p2shP2pk', fixtures_1.fixtureKeys[0]);
    runTestCheckScriptStructure(networks_1.networks.bitcoin, 'p2shP2pk', fixtures_1.fixtureKeys[0], undefined, 'bigint');
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2lnbmF0dXJlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vdGVzdC9iaXRnby9zaWduYXR1cmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxpQ0FBaUM7QUFHakMsbUNBQWtFO0FBQ2xFLGlEQUFnRDtBQUNoRCxpREFBNkc7QUFFN0csaUVBQTRGO0FBQzVGLDJDQVN5QjtBQUV6QiwrQ0FBK0M7QUFFL0MseUVBQXlFO0FBQ3pFLDBEQVE2QjtBQUM3Qix1REFBZ0c7QUFDaEcscURBQW9EO0FBRXBELFNBQVMsa0JBQWtCO0lBQ3pCLDJFQUEyRTtJQUMzRSw2REFBNkQ7SUFDN0QsT0FBTywrQkFBZSxDQUFDLE1BQU0sQ0FBQyxDQUFDLFVBQVUsRUFBRSxFQUFFLENBQUMsVUFBVSxLQUFLLFlBQVksQ0FBQyxDQUFDO0FBQzdFLENBQUM7QUFFRCxTQUFTLE9BQU8sQ0FBQyxDQUFpQjtJQUNoQyxPQUFPLElBQUEscUJBQVUsRUFBQyxzQkFBVyxFQUFFLENBQUMsQ0FBQyxDQUFDO0FBQ3BDLENBQUM7QUFFRCxLQUFLLFVBQVUsV0FBVyxDQUN4QixPQUFnQixFQUNoQixVQUF1QyxFQUN2QyxJQUFZLEVBQ1osWUFBZTtJQUVmLE9BQU8sTUFBTSxXQUFXLENBQUMsV0FBVyxDQUNsQyxHQUFHLFNBQVMsdUJBQXVCLElBQUEseUJBQWMsRUFBQyxPQUFPLENBQUMsSUFBSSxVQUFVLElBQUksSUFBSSxPQUFPLEVBQ3ZGLFlBQVksQ0FDYixDQUFDO0FBQ0osQ0FBQztBQUVELFNBQVMsMkJBQTJCLENBQ2xDLE9BQWdCLEVBQ2hCLFVBQXVDLEVBQ3ZDLE9BQXVCLEVBQ3ZCLE9BQXdCLEVBQ3hCLGFBQWtDLFFBQVE7SUFFMUMsRUFBRSxDQUNBLGtDQUFrQyxJQUFBLHlCQUFjLEVBQUMsT0FBTyxDQUFDLElBQUksVUFBVSxHQUFHO1FBQ3hFLEdBQUcsT0FBTyxDQUFDLE9BQU8sQ0FBQyxJQUFJLE9BQU8sQ0FBQyxDQUFDLENBQUMsT0FBTyxD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QUFVLEVBQUUsc0JBQVcsQ0FBQyxDQUFDLENBQUMsRUFBRSxTQUFTLEVBQUUsUUFBUSxDQUFDLENBQUM7QUFDekcsQ0FBQyxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBhc3NlcnQgZnJvbSAnYXNzZXJ0JztcclxuaW1wb3J0IHsgQklQMzJJbnRlcmZhY2UgfSBmcm9tICdiaXAzMic7XHJcblxyXG5pbXBvcnQgeyBzY3JpcHQgYXMgYnNjcmlwdCwgY2xhc3NpZnksIFR4T3V0cHV0IH0gZnJvbSAnLi4vLi4vc3JjJztcclxuaW1wb3J0IHsgZ2V0S2V5TmFtZSB9IGZyb20gJy4uLy4uL3NyYy90ZXN0dXRpbCc7XHJcbmltcG9ydCB7IGdldE5ldHdvcmtMaXN0LCBnZXROZXR3b3JrTmFtZSwgaXNCaXRjb2luLCBpc01haW5uZXQsIE5ldHdvcmssIG5ldHdvcmtzIH0gZnJvbSAnLi4vLi4vc3JjL25ldHdvcmtzJztcclxuXHJcbmltcG9ydCB7IFNjcmlwdFR5cGUsIFNjcmlwdFR5cGUyT2YzLCBzY3JpcHRUeXBlczJPZjMgfSBmcm9tICcuLi8uLi9zcmMvYml0Z28vb3V0cHV0U2NyaXB0cyc7XHJcbmltcG9ydCB7XHJcbiAgdmVyaWZ5U2lnbmF0dXJlLFxyXG4gIFV0eG9UcmFuc2FjdGlvbixcclxuICBwYXJzZVNpZ25hdHVyZVNjcmlwdCxcclxuICBnZXRTaWduYXR1cmVWZXJpZmljYXRpb25zLFxyXG4gIHZlcmlmeVNpZ25hdHVyZVdpdGhQdWJsaWNLZXlzLFxyXG4gIHZlcmlmeVNpZ25hdHVyZVdpdGhQdWJsaWNLZXksXHJcbiAgaXNQbGFjZWhvbGRlclNpZ25hdHVyZSxcclxuICB0b1ROdW1iZXIsXHJcbn0gZnJvbSAnLi4vLi4vc3JjL2JpdGdvJztcclxuXHJcbmltcG9ydCAqIGFzIGZpeHR1cmVVdGlsIGZyb20gJy4uL2ZpeHR1cmUudXRpbCc7XHJcblxyXG5pbXBvcnQgeyBmaXh0dXJlS2V5cyB9IGZyb20gJy4uL2ludGVncmF0aW9uX2xvY2FsX3JwYy9nZW5lcmF0ZS9maXh0dXJlcyc7XHJcbmltcG9ydCB7XHJcbiAgZGVmYXVsdFRlc3RPdXRwdXRBbW91bnQsXHJcbiAgZ2V0RnVsbFNpZ25lZFRyYW5zYWN0aW9uMk9mMyxcclxuICBnZXRGdWxsU2lnbmVkVHJhbnNhY3Rpb25QMnNoUDJwayxcclxuICBnZXRIYWxmU2lnbmVkVHJhbnNhY3Rpb24yT2YzLFxyXG4gIGdldFByZXZPdXRwdXRzLFxyXG4gIGdldFNpZ25LZXlDb21iaW5hdGlvbnMsXHJcbiAgZ2V0VW5zaWduZWRUcmFuc2FjdGlvbjJPZjMsXHJcbn0gZnJvbSAnLi4vdHJhbnNhY3Rpb25fdXRpbCc7XHJcbmltcG9ydCB7IGdldFByZXZPdXRzV2l0aEludmFsaWRPdXRwdXRTY3JpcHQsIGdldFRyYW5zYWN0aW9uV2l0aEhpZ2hTIH0gZnJvbSAnLi9zaWduYXR1cmVNb2RpZnknO1xyXG5pbXBvcnQgeyBub3JtRGVmYXVsdCB9IGZyb20gJy4uL3Rlc3R1dGlsL25vcm1hbGl6ZSc7XHJcblxyXG5mdW5jdGlvbiBnZXRTY3JpcHRUeXBlczJPZjMoKSB7XHJcbiAgLy8gRklYTUUoQkctNjY5NDEpOiBwMnRyTXVzaWcyIHNpZ25pbmcgZG9lcyBub3Qgd29yayBpbiB0aGlzIHRlc3Qgc3VpdGUgeWV0XHJcbiAgLy8gIGJlY2F1c2UgdGhlIHRlc3Qgc3VpdGUgaXMgd3JpdHRlbiB3aXRoIFRyYW5zYWN0aW9uQnVpbGRlclxyXG4gIHJldHVybiBzY3JpcHRUeXBlczJPZjMuZmlsdGVyKChzY3JpcHRUeXBlKSA9PiBzY3JpcHRUeXBlICE9PSAncDJ0ck11c2lnMicpO1xyXG59XHJcblxyXG5mdW5jdGlvbiBrZXlOYW1lKGs6IEJJUDMySW50ZXJmYWNlKTogc3RyaW5nIHwgdW5kZWZpbmVkIHtcclxuICByZXR1cm4gZ2V0S2V5TmFtZShmaXh0dXJlS2V5cywgayk7XHJcbn1cclxuXHJcbmFzeW5jIGZ1bmN0aW9uIHJlYWRGaXh0dXJlPFQ+KFxyXG4gIG5ldHdvcms6IE5ldHdvcmssXHJcbiAgc2NyaXB0VHlwZTogU2NyaXB0VHlwZTJPZjMgfCAncDJzaFAycGsnLFxyXG4gIG5hbWU6IHN0cmluZyxcclxuICBkZWZhdWx0VmFsdWU6IFRcclxuKTogUHJvbWlzZTxUPiB7XHJcbiAgcmV0dXJuIGF3YWl0IGZpeHR1cmVVdGlsLnJlYWRGaXh0dXJlKFxyXG4gICAgYCR7X19kaXJuYW1lfS9maXh0dXJlcy9zaWduYXR1cmUvJHtnZXROZXR3b3JrTmFtZShuZXR3b3JrKX0vJHtzY3JpcHRUeXBlfS8ke25hbWV9Lmpzb25gLFxyXG4gICAgZGVmYXVsdFZhbHVlXHJcbiAgKTtcclxufVxyXG5cclxuZnVuY3Rpb24gcnVuVGVzdENoZWNrU2NyaXB0U3RydWN0dXJlPFROdW1iZXIgZXh0ZW5kcyBudW1iZXIgfCBiaWdpbnQgPSBudW1iZXI+KFxyXG4gIG5ldHdvcms6IE5ldHdvcmssXHJcbiAgc2NyaXB0VHlwZTogU2NyaXB0VHlwZTJPZjMgfCAncDJzaFAycGsnLFxyXG4gIHNpZ25lcjE6IEJJUDMySW50ZXJmYWNlLFxyXG4gIHNpZ25lcjI/OiBCSVAzMkludGVyZmFjZSxcclxuICBhbW91bnRUeXBlOiAnbnVtYmVyJyB8ICdiaWdpbnQnID0gJ251bWJlcidcclxuKSB7XHJcbiAgaXQoXHJcbiAgICBgaGFzIGV4cGVjdGVkIHNjcmlwdCBzdHJ1Y3R1cmUgWyR7Z2V0TmV0d29ya05hbWUobmV0d29yayl9ICR7c2NyaXB0VHlwZX0gYCArXHJcbiAgICAgIGAke2tleU5hbWUoc2lnbmVyMSl9ICR7c2lnbmVyMiA/IGtleU5hbWUoc2lnbmVyMikgOiAnJ30gJHthbW91bnRUeXBlfV1gLFxyXG4gICAgYXN5bmMgZnVuY3Rpb24gKCkge1xyXG4gICAgICBsZXQgdHg7XHJcblxyXG4gICAgICBpZiAoc2NyaXB0VHlwZSA9PT0gJ3Ayc2hQMnBrJykge1xyXG4gICAgICAgIHR4ID0gZ2V0RnVsbFNpZ25lZFRyYW5zYWN0aW9uUDJzaFAycGs8VE51bWJlcj4oZml4dHVyZUtleXMsIHNpZ25lcjEsIG5ldHdvcmssIHsgYW1vdW50VHlwZSB9KTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBpZiAoIXNpZ25lcjIpIHtcclxuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgbXVzdCBzZXQgY29zaWduZXJgKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdHggPSBnZXRGdWxsU2lnbmVkVHJhbnNhY3Rpb24yT2YzPFROdW1iZXI+KGZpeHR1cmVLZXlzLCBzaWduZXIxLCBzaWduZXIyLCBzY3JpcHRUeXBlLCBuZXR3b3JrLCB7IGFtb3VudFR5cGUgfSk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGNvbnN0IHsgc2NyaXB0LCB3aXRuZXNzIH0gPSB0eC5pbnNbMF07XHJcbiAgICAgIGNvbnN0IHNjcmlwdERlY29tcGlsZWQgPSBic2NyaXB0LmRlY29tcGlsZShzY3JpcHQpO1xyXG4gICAgICBpZiAoIXNjcmlwdERlY29tcGlsZWQpIHtcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoKTtcclxuICAgICAgfVxyXG4gICAgICBjb25zdCBzY3JpcHRBU00gPSBic2NyaXB0LnRvQVNNKHNjcmlwdCkuc3BsaXQoJyAnKTtcclxuICAgICAgY29uc3QgY2xhc3NpZnlJbnB1dCA9IGNsYXNzaWZ5LmlucHV0KHNjcmlwdCk7XHJcbiAgICAgIGNvbnN0IGNsYXNzaWZ5V2l0bmVzcyA9IGNsYXNzaWZ5LndpdG5lc3Mod2l0bmVzcyk7XHJcblxyXG4gICAgICBsZXQgcHViU2NyaXB0O1xyXG4gICAgICBsZXQgY2xhc3NpZnlQdWJTY3JpcHQ7XHJcbiAgICAgIGxldCBwdWJTY3JpcHRBU007XHJcblxyXG4gICAgICBsZXQgdGFwc2NyaXB0O1xyXG4gICAgICBsZXQgdGFwc2NyaXB0QVNNO1xyXG4gICAgICBsZXQgY2xhc3NpZnlUYXBzY3JpcHQ7XHJcblxyXG4gICAgICBpZiAoY2xhc3NpZnlJbnB1dCA9PT0gJ3NjcmlwdGhhc2gnIHx8IGNsYXNzaWZ5V2l0bmVzcyA9PT0gJ3dpdG5lc3NzY3JpcHRoYXNoJykge1xyXG4gICAgICAgIGlmICh3aXRuZXNzLmxlbmd0aCkge1xyXG4gICAgICAgICAgcHViU2NyaXB0ID0gd2l0bmVzc1t3aXRuZXNzLmxlbmd0aCAtIDFdO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICBwdWJTY3JpcHQgPSBzY3JpcHREZWNvbXBpbGVkW3NjcmlwdERlY29tcGlsZWQubGVuZ3RoIC0gMV0gYXMgQnVmZmVyO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY2xhc3NpZnlQdWJTY3JpcHQgPSBjbGFzc2lmeS5vdXRwdXQocHViU2NyaXB0KTtcclxuICAgICAgICBwdWJTY3JpcHRBU00gPSBic2NyaXB0LnRvQVNNKHB1YlNjcmlwdCkuc3BsaXQoJyAnKTtcclxuICAgICAgfSBlbHNlIGlmIChjbGFzc2lmeVdpdG5lc3MgPT09ICd0YXByb290Jykge1xyXG4gICAgICAgIHRhcHNjcmlwdCA9IHdpdG5lc3Nbd2l0bmVzcy5sZW5ndGggLSAyXTtcclxuICAgICAgICBjbGFzc2lmeVRhcHNjcmlwdCA9IGNsYXNzaWZ5Lm91dHB1dCh0YXBzY3JpcHQpO1xyXG4gICAgICAgIHRhcHNjcmlwdEFTTSA9IGJzY3JpcHQudG9BU00odGFwc2NyaXB0KS5zcGxpdCgnICcpO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBjb25zdCBzdHJ1Y3R1cmUgPSB7XHJcbiAgICAgICAgcHVibGljS2V5czogZml4dHVyZUtleXMubWFwKChrKSA9PiBrLnB1YmxpY0tleS50b1N0cmluZygnaGV4JykpLFxyXG4gICAgICAgIHNjcmlwdDogc2NyaXB0Py50b1N0cmluZygnaGV4JyksXHJcbiAgICAgICAgd2l0bmVzczogd2l0bmVzcz8ubWFwKCh3KSA9PiB3LnRvU3RyaW5nKCdoZXgnKSksXHJcbiAgICAgICAgc2NyaXB0QVNNLFxyXG4gICAgICAgIHB1YlNjcmlwdEFTTSxcclxuICAgICAgICB0YXBzY3JpcHRBU00sXHJcbiAgICAgICAgY2xhc3NpZnlJbnB1dCxcclxuICAgICAgICBjbGFzc2lmeVdpdG5lc3MsXHJcbiAgICAgICAgY2xhc3NpZnlQdWJTY3JpcHQsXHJcbiAgICAgICAgY2xhc3NpZnlUYXBzY3JpcHQsXHJcbiAgICAgIH07XHJcblxyXG4gICAgICBjb25zdCBmaXh0dXJlTmFtZSA9IFsnc3RydWN0dXJlJywga2V5TmFtZShzaWduZXIxKSwgc2lnbmVyMiA/IGtleU5hbWUoc2lnbmVyMikgOiAnbm9uZSddLmpvaW4oJy0nKTtcclxuICAgICAgZml4dHVyZVV0aWwuYXNzZXJ0RXF1YWxKU09OKHN0cnVjdHVyZSwgYXdhaXQgcmVhZEZpeHR1cmUobmV0d29yaywgc2NyaXB0VHlwZSwgZml4dHVyZU5hbWUsIHN0cnVjdHVyZSkpO1xyXG4gICAgfVxyXG4gICk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHJ1blRlc3RQYXJzZVNjcmlwdDxUTnVtYmVyIGV4dGVuZHMgbnVtYmVyIHwgYmlnaW50ID0gbnVtYmVyPihcclxuICBuZXR3b3JrOiBOZXR3b3JrLFxyXG4gIHNjcmlwdFR5cGU6IFNjcmlwdFR5cGUsXHJcbiAgazE6IEJJUDMySW50ZXJmYWNlLFxyXG4gIGsyOiBCSVAzMkludGVyZmFjZSxcclxuICBhbW91bnRUeXBlOiAnbnVtYmVyJyB8ICdiaWdpbnQnID0gJ251bWJlcidcclxuKSB7XHJcbiAgYXN5bmMgZnVuY3Rpb24gdGVzdFBhcnNlU2lnbmVkSW5wdXRzKFxyXG4gICAgdHg6IFV0eG9UcmFuc2FjdGlvbjxUTnVtYmVyPixcclxuICAgIG5hbWU6IHN0cmluZyxcclxuICAgIGV4cGVjdGVkU2NyaXB0VHlwZTogc3RyaW5nIHwgdW5kZWZpbmVkLFxyXG4gICAgeyBleHBlY3RlZFBsYWNlaG9sZGVyU2lnbmF0dXJlcyB9OiB7IGV4cGVjdGVkUGxhY2Vob2xkZXJTaWduYXR1cmVzOiBudW1iZXIgfVxyXG4gICkge1xyXG4gICAgY29uc3QgcGFyc2VkID0gcGFyc2VTaWduYXR1cmVTY3JpcHQodHguaW5zWzBdKTtcclxuICAgIGFzc2VydC5zdHJpY3RFcXVhbChcclxuICAgICAgcGFyc2VkLnNjcmlwdFR5cGUsXHJcbiAgICAgIGV4cGVjdGVkU2NyaXB0VHlwZSA9PT0gJ3AydHInID8gJ3RhcHJvb3RTY3JpcHRQYXRoU3BlbmQnIDogZXhwZWN0ZWRTY3JpcHRUeXBlXHJcbiAgICApO1xyXG4gICAgY29uc3QgcGFyc2VkMk9mMyA9IHsgLi4ucGFyc2VkLCBzY3JpcHRUeXBlOiBleHBlY3RlZFNjcmlwdFR5cGUgfTtcclxuICAgIGZpeHR1cmVVdGlsLmFzc2VydEVxdWFsSlNPTihcclxuICAgICAgcGFyc2VkMk9mMyxcclxuICAgICAgYXdhaXQgcmVhZEZpeHR1cmUobmV0d29yaywgc2NyaXB0VHlwZSwgWydwYXJzZWQnLCBrZXlOYW1lKGsxKSwga2V5TmFtZShrMiksIG5hbWVdLmpvaW4oJy0nKSwgcGFyc2VkMk9mMylcclxuICAgICk7XHJcblxyXG4gICAgaWYgKCFwYXJzZWQuc2NyaXB0VHlwZSkge1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgc3dpdGNoIChwYXJzZWQuc2NyaXB0VHlwZSkge1xyXG4gICAgICBjYXNlICdwMnNoUDJwayc6XHJcbiAgICAgICAgLy8gd2UgZG9uJ3QgcGFyc2UgdGhlIHNpZ25hdHVyZSBmb3IgdGhpcyBzY3JpcHQgdHlwZVxyXG4gICAgICAgIGJyZWFrO1xyXG4gICAgICBjYXNlICdwMnNoJzpcclxuICAgICAgY2FzZSAncDJzaFAyd3NoJzpcclxuICAgICAgY2FzZSAncDJ3c2gnOlxyXG4gICAgICBjYXNlICd0YXByb290U2NyaXB0UGF0aFNwZW5kJzpcclxuICAgICAgICBhc3NlcnQuc3RyaWN0RXF1YWwoXHJcbiAgICAgICAgICBwYXJzZWQuc2lnbmF0dXJlcy5maWx0ZXIoKHMpID0+IGlzUGxhY2Vob2xkZXJTaWduYXR1cmUocykpLmxlbmd0aCxcclxuICAgICAgICAgIGV4cGVjdGVkUGxhY2Vob2xkZXJTaWduYXR1cmVzXHJcbiAgICAgICAgKTtcclxuICAgICAgICBicmVhaztcclxuICAgICAgZGVmYXVsdDpcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYHVuZXhwZWN0ZWQgc2NyaXB0VHlwZSAkeyhwYXJzZWQgYXMgYW55KS5zY3JpcHRUeXBlfWApO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgaWYgKHNjcmlwdFR5cGUgIT09ICdwMnNoUDJwaycpIHtcclxuICAgIGl0KGBwYXJzZXMgaGFsZi1zaWduZWQgaW5wdXRzIFske2dldE5ldHdvcmtOYW1lKG5ldHdvcmspfSAke3NjcmlwdFR5cGV9ICR7YW1vdW50VHlwZX1dYCwgYXN5bmMgZnVuY3Rpb24gKCkge1xyXG4gICAgICBhd2FpdCB0ZXN0UGFyc2VTaWduZWRJbnB1dHMoXHJcbiAgICAgICAgZ2V0SGFsZlNpZ25lZFRyYW5zYWN0aW9uMk9mMzxUTnVtYmVyPihmaXh0dXJlS2V5cywgazEsIGsyLCBzY3JpcHRUeXBlLCBuZXR3b3JrLCB7IGFtb3VudFR5cGUgfSksXHJcbiAgICAgICAgJ2hhbGZTaWduZWQnLFxyXG4gICAgICAgIHNjcmlwdFR5cGUsXHJcbiAgICAgICAgeyBleHBlY3RlZFBsYWNlaG9sZGVyU2lnbmF0dXJlczogc2NyaXB0VHlwZSA9PT0gJ3AydHInID8gMSA6IDIgfVxyXG4gICAgICApO1xyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBpdChgcGFyc2VzIGZ1bGwtc2lnbmVkIGlucHV0cyBbJHtnZXROZXR3b3JrTmFtZShuZXR3b3JrKX0gJHtzY3JpcHRUeXBlfSAke2Ftb3VudFR5cGV9XWAsIGFzeW5jIGZ1bmN0aW9uICgpIHtcclxuICAgIGlmIChzY3JpcHRUeXBlID09PSAncDJzaFAycGsnKSB7XHJcbiAgICAgIGF3YWl0IHRlc3RQYXJzZVNpZ25lZElucHV0cyhcclxuICAgICAgICBnZXRGdWxsU2lnbmVkVHJhbnNhY3Rpb25QMnNoUDJwazxUTnVtYmVyPihmaXh0dXJlS2V5cywgazEsIG5ldHdvcmssIHsgYW1vdW50VHlwZSB9KSxcclxuICAgICAgICAnZnVsbFNpZ25lZCcsXHJcbiAgICAgICAgc2NyaXB0VHlwZSxcclxuICAgICAgICB7IGV4cGVjdGVkUGxhY2Vob2xkZXJTaWduYXR1cmVzOiAwIH1cclxuICAgICAgKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIGF3YWl0IHRlc3RQYXJzZVNpZ25lZElucHV0cyhcclxuICAgICAgICBnZXRGdWxsU2lnbmVkVHJhbnNhY3Rpb24yT2YzPFROdW1iZXI+KGZpeHR1cmVLZXlzLCBrMSwgazIsIHNjcmlwdFR5cGUsIG5ldHdvcmssIHsgYW1vdW50VHlwZSB9KSxcclxuICAgICAgICAnZnVsbFNpZ25lZCcsXHJcbiAgICAgICAgc2NyaXB0VHlwZSxcclxuICAgICAgICB7IGV4cGVjdGVkUGxhY2Vob2xkZXJTaWduYXR1cmVzOiAwIH1cclxuICAgICAgKTtcclxuICAgIH1cclxuICB9KTtcclxufVxyXG5cclxuZnVuY3Rpb24gYXNzZXJ0VmVyaWZ5U2lnbmF0dXJlRXF1YWxzPFROdW1iZXIgZXh0ZW5kcyBudW1iZXIgfCBiaWdpbnQ+KFxyXG4gIHR4OiBVdHhvVHJhbnNhY3Rpb248VE51bWJlcj4sXHJcbiAgcHJldk91dHB1dHM6IFR4T3V0cHV0PFROdW1iZXI+W10sXHJcbiAgdmFsdWU6IGJvb2xlYW4sXHJcbiAgdGVzdE91dHB1dEFtb3VudDogVE51bWJlcixcclxuICB2ZXJpZmljYXRpb25TZXR0aW5ncz86IHtcclxuICAgIHB1YmxpY0tleT86IEJ1ZmZlcjtcclxuICAgIHNpZ25hdHVyZUluZGV4PzogbnVtYmVyO1xyXG4gIH1cclxuKSB7XHJcbiAgdHguaW5zLmZvckVhY2goKGlucHV0LCBpKSA9PiB7XHJcbiAgICBhc3NlcnQuZG9lc05vdFRocm93KCgpID0+IHtcclxuICAgICAgZ2V0U2lnbmF0dXJlVmVyaWZpY2F0aW9ucyh0eCwgaSwgdGVzdE91dHB1dEFtb3VudCwgdmVyaWZpY2F0aW9uU2V0dGluZ3MsIHByZXZPdXRwdXRzKTtcclxuICAgIH0pO1xyXG4gICAgYXNzZXJ0LnN0cmljdEVxdWFsKFxyXG4gICAgICB2ZXJpZnlTaWduYXR1cmUodHgsIGksIHRlc3RPdXRwdXRBbW91bnQsIHZlcmlmaWNhdGlvblNldHRpbmdzLCBwcmV2T3V0cHV0cyksXHJcbiAgICAgIHZhbHVlLFxyXG4gICAgICBKU09OLnN0cmluZ2lmeSh2ZXJpZmljYXRpb25TZXR0aW5ncylcclxuICAgICk7XHJcbiAgICBpZiAodmVyaWZpY2F0aW9uU2V0dGluZ3M/LnNpZ25hdHVyZUluZGV4ID09PSB1bmRlZmluZWQgJiYgdmVyaWZpY2F0aW9uU2V0dGluZ3M/LnB1YmxpY0tleSkge1xyXG4gICAgICBhc3NlcnQuc3RyaWN0RXF1YWwodmVyaWZ5U2lnbmF0dXJlV2l0aFB1YmxpY0tleSh0eCwgaSwgcHJldk91dHB1dHMsIHZlcmlmaWNhdGlvblNldHRpbmdzLnB1YmxpY0tleSksIHZhbHVlKTtcclxuICAgIH1cclxuICB9KTtcclxufVxyXG5cclxuZnVuY3Rpb24gY2hlY2tTaWduVHJhbnNhY3Rpb248VE51bWJlciBleHRlbmRzIG51bWJlciB8IGJpZ2ludD4oXHJcbiAgdHg6IFV0eG9UcmFuc2FjdGlvbjxUTnVtYmVyPixcclxuICBzY3JpcHRUeXBlOiBTY3JpcHRUeXBlMk9mMyxcclxuICBzaWduS2V5czogQklQMzJJbnRlcmZhY2VbXSxcclxuICB0ZXN0T3V0cHV0QW1vdW50OiBUTnVtYmVyXHJcbikge1xyXG4gIGNvbnN0IHByZXZPdXRwdXRzID0gZ2V0UHJldk91dHB1dHM8VE51bWJlcj4oc2NyaXB0VHlwZSwgdGVzdE91dHB1dEFtb3VudCwgdHgubmV0d29yaykgYXMgVHhPdXRwdXQ8VE51bWJlcj5bXTtcclxuXHJcbiAgLy8gcmV0dXJuIHRydWUgaWZmIHRoZXJlIGFyZSBhbnkgdmFsaWQgc2lnbmF0dXJlcyBhdCBhbGxcclxuICBhc3NlcnRWZXJpZnlTaWduYXR1cmVFcXVhbHM8VE51bWJlcj4odHgsIHByZXZPdXRwdXRzLCBzaWduS2V5cy5sZW5ndGggPiAwLCB0ZXN0T3V0cHV0QW1vdW50KTtcclxuXHJcbiAgZml4dHVyZUtleXMuZm9yRWFjaCgoaykgPT4ge1xyXG4gICAgLy8gaWYgcHVibGljS2V5IGlzIGdpdmVuLCByZXR1cm4gdHJ1ZSBpZmYgaXQgaXMgaW5jbHVkZWQgaW4gc2lnbktleXNcclxuICAgIGFzc2VydFZlcmlmeVNpZ25hdHVyZUVxdWFsczxUTnVtYmVyPih0eCwgcHJldk91dHB1dHMsIHNpZ25LZXlzLmluY2x1ZGVzKGspLCB0ZXN0T3V0cHV0QW1vdW50LCB7XHJcbiAgICAgIHB1YmxpY0tleTogay5wdWJsaWNLZXksXHJcbiAgICB9KTtcclxuICB9KTtcclxuXHJcbiAgLy8gV2hlbiB0cmFuc2FjdGlvbnMgYXJlIHNpZ25lZCwgdGhlIHNpZ25hdHVyZXMgaGF2ZSB0aGUgc2FtZSBvcmRlciBhcyB0aGUgcHVibGljIGtleXMgaW4gdGhlIG91dHB1dFNjcmlwdC5cclxuICBjb25zdCBvcmRlcmVkU2lnbmluZ0tleXMgPSBmaXh0dXJlS2V5cy5maWx0ZXIoKGZpeHR1cmVLZXkpID0+IHNpZ25LZXlzLmluY2x1ZGVzKGZpeHR1cmVLZXkpKTtcclxuXHJcbiAgWzAsIDEsIDJdLmZvckVhY2goKHNpZ25hdHVyZUluZGV4KSA9PiB7XHJcbiAgICBpZiAoc2NyaXB0VHlwZSA9PT0gJ3AydHInKSB7XHJcbiAgICAgIC8vIHNpZ25hdHVyZUluZGV4IHBhcmFtZXRlciBub3Qgc3VwcG9ydCBmb3IgcDJ0ciB2ZXJpZmljYXRpb25cclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgZml4dHVyZUtleXMuZm9yRWFjaCgoaykgPT4ge1xyXG4gICAgICAvLyBJZiBubyBwdWJsaWMga2V5IGlzIGdpdmVuLCByZXR1cm4gdHJ1ZSBpZmYgYW55IHZhbGlkIHNpZ25hdHVyZSB3aXRoIGdpdmVuIGluZGV4IGV4aXN0cy5cclxuICAgICAgYXNzZXJ0VmVyaWZ5U2lnbmF0dXJlRXF1YWxzPFROdW1iZXI+KHR4LCBwcmV2T3V0cHV0cywgc2lnbmF0dXJlSW5kZXggPCBzaWduS2V5cy5sZW5ndGgsIHRlc3RPdXRwdXRBbW91bnQsIHtcclxuICAgICAgICBzaWduYXR1cmVJbmRleCxcclxuICAgICAgfSk7XHJcblxyXG4gICAgICAvLyBJZiBwdWJsaWNLZXkgYW5kIHNpZ25hdHVyZUluZGV4IGFyZSBwcm92aWRlZCBvbmx5IHJldHVybiBpZiBib3RoIG1hdGNoLlxyXG4gICAgICBhc3NlcnRWZXJpZnlTaWduYXR1cmVFcXVhbHM8VE51bWJlcj4oXHJcbiAgICAgICAgdHgsXHJcbiAgICAgICAgcHJldk91dHB1dHMsXHJcbiAgICAgICAgc2lnbmF0dXJlSW5kZXggPT09IG9yZGVyZWRTaWduaW5nS2V5cy5pbmRleE9mKGspLFxyXG4gICAgICAgIHRlc3RPdXRwdXRBbW91bnQsXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgcHVibGljS2V5OiBrLnB1YmxpY0tleSxcclxuICAgICAgICAgIHNpZ25hdHVyZUluZGV4LFxyXG4gICAgICAgIH1cclxuICAgICAgKTtcclxuICAgIH0pO1xyXG4gIH0pO1xyXG5cclxuICB0eC5pbnMuZm9yRWFjaCgoaW5wdXQsIGkpID0+IHtcclxuICAgIGNvbnN0IHNpZ25hdHVyZUNvdW50ID0gKHJlczogYm9vbGVhbltdKSA9PiByZXMucmVkdWNlKChzdW0sIGIpID0+IHN1bSArIChiID8gMSA6IDApLCAwKTtcclxuICAgIGNvbnN0IHB1YmtleXMgPSBmaXh0dXJlS2V5cy5tYXAoKGspID0+IGsucHVibGljS2V5KTtcclxuICAgIGNvbnN0IHZlcmlmeVJlc3VsdCA9IHZlcmlmeVNpZ25hdHVyZVdpdGhQdWJsaWNLZXlzKHR4LCBpLCBwcmV2T3V0cHV0cywgcHVia2V5cyk7XHJcbiAgICBhc3NlcnQuZGVlcFN0cmljdEVxdWFsKFxyXG4gICAgICB2ZXJpZnlSZXN1bHQsXHJcbiAgICAgIGZpeHR1cmVLZXlzLm1hcCgoaykgPT4gc2lnbktleXMuaW5jbHVkZXMoaykpXHJcbiAgICApO1xyXG4gICAgYXNzZXJ0LnN0cmljdEVxdWFsKHNpZ25hdHVyZUNvdW50KHZlcmlmeVJlc3VsdCksIHNpZ25LZXlzLmxlbmd0aCk7XHJcblxyXG4gICAgaWYgKHNpZ25LZXlzLmxlbmd0aCA+IDApIHtcclxuICAgICAgZ2V0VHJhbnNhY3Rpb25XaXRoSGlnaFModHgsIGkpLmZvckVhY2goKHR4V2l0aEhpZ2hTKSA9PiB7XHJcbiAgICAgICAgYXNzZXJ0LnN0cmljdEVxdWFsKFxyXG4gICAgICAgICAgc2lnbmF0dXJlQ291bnQodmVyaWZ5U2lnbmF0dXJlV2l0aFB1YmxpY0tleXM8VE51bWJlcj4odHhXaXRoSGlnaFMsIGksIHByZXZPdXRwdXRzLCBwdWJrZXlzKSksXHJcbiAgICAgICAgICBzaWduS2V5cy5sZW5ndGggLSAxXHJcbiAgICAgICAgKTtcclxuICAgICAgfSk7XHJcblxyXG4gICAgICBpZiAoc2NyaXB0VHlwZSAhPT0gJ3AydHInICYmIHNjcmlwdFR5cGUgIT09ICdwMnRyTXVzaWcyJykge1xyXG4gICAgICAgIGFzc2VydC50aHJvd3MoXHJcbiAgICAgICAgICAoKSA9PlxyXG4gICAgICAgICAgICBzaWduYXR1cmVDb3VudChcclxuICAgICAgICAgICAgICB2ZXJpZnlTaWduYXR1cmVXaXRoUHVibGljS2V5czxUTnVtYmVyPih0eCwgaSwgZ2V0UHJldk91dHNXaXRoSW52YWxpZE91dHB1dFNjcmlwdChwcmV2T3V0cHV0cywgaSksIHB1YmtleXMpXHJcbiAgICAgICAgICAgICksXHJcbiAgICAgICAgICAvcHJldm91dCBzY3JpcHQgLiogZG9lcyBub3QgbWF0Y2ggY29tcHV0ZWQgc2NyaXB0IC4qL1xyXG4gICAgICAgICk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9KTtcclxufVxyXG5cclxuZnVuY3Rpb24gcnVuVGVzdENoZWNrU2lnbmF0dXJlVmVyaWZ5PFROdW1iZXIgZXh0ZW5kcyBudW1iZXIgfCBiaWdpbnQgPSBudW1iZXI+KFxyXG4gIG5ldHdvcms6IE5ldHdvcmssXHJcbiAgc2NyaXB0VHlwZTogU2NyaXB0VHlwZTJPZjMsXHJcbiAgazE/OiBCSVAzMkludGVyZmFjZSxcclxuICBrMj86IEJJUDMySW50ZXJmYWNlLFxyXG4gIGFtb3VudFR5cGU6ICdudW1iZXInIHwgJ2JpZ2ludCcgPSAnbnVtYmVyJ1xyXG4pIHtcclxuICBpZiAoazEgJiYgazIpIHtcclxuICAgIGRlc2NyaWJlKGB2ZXJpZnlTaWduYXR1cmUgJHtnZXROZXR3b3JrTmFtZShuZXR3b3JrKX0gJHtzY3JpcHRUeXBlfSAke2tleU5hbWUoazEpfSAke2tleU5hbWUoXHJcbiAgICAgIGsyXHJcbiAgICApfSAke2Ftb3VudFR5cGV9YCwgZnVuY3Rpb24gKCkge1xyXG4gICAgICBpdChgdmVyaWZpZXMgaGFsZi1zaWduZWRgLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgY2hlY2tTaWduVHJhbnNhY3Rpb24oXHJcbiAgICAgICAgICBnZXRIYWxmU2lnbmVkVHJhbnNhY3Rpb24yT2YzPFROdW1iZXI+KGZpeHR1cmVLZXlzLCBrMSwgazIsIHNjcmlwdFR5cGUsIG5ldHdvcmssIHsgYW1vdW50VHlwZSB9KSxcclxuICAgICAgICAgIHNjcmlwdFR5cGUsXHJcbiAgICAgICAgICBbazFdLFxyXG4gICAgICAgICAgdG9UTnVtYmVyPFROdW1iZXI+KGRlZmF1bHRUZXN0T3V0cHV0QW1vdW50LCBhbW91bnRUeXBlKVxyXG4gICAgICAgICk7XHJcbiAgICAgIH0pO1xyXG5cclxuICAgICAgaXQoYHZlcmlmaWVzIGZ1bGwtc2lnbmVkYCwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGNoZWNrU2lnblRyYW5zYWN0aW9uKFxyXG4gICAgICAgICAgZ2V0RnVsbFNpZ25lZFRyYW5zYWN0aW9uMk9mMzxUTnVtYmVyPihmaXh0dXJlS2V5cywgazEsIGsyLCBzY3JpcHRUeXBlLCBuZXR3b3JrLCB7IGFtb3VudFR5cGUgfSksXHJcbiAgICAgICAgICBzY3JpcHRUeXBlLFxyXG4gICAgICAgICAgW2sxLCBrMl0sXHJcbiAgICAgICAgICB0b1ROdW1iZXI8VE51bWJlcj4oZGVmYXVsdFRlc3RPdXRwdXRBbW91bnQsIGFtb3VudFR5cGUpXHJcbiAgICAgICAgKTtcclxuICAgICAgfSk7XHJcbiAgICB9KTtcclxuICB9IGVsc2Uge1xyXG4gICAgZGVzY3JpYmUoYHZlcmlmeVNpZ25hdHVyZSAke2dldE5ldHdvcmtOYW1lKG5ldHdvcmspfSAke3NjcmlwdFR5cGV9ICR7YW1vdW50VHlwZX0gdW5zaWduZWRgLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgIGl0KGB2ZXJpZmllcyB1bnNpZ25lZGAsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBjaGVja1NpZ25UcmFuc2FjdGlvbihcclxuICAgICAgICAgIGdldFVuc2lnbmVkVHJhbnNhY3Rpb24yT2YzPFROdW1iZXI+KGZpeHR1cmVLZXlzLCBzY3JpcHRUeXBlLCBuZXR3b3JrLCB7IGFtb3VudFR5cGUgfSksXHJcbiAgICAgICAgICBzY3JpcHRUeXBlLFxyXG4gICAgICAgICAgW10sXHJcbiAgICAgICAgICB0b1ROdW1iZXI8VE51bWJlcj4oZGVmYXVsdFRlc3RPdXRwdXRBbW91bnQsIGFtb3VudFR5cGUpXHJcbiAgICAgICAgKTtcclxuICAgICAgfSk7XHJcbiAgICB9KTtcclxuICB9XHJcbn1cclxuXHJcbmRlc2NyaWJlKCdTaWduYXR1cmUgKHNjcmlwdFR5cGVzMk9mMyknLCBmdW5jdGlvbiAoKSB7XHJcbiAgZ2V0TmV0d29ya0xpc3QoKVxyXG4gICAgLmZpbHRlcihpc01haW5uZXQpXHJcbiAgICAvLyBUaGUgc2lnbmluZyBhbmQgdmVyaWZpY2F0aW9uIG1ldGhvZHMgYXJlIGxhcmdlbHkgbmV0d29yay1pbmRlcGVuZGVudCBzbyBsZXQncyBmb2N1cyBvbiBhXHJcbiAgICAvLyBzaW5nbGUgbmV0d29yayB0byByZWR1Y2UgdGVzdCB0aW1lLlxyXG4gICAgLy8gRHVyaW5nIGRldmVsb3BtZW50IGl0IG1pZ2h0IG1ha2Ugc2Vuc2UgdG8gdGVzdCBhbGwgbmV0d29ya3MuXHJcbiAgICAuZmlsdGVyKGlzQml0Y29pbilcclxuICAgIC5mb3JFYWNoKChuZXR3b3JrKSA9PiB7XHJcbiAgICAgIGdldFNjcmlwdFR5cGVzMk9mMygpLmZvckVhY2goKHNjcmlwdFR5cGUpID0+IHtcclxuICAgICAgICBydW5UZXN0Q2hlY2tTaWduYXR1cmVWZXJpZnkobmV0d29yaywgc2NyaXB0VHlwZSk7XHJcblxyXG4gICAgICAgIGdldFNpZ25LZXlDb21iaW5hdGlvbnMoMikubWFwKChbazEsIGsyXSkgPT4ge1xyXG4gICAgICAgICAgcnVuVGVzdENoZWNrU2lnbmF0dXJlVmVyaWZ5KG5ldHdvcmssIHNjcmlwdFR5cGUsIGsxLCBrMik7XHJcbiAgICAgICAgICBydW5UZXN0Q2hlY2tTY3JpcHRTdHJ1Y3R1cmUobmV0d29yaywgc2NyaXB0VHlwZSwgazEsIGsyKTtcclxuICAgICAgICAgIHJ1blRlc3RQYXJzZVNjcmlwdChuZXR3b3JrLCBzY3JpcHRUeXBlLCBrMSwgazIpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICB9KTtcclxuICAgICAgZ2V0U2NyaXB0VHlwZXMyT2YzKCkuZm9yRWFjaCgoc2NyaXB0VHlwZSkgPT4ge1xyXG4gICAgICAgIHJ1blRlc3RDaGVja1NpZ25hdHVyZVZlcmlmeTxiaWdpbnQ+KG5ldHdvcmssIHNjcmlwdFR5cGUsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCAnYmlnaW50Jyk7XHJcblxyXG4gICAgICAgIGdldFNpZ25LZXlDb21iaW5hdGlvbnMoMikubWFwKChbazEsIGsyXSkgPT4ge1xyXG4gICAgICAgICAgcnVuVGVzdENoZWNrU2lnbmF0dXJlVmVyaWZ5PGJpZ2ludD4obmV0d29yaywgc2NyaXB0VHlwZSwgazEsIGsyLCAnYmlnaW50Jyk7XHJcbiAgICAgICAgICBydW5UZXN0Q2hlY2tTY3JpcHRTdHJ1Y3R1cmU8YmlnaW50PihuZXR3b3JrLCBzY3JpcHRUeXBlLCBrMSwgazIsICdiaWdpbnQnKTtcclxuICAgICAgICAgIHJ1blRlc3RQYXJzZVNjcmlwdDxiaWdpbnQ+KG5ldHdvcmssIHNjcmlwdFR5cGUsIGsxLCBrMiwgJ2JpZ2ludCcpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICB9KTtcclxuICAgIH0pO1xyXG59KTtcclxuXHJcbmRlc2NyaWJlKCdTaWduYXR1cmUgKHAyc2hQMnBrKScsIGZ1bmN0aW9uICgpIHtcclxuICBpdCgnc2lnbiBhbmQgcGFyc2UnLCBmdW5jdGlvbiAoKSB7XHJcbiAgICBjb25zdCBzaWduZWRUcmFuc2FjdGlvbiA9IGdldEZ1bGxTaWduZWRUcmFuc2FjdGlvblAyc2hQMnBrKGZpeHR1cmVLZXlzLCBmaXh0dXJlS2V5c1swXSwgbmV0d29ya3MuYml0Y29pbik7XHJcblxyXG4gICAgc2lnbmVkVHJhbnNhY3Rpb24uaW5zLmZvckVhY2goKGlucHV0KSA9PiB7XHJcbiAgICAgIGFzc2VydC5kZWVwU3RyaWN0RXF1YWwoXHJcbiAgICAgICAgbm9ybURlZmF1bHQocGFyc2VTaWduYXR1cmVTY3JpcHQoaW5wdXQpKSxcclxuICAgICAgICBub3JtRGVmYXVsdCh7XHJcbiAgICAgICAgICBzY3JpcHRUeXBlOiAncDJzaFAycGsnLFxyXG4gICAgICAgICAgcHVibGljS2V5czogW2ZpeHR1cmVLZXlzWzBdLnB1YmxpY0tleV0sXHJcbiAgICAgICAgICBzaWduYXR1cmVzOiBbXHJcbiAgICAgICAgICAgICczMDQ1MDIyMTAwZTYzNzQ2NmJlNDA1MDMyYTYzM2RjZWYwYmQxNjEzMDVmZTkzZDM0ZmZlMmFhYmM0YWY0MzRkNmYyNjU5MTIyMTAyMjAxMTNkNzA4NWIxZTAwNDM1YTI1ODNhZjgyYjhhNGRmM2ZiMDA5YThkMjc5ZDIzMTM1MWU0MmYzMWQ2YmFjNzQ0MDEnLFxyXG4gICAgICAgICAgXSxcclxuICAgICAgICB9KVxyXG4gICAgICApO1xyXG4gICAgfSk7XHJcbiAgfSk7XHJcblxyXG4gIHJ1blRlc3RDaGVja1NjcmlwdFN0cnVjdHVyZShuZXR3b3Jrcy5iaXRjb2luLCAncDJzaFAycGsnLCBmaXh0dXJlS2V5c1swXSk7XHJcbiAgcnVuVGVzdENoZWNrU2NyaXB0U3RydWN0dXJlPGJpZ2ludD4obmV0d29ya3MuYml0Y29pbiwgJ3Ayc2hQMnBrJywgZml4dHVyZUtleXNbMF0sIHVuZGVmaW5lZCwgJ2JpZ2ludCcpO1xyXG59KTtcclxuIl19