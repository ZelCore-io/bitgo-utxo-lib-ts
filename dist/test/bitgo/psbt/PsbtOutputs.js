"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const assert = require("assert");
const bs58check = require("bs58check");
const address_1 = require("../../../src/address");
const outputScripts_1 = require("../../../src/bitgo/outputScripts");
const testutil_1 = require("../../../src/testutil");
const src_1 = require("../../../src");
const bitgo_1 = require("../../../src/bitgo");
const PsbtOutputs_1 = require("../../../src/bitgo/wallet/psbt/PsbtOutputs");
const network = src_1.networks.bitcoin;
const rootWalletKeys = (0, testutil_1.getDefaultWalletKeys)();
describe('psbt internal and wallet outputs', function () {
    const value = BigInt(1e8);
    const fee = BigInt(1000);
    const externalAddress = (0, address_1.fromOutputScript)((0, outputScripts_1.createOutputScriptP2shP2pk)(testutil_1.replayProtectionKeyPair.publicKey).scriptPubKey, src_1.networks.bitcoin);
    describe('success', function () {
        it(`Find indices of psbt wallet & internal outputs`, function () {
            const psbt = src_1.testutil.constructPsbt([
                { scriptType: 'p2wsh', value: BigInt(value + value) },
                { scriptType: 'p2shP2wsh', value: BigInt(value) },
                { scriptType: 'p2trMusig2', value: BigInt(value) },
                { scriptType: 'p2tr', value: BigInt(value) },
                { scriptType: 'p2sh', value: BigInt(value) },
            ], [
                { scriptType: 'p2sh', value: BigInt(value) },
                { scriptType: 'p2shP2wsh', value: BigInt(value) },
                { scriptType: 'p2wsh', value: BigInt(value) },
                {
                    address: externalAddress,
                    value: BigInt(value - fee),
                },
                { scriptType: 'p2tr', value: BigInt(value), isInternalAddress: true },
                { scriptType: 'p2trMusig2', value: BigInt(value), isInternalAddress: true },
            ], network, rootWalletKeys, 'unsigned');
            const expected = [0, 1, 2, 4, 5];
            assert.deepEqual((0, PsbtOutputs_1.findWalletOutputIndices)(psbt, rootWalletKeys.triple), expected);
            (0, bitgo_1.addXpubsToPsbt)(psbt, rootWalletKeys);
            assert.deepEqual((0, PsbtOutputs_1.findInternalOutputIndices)(psbt), expected);
        });
        outputScripts_1.scriptTypes2Of3.forEach((scriptType) => {
            const psbt = src_1.testutil.constructPsbt([
                { scriptType: scriptType, value: BigInt(value) },
                { scriptType: 'p2wsh', value: BigInt(value) },
                { scriptType: 'p2shP2wsh', value: BigInt(value) },
                { scriptType: 'p2trMusig2', value: BigInt(value) },
                { scriptType: 'p2tr', value: BigInt(value) },
                { scriptType: 'p2sh', value: BigInt(value) },
            ], [
                { scriptType: 'p2sh', value: BigInt(value) },
                { scriptType: 'p2shP2wsh', value: BigInt(value) },
                { scriptType: 'p2wsh', value: BigInt(value) },
                {
                    address: externalAddress,
                    value: BigInt(value - fee),
                },
                { scriptType: 'p2tr', value: BigInt(value), isInternalAddress: true },
                { scriptType: 'p2trMusig2', value: BigInt(value), isInternalAddress: true },
            ], network, rootWalletKeys, 'unsigned');
            (0, bitgo_1.addXpubsToPsbt)(psbt, rootWalletKeys);
            const totalInternalAmount = value * BigInt(psbt.inputCount - 1);
            it(`PSBT with ${scriptType} input and globalXpub`, function () {
                assert.strictEqual((0, PsbtOutputs_1.getTotalAmountOfInternalOutputs)(psbt), totalInternalAmount);
            });
            it(`Cloned PSBT with ${scriptType} input and globalXpub`, function () {
                assert.strictEqual((0, PsbtOutputs_1.getTotalAmountOfInternalOutputs)(psbt.clone()), totalInternalAmount);
            });
            it(`PSBT with ${scriptType} input and ordered rootNodes`, function () {
                assert.strictEqual((0, PsbtOutputs_1.getTotalAmountOfWalletOutputs)(psbt, rootWalletKeys.triple), totalInternalAmount);
            });
        });
        it(`PSBT with p2shP2pk as first input`, function () {
            const psbt = src_1.testutil.constructPsbt([
                { scriptType: 'p2shP2pk', value: BigInt(value) },
                { scriptType: 'p2wsh', value: BigInt(value) },
            ], [
                { scriptType: 'p2sh', value: BigInt(value) },
                {
                    address: externalAddress,
                    value: BigInt(value - fee),
                },
            ], network, rootWalletKeys, 'unsigned');
            (0, bitgo_1.addXpubsToPsbt)(psbt, rootWalletKeys);
            assert.strictEqual((0, PsbtOutputs_1.getTotalAmountOfInternalOutputs)(psbt), value);
        });
        it(`PSBT with outputs of external wallet root nodes`, function () {
            const psbt = src_1.testutil.constructPsbt([{ scriptType: 'p2wsh', value: BigInt(value) }], [{ scriptType: 'p2sh', value: BigInt(value) }], network, rootWalletKeys, 'unsigned');
            const externalAmount = BigInt(8888);
            const externalRootWalletKeys = new bitgo_1.RootWalletKeys((0, testutil_1.getKeyTriple)('dummy'));
            const indices = [0, 1];
            indices.forEach((index) => (0, bitgo_1.addWalletOutputToPsbt)(psbt, externalRootWalletKeys, (0, bitgo_1.getExternalChainCode)('p2wsh'), index, externalAmount));
            assert.strictEqual((0, PsbtOutputs_1.getTotalAmountOfWalletOutputs)(psbt, externalRootWalletKeys.triple), externalAmount * BigInt(indices.length));
        });
        it(`PSBT with no outputs of external wallet root nodes`, function () {
            const psbt = src_1.testutil.constructPsbt([{ scriptType: 'p2wsh', value: BigInt(value) }], [{ scriptType: 'p2sh', value: BigInt(value) }], network, rootWalletKeys, 'unsigned');
            assert.strictEqual((0, PsbtOutputs_1.getTotalAmountOfWalletOutputs)(psbt, new bitgo_1.RootWalletKeys((0, testutil_1.getKeyTriple)('dummy')).triple), BigInt(0));
        });
        it(`PSBT with no internal output`, function () {
            const psbt = src_1.testutil.constructPsbt([{ scriptType: 'p2wsh', value: BigInt(value) }], [
                {
                    address: externalAddress,
                    value: BigInt(value - fee),
                },
            ], network, rootWalletKeys, 'unsigned');
            (0, bitgo_1.addXpubsToPsbt)(psbt, rootWalletKeys);
            assert.strictEqual((0, PsbtOutputs_1.getTotalAmountOfInternalOutputs)(psbt), BigInt(0));
        });
    });
    describe('failure', function () {
        it('PSBT without globalXpub', function () {
            const psbt = src_1.testutil.constructPsbt([], [], network, rootWalletKeys, 'unsigned');
            assert.throws(() => (0, PsbtOutputs_1.getTotalAmountOfInternalOutputs)(psbt), (e) => e.message === 'Could not find root nodes in PSBT');
        });
        it('PSBT with invalid number of globalXpub', function () {
            const psbt = src_1.testutil.constructPsbt([], [], network, rootWalletKeys, 'unsigned');
            const globalXpub = [
                {
                    extendedPubkey: bs58check.decode(rootWalletKeys.triple[0].neutered().toBase58()),
                    masterFingerprint: rootWalletKeys.triple[0].fingerprint,
                    path: 'm',
                },
            ];
            psbt.updateGlobal({ globalXpub });
            assert.throws(() => (0, PsbtOutputs_1.getTotalAmountOfInternalOutputs)(psbt), (e) => e.message === 'Invalid globalXpubs in PSBT. Expected 3 or none. Got 1');
        });
        it('PSBT without input scriptPubKey', function () {
            const psbt = src_1.testutil.constructPsbt([{ scriptType: 'p2wsh', value: BigInt(value) }], [
                {
                    address: externalAddress,
                    value: BigInt(value - fee),
                },
            ], network, rootWalletKeys, 'unsigned');
            psbt.data.inputs[0].witnessUtxo = undefined;
            (0, bitgo_1.addXpubsToPsbt)(psbt, rootWalletKeys);
            assert.throws(() => (0, PsbtOutputs_1.getTotalAmountOfInternalOutputs)(psbt), (e) => e.message === 'Input scriptPubKey can not be found');
        });
        it('PSBT without input Bip32Derivation', function () {
            const psbt = src_1.testutil.constructPsbt([{ scriptType: 'p2wsh', value: BigInt(value) }], [
                {
                    address: externalAddress,
                    value: BigInt(value - fee),
                },
            ], network, rootWalletKeys, 'unsigned');
            psbt.data.inputs[0].bip32Derivation = undefined;
            (0, bitgo_1.addXpubsToPsbt)(psbt, rootWalletKeys);
            assert.throws(() => (0, PsbtOutputs_1.getTotalAmountOfInternalOutputs)(psbt), (e) => e.message === 'Input Bip32Derivation can not be found');
        });
    });
});
//# sourceMappingURL=data:application/json;base64,