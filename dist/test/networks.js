"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const assert = require("assert");
const networks_1 = require("../src/networks");
describe('networks', function () {
    // Ideally, all properties for all coins should be distinct.
    // However, there are some exceptions and some networks share the same properties.
    // Here we define some groups of networks that are allowed to share properties.
    const bitcoinSharedMessagePrefix = (network) => (0, networks_1.isBitcoin)(network) || (0, networks_1.isBitcoinCash)(network) || (0, networks_1.isBitcoinSV)(network);
    const bitcoinMainnetSharedPubkeyPrefix = (network) => (0, networks_1.isMainnet)(network) && ((0, networks_1.isBitcoin)(network) || (0, networks_1.isBitcoinCash)(network) || (0, networks_1.isECash)(network) || (0, networks_1.isBitcoinSV)(network));
    const bitcoinMainnetSharedScriptPrefix = (network) => bitcoinMainnetSharedPubkeyPrefix(network);
    const bitcoinTestnetSharedPubkeyPrefix = (network) => (0, networks_1.isTestnet)(network) &&
        ((0, networks_1.isBitcoin)(network) ||
            (0, networks_1.isBitcoinCash)(network) ||
            (0, networks_1.isECash)(network) ||
            (0, networks_1.isBitcoinGold)(network) ||
            (0, networks_1.isBitcoinSV)(network) ||
            (0, networks_1.isLitecoin)(network));
    const bitcoinTestnetSharedScriptPrefix = (network) => (0, networks_1.isTestnet)(network) &&
        ((0, networks_1.isBitcoin)(network) ||
            (0, networks_1.isBitcoinCash)(network) ||
            (0, networks_1.isECash)(network) ||
            (0, networks_1.isBitcoinGold)(network) ||
            (0, networks_1.isBitcoinSV)(network) ||
            (0, networks_1.isDogecoin)(network));
    const bitcoinMainnetSharedWIFPrefix = (network) => (0, networks_1.isMainnet)(network) &&
        ((0, networks_1.isBitcoin)(network) ||
            (0, networks_1.isBitcoinCash)(network) ||
            (0, networks_1.isECash)(network) ||
            (0, networks_1.isBitcoinGold)(network) ||
            (0, networks_1.isBitcoinSV)(network) ||
            (0, networks_1.isZcash)(network));
    const bitcoinTestnetSharedWIFPrefix = (network) => (0, networks_1.isTestnet)(network) && !(0, networks_1.isDogecoin)(network);
    const bech32Coins = (network) => (0, networks_1.isBitcoin)(network) || (0, networks_1.isBitcoinGold)(network) || (0, networks_1.isLitecoin)(network);
    const sameGroup = (group, network, otherNetwork) => group(network) && group(otherNetwork);
    describe('getNetworkList()', function () {
        it('mainnets are sorted alphabetically', function () {
            const mainnets = (0, networks_1.getNetworkList)().filter(networks_1.isMainnet);
            const sortedMainnets = [...mainnets].sort((a, b) => (0, networks_1.getNetworkName)(a).localeCompare((0, networks_1.getNetworkName)(b)));
            assert.deepStrictEqual(mainnets, sortedMainnets);
        });
        it('testnet(s) follow mainnets', function () {
            const list = (0, networks_1.getNetworkList)();
            while (list.length > 0) {
                // first element is a mainnet
                const mainnet = list.shift();
                assert.strict(mainnet);
                assert.strictEqual((0, networks_1.isMainnet)(mainnet), true);
                // subsequent entries are testnets
                while (list.length > 0 && (0, networks_1.isTestnet)(list[0])) {
                    assert.strictEqual((0, networks_1.getMainnet)(list[0]), mainnet);
                    list.shift();
                }
            }
        });
    });
    describe('Features', function () {
        it('have expected values for networks', function () {
            assert.deepStrictEqual((0, networks_1.getNetworkList)().map((n) => [(0, networks_1.getNetworkName)(n), (0, networks_1.supportsSegwit)(n), (0, networks_1.supportsTaproot)(n)]), [
                ['bitcoin', true, true],
                ['testnet', true, true],
                ['bitcoincash', false, false],
                ['bitcoincashTestnet', false, false],
                ['bitcoingold', true, false],
                ['bitcoingoldTestnet', true, false],
                ['bitcoinsv', false, false],
                ['bitcoinsvTestnet', false, false],
                ['dash', false, false],
                ['dashTest', false, false],
                ['dogecoin', false, false],
                ['dogecoinTest', false, false],
                ['ecash', false, false],
                ['ecashTest', false, false],
                ['litecoin', true, false],
                ['litecoinTest', true, false],
                ['zcash', false, false],
                ['zcashTest', false, false],
            ]);
        });
    });
    for (const name in networks_1.networks) {
        const network = networks_1.networks[name];
        describe(`networks.${name}`, function () {
            it('is valid network', function () {
                assert((0, networks_1.isValidNetwork)(network));
            });
            it('getNetworkName() returns network name', function () {
                assert.strictEqual(name, (0, networks_1.getNetworkName)(network));
            });
            it('has corresponding testnet/mainnet', function () {
                if ((0, networks_1.isMainnet)(network)) {
                    assert.strictEqual((0, networks_1.isTestnet)(network), false);
                    assert.strictEqual((0, networks_1.getMainnet)(network), network);
                    assert.strictEqual(typeof (0, networks_1.getTestnet)(network), 'object');
                }
                else {
                    assert.strictEqual((0, networks_1.isMainnet)(network), false);
                    assert.strictEqual((0, networks_1.getTestnet)(network), network);
                    assert.notStrictEqual((0, networks_1.getMainnet)(network), network);
                    assert.strictEqual(typeof (0, networks_1.getMainnet)(network), 'object');
                }
            });
            it('has expected properties', function () {
                assert.strictEqual(typeof network, 'object');
                assert.strictEqual(typeof network.messagePrefix, 'string');
                assert.strictEqual(typeof network.bech32, bech32Coins(network) ? 'string' : 'undefined');
                assert.strictEqual(typeof network.bip32, 'object');
                assert.strictEqual(typeof network.pubKeyHash, 'number');
                assert.strictEqual(typeof network.scriptHash, 'number');
                assert.strictEqual(typeof network.wif, 'number');
                assert.strictEqual(typeof network.coin, 'string');
                if ((0, networks_1.isMainnet)(network)) {
                    assert.strictEqual(network.bip32.public, networks_1.networks.bitcoin.bip32.public);
                    assert.strictEqual(network.bip32.private, networks_1.networks.bitcoin.bip32.private);
                }
                else {
                    assert.strictEqual(network.bip32.public, networks_1.networks.testnet.bip32.public);
                    assert.strictEqual(network.bip32.private, networks_1.networks.testnet.bip32.private);
                }
            });
            for (const otherName in networks_1.networks) {
                const otherNetwork = networks_1.networks[otherName];
                it('isSameCoin() returns true testnet/mainnet variants', function () {
                    assert.strictEqual((0, networks_1.isSameCoin)(network, otherNetwork), otherNetwork === (0, networks_1.getMainnet)(network) || otherNetwork === (0, networks_1.getTestnet)(network));
                    assert.strictEqual(name === otherName, network === otherNetwork);
                });
                if (network === otherNetwork) {
                    continue;
                }
                it(`has distinct properties with ${otherName}`, function () {
                    assert.strictEqual(network.messagePrefix === otherNetwork.messagePrefix, (0, networks_1.isSameCoin)(network, otherNetwork) || sameGroup(bitcoinSharedMessagePrefix, network, otherNetwork));
                    assert.strictEqual(network.pubKeyHash === otherNetwork.pubKeyHash, sameGroup(bitcoinMainnetSharedPubkeyPrefix, network, otherNetwork) ||
                        sameGroup(bitcoinTestnetSharedPubkeyPrefix, network, otherNetwork));
                    assert.strictEqual(network.scriptHash === otherNetwork.scriptHash, sameGroup(bitcoinMainnetSharedScriptPrefix, network, otherNetwork) ||
                        sameGroup(bitcoinTestnetSharedScriptPrefix, network, otherNetwork));
                    assert.strictEqual(network.wif === otherNetwork.wif, sameGroup(bitcoinMainnetSharedWIFPrefix, network, otherNetwork) ||
                        sameGroup(bitcoinTestnetSharedWIFPrefix, network, otherNetwork));
                });
            }
        });
    }
});
//# sourceMappingURL=data:application/json;base64,