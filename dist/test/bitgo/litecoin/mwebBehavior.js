"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const assert = require("assert");
const path = require("path");
const fs = require("fs-extra");
const src_1 = require("../../../src");
const bitgo_1 = require("../../../src/bitgo");
const testutil_1 = require("../../../src/testutil");
const network = src_1.networks.litecoin;
async function getFixture(name) {
    const p = path.join(__dirname, 'fixtures', name);
    return JSON.parse(await fs.readFile(p, 'utf-8'));
}
async function getFixtureAsBuffer(name) {
    return Buffer.from(await getFixture(name), 'hex');
}
async function getTransaction(mweb) {
    return (0, bitgo_1.createTransactionFromBuffer)(await getFixtureAsBuffer(`ltc-${mweb ? 'mweb-' : ''}transaction.json`), network, {
        amountType: 'bigint',
    });
}
describe('Litecoin Transaction', function () {
    it('mweb transaction gets round-tripped to a non-mweb transaction', async function () {
        const mweb = await getTransaction(true);
        assert(mweb instanceof bitgo_1.LitecoinTransaction);
        const nonMwebFixture = await getFixture(`ltc-transaction.json`);
        assert.deepStrictEqual(mweb.toHex(), nonMwebFixture);
    });
    it('non-mweb transaction gets round-tripped to a non-mweb transaction', async function () {
        const nonMweb = await getTransaction(false);
        assert(nonMweb instanceof bitgo_1.LitecoinTransaction);
        const nonMwebFixture = await getFixture(`ltc-transaction.json`);
        assert.deepStrictEqual(nonMweb.toHex(), nonMwebFixture);
    });
    it(`mweb transaction read from hex and buffer serialize to the same fixture`, async function () {
        const mweb = await getTransaction(true);
        const hex = await getFixture(`ltc-mweb-transaction.json`);
        const mwebBuffer = (0, bitgo_1.createTransactionFromBuffer)(Buffer.from(hex, 'hex'), network, { amountType: 'bigint' });
        assert.deepStrictEqual(mweb.toHex(), mwebBuffer.toHex());
    });
});
describe('Litecoin Psbt', function () {
    it('LitecoinPsbt can read hex of a mweb transaction', async function () {
        const mwebTransaction = await getTransaction(true);
        const psbt = (0, bitgo_1.createPsbtFromTransaction)(mwebTransaction, [
            {
                script: Buffer.from('f955ddd1845eb0cb2c4542ff04ace2695f9f88c6b7a1ac2fba0b91662cffacc9', 'hex'),
                value: BigInt(10000),
            },
        ]);
        assert(psbt instanceof bitgo_1.LitecoinPsbt);
        assert.deepStrictEqual(psbt.getUnsignedTx().toHex(), await getFixture(`ltc-transaction.json`));
    });
    it('can add an input to a psbt whose prev transaction has a mweb serialization', async function () {
        const rootWalletKeys = (0, testutil_1.getDefaultWalletKeys)();
        const buf = await getFixtureAsBuffer(`ltc-mweb-transaction.json`);
        const tx = await (0, bitgo_1.createTransactionFromBuffer)(buf, network, { amountType: 'bigint' });
        const psbt = (0, bitgo_1.createPsbtForNetwork)({ network });
        assert(psbt instanceof bitgo_1.LitecoinPsbt);
        const u = (0, testutil_1.mockWalletUnspent)(network, BigInt(9500), {
            chain: 0,
            index: 0,
            keys: rootWalletKeys,
            vout: 0,
            id: `${tx.getId()}:0`,
        });
        (0, bitgo_1.addWalletUnspentToPsbt)(psbt, {
            ...u,
            prevTx: buf,
        }, rootWalletKeys, 'user', 'bitgo');
        assert(psbt.data.inputs.length > 0);
        // Check that the previous transaction buffer added does not have a MWEB flag
        const prevTxBuffer = psbt.data.inputs[0].nonWitnessUtxo;
        assert(prevTxBuffer);
        assert.deepStrictEqual(prevTxBuffer.toString('hex'), await getFixture(`ltc-transaction.json`));
    });
});
//# sourceMappingURL=data:application/json;base64,