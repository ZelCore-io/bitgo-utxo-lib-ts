"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getP2trMusig2Index = exports.createPsbtSpendTransaction = exports.createPsbtSpendTransactionFromPrevTx = exports.createSpendTransaction = exports.createSpendTransactionFromPrevOutputs = exports.createScriptPubKey = exports.isSupportedSpendType = exports.isSupportedDepositType = exports.scriptTypes = exports.scriptTypesSingleSig = void 0;
const utxolib = require("../../../src");
const outputScripts_1 = require("../../../src/bitgo/outputScripts");
const testutil_1 = require("../../../src/testutil");
const bitgo_1 = require("../../../src/bitgo");
const bitgo_2 = require("../../../src/bitgo");
exports.scriptTypesSingleSig = ['p2pkh', 'p2wkh'];
exports.scriptTypes = [...exports.scriptTypesSingleSig, ...outputScripts_1.scriptTypes2Of3];
function isSupportedDepositType(network, scriptType) {
    if (scriptType === 'p2pkh') {
        return true;
    }
    if (scriptType === 'p2wkh') {
        return utxolib.supportsSegwit(network);
    }
    return (0, outputScripts_1.isSupportedScriptType)(network, scriptType);
}
exports.isSupportedDepositType = isSupportedDepositType;
function isSupportedSpendType(network, scriptType) {
    return (0, outputScripts_1.isScriptType2Of3)(scriptType) && (0, outputScripts_1.isSupportedScriptType)(network, scriptType);
}
exports.isSupportedSpendType = isSupportedSpendType;
/**
 *
 * @param keys - Pubkeys to use for generating the address.
 *               If scriptType is single-sig, the first key will be used.
 * @param scriptType
 * @param network
 * @return {Buffer} scriptPubKey
 */
function createScriptPubKey(keys, scriptType, network) {
    const pubkeys = keys.map((k) => k.publicKey);
    switch (scriptType) {
        case 'p2sh':
        case 'p2shP2wsh':
        case 'p2wsh':
        case 'p2tr':
        case 'p2trMusig2':
            return (0, outputScripts_1.createOutputScript2of3)(pubkeys, scriptType).scriptPubKey;
        case 'p2pkh':
            return utxolib.payments.p2pkh({ pubkey: keys[0].publicKey }).output;
        case 'p2wkh':
            return utxolib.payments.p2wpkh({ pubkey: keys[0].publicKey }).output;
        default:
            throw new Error(`unsupported output type ${scriptType}`);
    }
}
exports.createScriptPubKey = createScriptPubKey;
function createSpendTransactionFromPrevOutputs(keys, scriptType, prevOutputs, recipientScript, network, { signKeys = [keys[0], keys[2]], version, amountType, } = {}) {
    if (signKeys.length !== 1 && signKeys.length !== 2) {
        throw new Error(`signKeys length must be 1 or 2`);
    }
    const txBuilder = (0, bitgo_1.createTransactionBuilderForNetwork)(network, { version });
    prevOutputs.forEach(({ txid, vout, script, value }, i) => {
        txBuilder.addInput(txid, vout, undefined, script, value);
    });
    const inputSum = prevOutputs.reduce((sum, { value }) => sum + BigInt(value), BigInt(0));
    const fee = network === utxolib.networks.dogecoinTest ? BigInt(1000000) : BigInt(1000);
    const outputValue = inputSum - fee;
    txBuilder.addOutput(recipientScript, (amountType === 'number' ? Number(outputValue) : outputValue));
    const publicKeys = keys.map((k) => k.publicKey);
    if (!(0, bitgo_1.isTriple)(publicKeys)) {
        throw new Error();
    }
    prevOutputs.forEach(({ value }, vin) => {
        signKeys.forEach((key) => {
            (0, bitgo_1.signInput2Of3)(txBuilder, vin, scriptType, publicKeys, key, (0, testutil_1.getDefaultCosigner)(publicKeys, key.publicKey), value);
        });
    });
    if (signKeys.length === 1) {
        return txBuilder.buildIncomplete();
    }
    return txBuilder.build();
}
exports.createSpendTransactionFromPrevOutputs = createSpendTransactionFromPrevOutputs;
function createSpendTransaction(keys, scriptType, inputTxs, recipientScript, network, version, amountType) {
    const matches = inputTxs
        .map((inputTxBuffer) => {
        const inputTx = (0, bitgo_1.createTransactionFromBuffer)(inputTxBuffer, network, { amountType });
        const { scriptPubKey } = (0, outputScripts_1.createOutputScript2of3)(keys.map((k) => k.publicKey), scriptType);
        return inputTx.outs
            .map((o, vout) => {
            if (!scriptPubKey.equals(o.script)) {
                return;
            }
            return {
                txid: inputTx.getId(),
                vout,
                value: o.value,
                script: o.script,
            };
        })
            .filter((v) => v !== undefined);
    })
        .reduce((all, matches) => [...all, ...matches]);
    if (!matches.length) {
        throw new Error(`could not find matching outputs in funding transaction`);
    }
    return createSpendTransactionFromPrevOutputs(keys, scriptType, matches, recipientScript, network, {
        version,
        amountType,
    });
}
exports.createSpendTransaction = createSpendTransaction;
function createPsbtSpendTransactionFromPrevTx(rootWalletKeys, unspents, network, signers = ['user', 'bitgo'], version) {
    const psbt = (0, bitgo_1.createPsbtForNetwork)({ network }, { version });
    unspents.forEach((u, index) => {
        (0, bitgo_1.addWalletUnspentToPsbt)(psbt, u, rootWalletKeys, signers[0], signers[1]);
    });
    const inputSum = unspents.reduce((sum, { value }) => sum + BigInt(value), BigInt(0));
    const fee = network === utxolib.networks.dogecoinTest ? BigInt(1000000) : BigInt(1000);
    const outputValue = inputSum - fee;
    (0, bitgo_1.addWalletOutputToPsbt)(psbt, rootWalletKeys, unspents[0].chain, unspents[0].index, outputValue);
    signers.forEach((keyName) => {
        psbt.setAllInputsMusig2NonceHD(rootWalletKeys[keyName]);
    });
    signers.forEach((keyName) => {
        psbt.signAllInputsHD(rootWalletKeys[keyName]);
    });
    if (!psbt.validateSignaturesOfAllInputs()) {
        throw new Error('psbt sig validation fails');
    }
    psbt.finalizeAllInputs();
    return psbt.extractTransaction();
}
exports.createPsbtSpendTransactionFromPrevTx = createPsbtSpendTransactionFromPrevTx;
function createPsbtSpendTransaction({ rootWalletKeys, signers, chain, index, inputTxs, network, version, amountType, }) {
    const walletKeys = rootWalletKeys.deriveForChainAndIndex(chain, index);
    const { scriptPubKey } = (0, outputScripts_1.createOutputScript2of3)(walletKeys.publicKeys, (0, bitgo_2.scriptTypeForChain)(chain));
    const matches = inputTxs
        .map((inputTxBuffer) => {
        const inputTx = (0, bitgo_1.createTransactionFromBuffer)(inputTxBuffer, network, { amountType: 'bigint' });
        return inputTx.outs
            .map((o, vout) => {
            if (!scriptPubKey.equals(o.script)) {
                return;
            }
            return { chain, index, ...(0, bitgo_1.fromOutputWithPrevTx)(inputTx, vout) };
        })
            .filter((v) => v !== undefined);
    })
        .reduce((all, matches) => [...all, ...matches]);
    if (!matches.length) {
        throw new Error(`could not find matching outputs in funding transaction`);
    }
    const tx = createPsbtSpendTransactionFromPrevTx(rootWalletKeys, matches, network, signers, version);
    return tx.clone(amountType);
}
exports.createPsbtSpendTransaction = createPsbtSpendTransaction;
/**
 * @returns BIP32 hardcoded index for p2trMusig2 spend type. 0 for key path and 100 for script path.
 * For same fixture key triple and script type (p2trMusig2),
 * we need 2 different deposit and spend tx fixtures.
 */
function getP2trMusig2Index(spendType) {
    return spendType === 'keyPath' ? 0 : 100;
}
exports.getP2trMusig2Index = getP2trMusig2Index;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib3V0cHV0U2NyaXB0cy51dGlsLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vdGVzdC9pbnRlZ3JhdGlvbl9sb2NhbF9ycGMvZ2VuZXJhdGUvb3V0cHV0U2NyaXB0cy51dGlsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUVBLHdDQUF3QztBQUN4QyxvRUFNMEM7QUFDMUMsb0RBQXNFO0FBRXRFLDhDQWdCNEI7QUFDNUIsOENBQXdEO0FBRTNDLFFBQUEsb0JBQW9CLEdBQUcsQ0FBQyxPQUFPLEVBQUUsT0FBTyxDQUFVLENBQUM7QUFHbkQsUUFBQSxXQUFXLEdBQUcsQ0FBQyxHQUFHLDRCQUFvQixFQUFFLEdBQUcsK0JBQWUsQ0FBQyxDQUFDO0FBS3pFLFNBQWdCLHNCQUFzQixDQUFDLE9BQWdCLEVBQUUsVUFBc0I7SUFDN0UsSUFBSSxVQUFVLEtBQUssT0FBTyxFQUFFO1FBQzFCLE9BQU8sSUFBSSxDQUFDO0tBQ2I7SUFFRCxJQUFJLFVBQVUsS0FBSyxPQUFPLEVBQUU7UUFDMUIsT0FBTyxPQUFPLENBQUMsY0FBYyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0tBQ3hDO0lBRUQsT0FBTyxJQUFBLHFDQUFxQixFQUFDLE9BQU8sRUFBRSxVQUFVLENBQUMsQ0FBQztBQUNwRCxDQUFDO0FBVkQsd0RBVUM7QUFFRCxTQUFnQixvQkFBb0IsQ0FBQyxPQUFnQixFQUFFLFVBQXNCO0lBQzNFLE9BQU8sSUFBQSxnQ0FBZ0IsRUFBQyxVQUFVLENBQUMsSUFBSSxJQUFBLHFDQUFxQixFQUFDLE9BQU8sRUFBRSxVQUFVLENBQUMsQ0FBQztBQUNwRixDQUFDO0FBRkQsb0RBRUM7QUFFRDs7Ozs7OztHQU9HO0FBQ0gsU0FBZ0Isa0JBQWtCLENBQUMsSUFBZSxFQUFFLFVBQXNCLEVBQUUsT0FBZ0I7SUFDMUYsTUFBTSxPQUFPLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDO0lBRTdDLFFBQVEsVUFBVSxFQUFFO1FBQ2xCLEtBQUssTUFBTSxDQUFDO1FBQ1osS0FBSyxXQUFXLENBQUM7UUFDakIsS0FBSyxPQUFPLENBQUM7UUFDYixLQUFLLE1BQU0sQ0FBQztRQUNaLEtBQUssWUFBWTtZQUNmLE9BQU8sSUFBQSxzQ0FBc0IsRUFBQyxPQUFPLEVBQUUsVUFBVSxDQUFDLENBQUMsWUFBWSxDQUFDO1FBQ2xFLEtBQUssT0FBTztZQUNWLE9BQU8sT0FBTyxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsRUFBRSxNQUFNLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsRUFBRSxDQUFDLENBQUMsTUFBZ0IsQ0FBQztRQUNoRixLQUFLLE9BQU87WUFDVixPQUFPLE9BQU8sQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLEVBQUUsTUFBTSxFQUFFLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLEVBQUUsQ0FBQyxDQUFDLE1BQWdCLENBQUM7UUFDakY7WUFDRSxNQUFNLElBQUksS0FBSyxDQUFDLDJCQUEyQixVQUFVLEVBQUUsQ0FBQyxDQUFDO0tBQzVEO0FBQ0gsQ0FBQztBQWpCRCxnREFpQkM7QUFFRCxTQUFnQixxQ0FBcUMsQ0FDbkQsSUFBZSxFQUNmLFVBQTBCLEVBQzFCLFdBQStDLEVBQy9DLGVBQXVCLEVBQ3ZCLE9BQWdCLEVBQ2hCLEVBQ0UsUUFBUSxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUM3QixPQUFPLEVBQ1AsVUFBVSxNQUM2RSxFQUFFO0lBRTNGLElBQUksUUFBUSxDQUFDLE1BQU0sS0FBSyxDQUFDLElBQUksUUFBUSxDQUFDLE1BQU0sS0FBSyxDQUFDLEVBQUU7UUFDbEQsTUFBTSxJQUFJLEtBQUssQ0FBQyxnQ0FBZ0MsQ0FBQyxDQUFDO0tBQ25EO0lBRUQsTUFBTSxTQUFTLEdBQUcsSUFBQSwwQ0FBa0MsRUFBVSxPQUFPLEVBQUUsRUFBRSxPQUFPLEVBQUUsQ0FBQyxDQUFDO0lBRXBGLFdBQVcsQ0FBQyxPQUFPLENBQUMsQ0FBQyxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsTUFBTSxFQUFFLEtBQUssRUFBRSxFQUFFLENBQUMsRUFBRSxFQUFFO1FBQ3ZELFNBQVMsQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUFFLElBQUksRUFBRSxTQUFTLEVBQUUsTUFBTSxFQUFFLEtBQUssQ0FBQyxDQUFDO0lBQzNELENBQUMsQ0FBQyxDQUFDO0lBRUgsTUFBTSxRQUFRLEdBQUcsV0FBVyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEdBQUcsRUFBRSxFQUFFLEtBQUssRUFBRSxFQUFFLEVBQUUsQ0FBQyxHQUFHLEdBQUcsTUFBTSxDQUFDLEtBQUssQ0FBQyxFQUFFLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ3hGLE1BQU0sR0FBRyxHQUFHLE9BQU8sS0FBSyxPQUFPLENBQUMsUUFBUSxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLE9BQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsSUFBSyxDQUFDLENBQUM7SUFDMUYsTUFBTSxXQUFXLEdBQUcsUUFBUSxHQUFHLEdBQUcsQ0FBQztJQUVuQyxTQUFTLENBQUMsU0FBUyxDQUFDLGVBQWUsRUFBRSxDQUFDLFVBQVUsS0FBSyxRQUFRLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLENBQUMsV0FBVyxDQUFZLENBQUMsQ0FBQztJQUUvRyxNQUFNLFVBQVUsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUM7SUFDaEQsSUFBSSxDQUFDLElBQUEsZ0JBQVEsRUFBQyxVQUFVLENBQUMsRUFBRTtRQUN6QixNQUFNLElBQUksS0FBSyxFQUFFLENBQUM7S0FDbkI7SUFFRCxXQUFXLENBQUMsT0FBTyxDQUFDLENBQUMsRUFBRSxLQUFLLEVBQUUsRUFBRSxHQUFHLEVBQUUsRUFBRTtRQUNyQyxRQUFRLENBQUMsT0FBTyxDQUFDLENBQUMsR0FBRyxFQUFFLEVBQUU7WUFDdkIsSUFBQSxxQkFBYSxFQUFDLFNBQVMsRUFBRSxHQUFHLEVBQUUsVUFBVSxFQUFFLFVBQVUsRUFBRSxHQUFHLEVBQUUsSUFBQSw2QkFBa0IsRUFBQyxVQUFVLEVBQUUsR0FBRyxDQUFDLFNBQVMsQ0FBQyxFQUFFLEtBQUssQ0FBQyxDQUFDO1FBQ25ILENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQyxDQUFDLENBQUM7SUFFSCxJQUFJLFFBQVEsQ0FBQyxNQUFNLEtBQUssQ0FBQyxFQUFFO1FBQ3pCLE9BQU8sU0FBUyxDQUFDLGVBQWUsRUFBOEIsQ0FBQztLQUNoRTtJQUNELE9BQU8sU0FBUyxDQUFDLEtBQUssRUFBOEIsQ0FBQztBQUN2RCxDQUFDO0FBM0NELHNGQTJDQztBQUVELFNBQWdCLHNCQUFzQixDQUNwQyxJQUFlLEVBQ2YsVUFBMEIsRUFDMUIsUUFBa0IsRUFDbEIsZUFBdUIsRUFDdkIsT0FBZ0IsRUFDaEIsT0FBZ0IsRUFDaEIsVUFBZ0M7SUFFaEMsTUFBTSxPQUFPLEdBQXVDLFFBQVE7U0FDekQsR0FBRyxDQUFDLENBQUMsYUFBYSxFQUFzQyxFQUFFO1FBQ3pELE1BQU0sT0FBTyxHQUFHLElBQUEsbUNBQTJCLEVBQVUsYUFBYSxFQUFFLE9BQU8sRUFBRSxFQUFFLFVBQVUsRUFBRSxDQUFDLENBQUM7UUFFN0YsTUFBTSxFQUFFLFlBQVksRUFBRSxHQUFHLElBQUEsc0NBQXNCLEVBQzdDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsRUFDNUIsVUFBNEIsQ0FDN0IsQ0FBQztRQUVGLE9BQU8sT0FBTyxDQUFDLElBQUk7YUFDaEIsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLElBQUksRUFBZ0QsRUFBRTtZQUM3RCxJQUFJLENBQUMsWUFBWSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLEVBQUU7Z0JBQ2xDLE9BQU87YUFDUjtZQUNELE9BQU87Z0JBQ0wsSUFBSSxFQUFFLE9BQU8sQ0FBQyxLQUFLLEVBQUU7Z0JBQ3JCLElBQUk7Z0JBQ0osS0FBSyxFQUFFLENBQUMsQ0FBQyxLQUFLO2dCQUNkLE1BQU0sRUFBRSxDQUFDLENBQUMsTUFBTTthQUNqQixDQUFDO1FBQ0osQ0FBQyxDQUFDO2FBQ0QsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUF1QyxFQUFFLENBQUMsQ0FBQyxLQUFLLFNBQVMsQ0FBQyxDQUFDO0lBQ3pFLENBQUMsQ0FBQztTQUNELE1BQU0sQ0FBQyxDQUFDLEdBQUcsRUFBRSxPQUFPLEVBQUUsRUFBRSxDQUFDLENBQUMsR0FBRyxHQUFHLEVBQUUsR0FBRyxPQUFPLENBQUMsQ0FBQyxDQUFDO0lBRWxELElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxFQUFFO1FBQ25CLE1BQU0sSUFBSSxLQUFLLENBQUMsd0RBQXdELENBQUMsQ0FBQztLQUMzRTtJQUVELE9BQU8scUNBQXFDLENBQVUsSUFBSSxFQUFFLFVBQVUsRUFBRSxPQUFPLEVBQUUsZUFBZSxFQUFFLE9BQU8sRUFBRTtRQUN6RyxPQUFPO1FBQ1AsVUFBVTtLQUNYLENBQUMsQ0FBQztBQUNMLENBQUM7QUExQ0Qsd0RBMENDO0FBRUQsU0FBZ0Isb0NBQW9DLENBQ2xELGNBQThCLEVBQzlCLFFBQWlDLEVBQ2pDLE9BQWdCLEVBQ2hCLFVBQTBCLENBQUMsTUFBTSxFQUFFLE9BQU8sQ0FBQyxFQUMzQyxPQUFnQjtJQUVoQixNQUFNLElBQUksR0FBRyxJQUFBLDRCQUFvQixFQUFDLEVBQUUsT0FBTyxFQUFFLEVBQUUsRUFBRSxPQUFPLEVBQUUsQ0FBQyxDQUFDO0lBRTVELFFBQVEsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEVBQUUsS0FBSyxFQUFFLEVBQUU7UUFDNUIsSUFBQSw4QkFBc0IsRUFBQyxJQUFJLEVBQUUsQ0FBQyxFQUFFLGNBQWMsRUFBRSxPQUFPLENBQUMsQ0FBQyxDQUFDLEVBQUUsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDMUUsQ0FBQyxDQUFDLENBQUM7SUFFSCxNQUFNLFFBQVEsR0FBRyxRQUFRLENBQUMsTUFBTSxDQUFDLENBQUMsR0FBRyxFQUFFLEVBQUUsS0FBSyxFQUFFLEVBQUUsRUFBRSxDQUFDLEdBQUcsR0FBRyxNQUFNLENBQUMsS0FBSyxDQUFDLEVBQUUsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDckYsTUFBTSxHQUFHLEdBQUcsT0FBTyxLQUFLLE9BQU8sQ0FBQyxRQUFRLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsT0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxJQUFLLENBQUMsQ0FBQztJQUMxRixNQUFNLFdBQVcsR0FBRyxRQUFRLEdBQUcsR0FBRyxDQUFDO0lBRW5DLElBQUEsNkJBQXFCLEVBQUMsSUFBSSxFQUFFLGNBQWMsRUFBRSxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxFQUFFLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLEVBQUUsV0FBVyxDQUFDLENBQUM7SUFFL0YsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDLE9BQU8sRUFBRSxFQUFFO1FBQzFCLElBQUksQ0FBQyx5QkFBeUIsQ0FBQyxjQUFjLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQztJQUMxRCxDQUFDLENBQUMsQ0FBQztJQUVILE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQyxPQUFPLEVBQUUsRUFBRTtRQUMxQixJQUFJLENBQUMsZUFBZSxDQUFDLGNBQWMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO0lBQ2hELENBQUMsQ0FBQyxDQUFDO0lBRUgsSUFBSSxDQUFDLElBQUksQ0FBQyw2QkFBNkIsRUFBRSxFQUFFO1FBQ3pDLE1BQU0sSUFBSSxLQUFLLENBQUMsMkJBQTJCLENBQUMsQ0FBQztLQUM5QztJQUVELElBQUksQ0FBQyxpQkFBaUIsRUFBRSxDQUFDO0lBQ3pCLE9BQU8sSUFBSSxDQUFDLGtCQUFrQixFQUFFLENBQUM7QUFDbkMsQ0FBQztBQWpDRCxvRkFpQ0M7QUFFRCxTQUFnQiwwQkFBMEIsQ0FBMkMsRUFDbkYsY0FBYyxFQUNkLE9BQU8sRUFDUCxLQUFLLEVBQ0wsS0FBSyxFQUNMLFFBQVEsRUFDUixPQUFPLEVBQ1AsT0FBTyxFQUNQLFVBQVUsR0FVWDtJQUNDLE1BQU0sVUFBVSxHQUFHLGNBQWMsQ0FBQyxzQkFBc0IsQ0FBQyxLQUFLLEVBQUUsS0FBSyxDQUFDLENBQUM7SUFDdkUsTUFBTSxFQUFFLFlBQVksRUFBRSxHQUFHLElBQUEsc0NBQXNCLEVBQUMsVUFBVSxDQUFDLFVBQVUsRUFBRSxJQUFBLDBCQUFrQixFQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7SUFFbEcsTUFBTSxPQUFPLEdBQUcsUUFBUTtTQUNyQixHQUFHLENBQUMsQ0FBQyxhQUFhLEVBQTJCLEVBQUU7UUFDOUMsTUFBTSxPQUFPLEdBQUcsSUFBQSxtQ0FBMkIsRUFBUyxhQUFhLEVBQUUsT0FBTyxFQUFFLEVBQUUsVUFBVSxFQUFFLFFBQVEsRUFBRSxDQUFDLENBQUM7UUFFdEcsT0FBTyxPQUFPLENBQUMsSUFBSTthQUNoQixHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsSUFBSSxFQUFxQyxFQUFFO1lBQ2xELElBQUksQ0FBQyxZQUFZLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsRUFBRTtnQkFDbEMsT0FBTzthQUNSO1lBQ0QsT0FBTyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsR0FBRyxJQUFBLDRCQUFvQixFQUFTLE9BQU8sRUFBRSxJQUFJLENBQUMsRUFBRSxDQUFDO1FBQzFFLENBQUMsQ0FBQzthQUNELE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBOEIsRUFBRSxDQUFDLENBQUMsS0FBSyxTQUFTLENBQUMsQ0FBQztJQUNoRSxDQUFDLENBQUM7U0FDRCxNQUFNLENBQUMsQ0FBQyxHQUFHLEVBQUUsT0FBTyxFQUFFLEVBQUUsQ0FBQyxDQUFDLEdBQUcsR0FBRyxFQUFFLEdBQUcsT0FBTyxDQUFDLENBQUMsQ0FBQztJQUVsRCxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sRUFBRTtRQUNuQixNQUFNLElBQUksS0FBSyxDQUFDLHdEQUF3RCxDQUFDLENBQUM7S0FDM0U7SUFFRCxNQUFNLEVBQUUsR0FBRyxvQ0FBb0MsQ0FBQyxjQUFjLEVBQUUsT0FBTyxFQUFFLE9BQU8sRUFBRSxPQUFPLEVBQUUsT0FBTyxDQUFDLENBQUM7SUFDcEcsT0FBTyxFQUFFLENBQUMsS0FBSyxDQUFDLFVBQVUsQ0FBeUIsQ0FBQztBQUN0RCxDQUFDO0FBM0NELGdFQTJDQztBQUVEOzs7O0dBSUc7QUFDSCxTQUFnQixrQkFBa0IsQ0FBQyxTQUFtQztJQUNwRSxPQUFPLFNBQVMsS0FBSyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDO0FBQzNDLENBQUM7QUFGRCxnREFFQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEJJUDMySW50ZXJmYWNlIH0gZnJvbSAnYmlwMzInO1xyXG5pbXBvcnQgeyBUcmFuc2FjdGlvbiwgVHhPdXRwdXQgfSBmcm9tICdiaXRjb2luanMtbGliJztcclxuaW1wb3J0ICogYXMgdXR4b2xpYiBmcm9tICcuLi8uLi8uLi9zcmMnO1xyXG5pbXBvcnQge1xyXG4gIGNyZWF0ZU91dHB1dFNjcmlwdDJvZjMsXHJcbiAgaXNTY3JpcHRUeXBlMk9mMyxcclxuICBpc1N1cHBvcnRlZFNjcmlwdFR5cGUsXHJcbiAgU2NyaXB0VHlwZTJPZjMsXHJcbiAgc2NyaXB0VHlwZXMyT2YzLFxyXG59IGZyb20gJy4uLy4uLy4uL3NyYy9iaXRnby9vdXRwdXRTY3JpcHRzJztcclxuaW1wb3J0IHsgZ2V0RGVmYXVsdENvc2lnbmVyLCBLZXlUcmlwbGUgfSBmcm9tICcuLi8uLi8uLi9zcmMvdGVzdHV0aWwnO1xyXG5cclxuaW1wb3J0IHtcclxuICBpc1RyaXBsZSxcclxuICBjcmVhdGVUcmFuc2FjdGlvbkJ1aWxkZXJGb3JOZXR3b3JrLFxyXG4gIGNyZWF0ZVRyYW5zYWN0aW9uRnJvbUJ1ZmZlcixcclxuICBzaWduSW5wdXQyT2YzLFxyXG4gIFR4T3V0UG9pbnQsXHJcbiAgVXR4b1RyYW5zYWN0aW9uLFxyXG4gIGNyZWF0ZVBzYnRGb3JOZXR3b3JrLFxyXG4gIENoYWluQ29kZSxcclxuICBSb290V2FsbGV0S2V5cyxcclxuICBhZGRXYWxsZXRVbnNwZW50VG9Qc2J0LFxyXG4gIGZyb21PdXRwdXRXaXRoUHJldlR4LFxyXG4gIFdhbGxldFVuc3BlbnQsXHJcbiAgS2V5TmFtZSxcclxuICBhZGRXYWxsZXRPdXRwdXRUb1BzYnQsXHJcbiAgVHVwbGUsXHJcbn0gZnJvbSAnLi4vLi4vLi4vc3JjL2JpdGdvJztcclxuaW1wb3J0IHsgc2NyaXB0VHlwZUZvckNoYWluIH0gZnJvbSAnLi4vLi4vLi4vc3JjL2JpdGdvJztcclxuXHJcbmV4cG9ydCBjb25zdCBzY3JpcHRUeXBlc1NpbmdsZVNpZyA9IFsncDJwa2gnLCAncDJ3a2gnXSBhcyBjb25zdDtcclxuZXhwb3J0IHR5cGUgU2NyaXB0VHlwZVNpbmdsZVNpZyA9ICh0eXBlb2Ygc2NyaXB0VHlwZXNTaW5nbGVTaWcpW251bWJlcl07XHJcblxyXG5leHBvcnQgY29uc3Qgc2NyaXB0VHlwZXMgPSBbLi4uc2NyaXB0VHlwZXNTaW5nbGVTaWcsIC4uLnNjcmlwdFR5cGVzMk9mM107XHJcbmV4cG9ydCB0eXBlIFNjcmlwdFR5cGUgPSBTY3JpcHRUeXBlMk9mMyB8IFNjcmlwdFR5cGVTaW5nbGVTaWc7XHJcblxyXG50eXBlIE5ldHdvcmsgPSB1dHhvbGliLk5ldHdvcms7XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gaXNTdXBwb3J0ZWREZXBvc2l0VHlwZShuZXR3b3JrOiBOZXR3b3JrLCBzY3JpcHRUeXBlOiBTY3JpcHRUeXBlKTogYm9vbGVhbiB7XHJcbiAgaWYgKHNjcmlwdFR5cGUgPT09ICdwMnBraCcpIHtcclxuICAgIHJldHVybiB0cnVlO1xyXG4gIH1cclxuXHJcbiAgaWYgKHNjcmlwdFR5cGUgPT09ICdwMndraCcpIHtcclxuICAgIHJldHVybiB1dHhvbGliLnN1cHBvcnRzU2Vnd2l0KG5ldHdvcmspO1xyXG4gIH1cclxuXHJcbiAgcmV0dXJuIGlzU3VwcG9ydGVkU2NyaXB0VHlwZShuZXR3b3JrLCBzY3JpcHRUeXBlKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGlzU3VwcG9ydGVkU3BlbmRUeXBlKG5ldHdvcms6IE5ldHdvcmssIHNjcmlwdFR5cGU6IFNjcmlwdFR5cGUpOiBib29sZWFuIHtcclxuICByZXR1cm4gaXNTY3JpcHRUeXBlMk9mMyhzY3JpcHRUeXBlKSAmJiBpc1N1cHBvcnRlZFNjcmlwdFR5cGUobmV0d29yaywgc2NyaXB0VHlwZSk7XHJcbn1cclxuXHJcbi8qKlxyXG4gKlxyXG4gKiBAcGFyYW0ga2V5cyAtIFB1YmtleXMgdG8gdXNlIGZvciBnZW5lcmF0aW5nIHRoZSBhZGRyZXNzLlxyXG4gKiAgICAgICAgICAgICAgIElmIHNjcmlwdFR5cGUgaXMgc2luZ2xlLXNpZywgdGhlIGZpcnN0IGtleSB3aWxsIGJlIHVzZWQuXHJcbiAqIEBwYXJhbSBzY3JpcHRUeXBlXHJcbiAqIEBwYXJhbSBuZXR3b3JrXHJcbiAqIEByZXR1cm4ge0J1ZmZlcn0gc2NyaXB0UHViS2V5XHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlU2NyaXB0UHViS2V5KGtleXM6IEtleVRyaXBsZSwgc2NyaXB0VHlwZTogU2NyaXB0VHlwZSwgbmV0d29yazogTmV0d29yayk6IEJ1ZmZlciB7XHJcbiAgY29uc3QgcHVia2V5cyA9IGtleXMubWFwKChrKSA9PiBrLnB1YmxpY0tleSk7XHJcblxyXG4gIHN3aXRjaCAoc2NyaXB0VHlwZSkge1xyXG4gICAgY2FzZSAncDJzaCc6XHJcbiAgICBjYXNlICdwMnNoUDJ3c2gnOlxyXG4gICAgY2FzZSAncDJ3c2gnOlxyXG4gICAgY2FzZSAncDJ0cic6XHJcbiAgICBjYXNlICdwMnRyTXVzaWcyJzpcclxuICAgICAgcmV0dXJuIGNyZWF0ZU91dHB1dFNjcmlwdDJvZjMocHVia2V5cywgc2NyaXB0VHlwZSkuc2NyaXB0UHViS2V5O1xyXG4gICAgY2FzZSAncDJwa2gnOlxyXG4gICAgICByZXR1cm4gdXR4b2xpYi5wYXltZW50cy5wMnBraCh7IHB1YmtleToga2V5c1swXS5wdWJsaWNLZXkgfSkub3V0cHV0IGFzIEJ1ZmZlcjtcclxuICAgIGNhc2UgJ3Ayd2toJzpcclxuICAgICAgcmV0dXJuIHV0eG9saWIucGF5bWVudHMucDJ3cGtoKHsgcHVia2V5OiBrZXlzWzBdLnB1YmxpY0tleSB9KS5vdXRwdXQgYXMgQnVmZmVyO1xyXG4gICAgZGVmYXVsdDpcclxuICAgICAgdGhyb3cgbmV3IEVycm9yKGB1bnN1cHBvcnRlZCBvdXRwdXQgdHlwZSAke3NjcmlwdFR5cGV9YCk7XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlU3BlbmRUcmFuc2FjdGlvbkZyb21QcmV2T3V0cHV0czxUTnVtYmVyIGV4dGVuZHMgbnVtYmVyIHwgYmlnaW50PihcclxuICBrZXlzOiBLZXlUcmlwbGUsXHJcbiAgc2NyaXB0VHlwZTogU2NyaXB0VHlwZTJPZjMsXHJcbiAgcHJldk91dHB1dHM6IChUeE91dFBvaW50ICYgVHhPdXRwdXQ8VE51bWJlcj4pW10sXHJcbiAgcmVjaXBpZW50U2NyaXB0OiBCdWZmZXIsXHJcbiAgbmV0d29yazogTmV0d29yayxcclxuICB7XHJcbiAgICBzaWduS2V5cyA9IFtrZXlzWzBdLCBrZXlzWzJdXSxcclxuICAgIHZlcnNpb24sXHJcbiAgICBhbW91bnRUeXBlLFxyXG4gIH06IHsgc2lnbktleXM/OiBCSVAzMkludGVyZmFjZVtdOyB2ZXJzaW9uPzogbnVtYmVyOyBhbW91bnRUeXBlPzogJ251bWJlcicgfCAnYmlnaW50JyB9ID0ge31cclxuKTogVXR4b1RyYW5zYWN0aW9uPFROdW1iZXI+IHtcclxuICBpZiAoc2lnbktleXMubGVuZ3RoICE9PSAxICYmIHNpZ25LZXlzLmxlbmd0aCAhPT0gMikge1xyXG4gICAgdGhyb3cgbmV3IEVycm9yKGBzaWduS2V5cyBsZW5ndGggbXVzdCBiZSAxIG9yIDJgKTtcclxuICB9XHJcblxyXG4gIGNvbnN0IHR4QnVpbGRlciA9IGNyZWF0ZVRyYW5zYWN0aW9uQnVpbGRlckZvck5ldHdvcms8VE51bWJlcj4obmV0d29yaywgeyB2ZXJzaW9uIH0pO1xyXG5cclxuICBwcmV2T3V0cHV0cy5mb3JFYWNoKCh7IHR4aWQsIHZvdXQsIHNjcmlwdCwgdmFsdWUgfSwgaSkgPT4ge1xyXG4gICAgdHhCdWlsZGVyLmFkZElucHV0KHR4aWQsIHZvdXQsIHVuZGVmaW5lZCwgc2NyaXB0LCB2YWx1ZSk7XHJcbiAgfSk7XHJcblxyXG4gIGNvbnN0IGlucHV0U3VtID0gcHJldk91dHB1dHMucmVkdWNlKChzdW0sIHsgdmFsdWUgfSkgPT4gc3VtICsgQmlnSW50KHZhbHVlKSwgQmlnSW50KDApKTtcclxuICBjb25zdCBmZWUgPSBuZXR3b3JrID09PSB1dHhvbGliLm5ldHdvcmtzLmRvZ2Vjb2luVGVzdCA/IEJpZ0ludCgxXzAwMF8wMDApIDogQmlnSW50KDFfMDAwKTtcclxuICBjb25zdCBvdXRwdXRWYWx1ZSA9IGlucHV0U3VtIC0gZmVlO1xyXG5cclxuICB0eEJ1aWxkZXIuYWRkT3V0cHV0KHJlY2lwaWVudFNjcmlwdCwgKGFtb3VudFR5cGUgPT09ICdudW1iZXInID8gTnVtYmVyKG91dHB1dFZhbHVlKSA6IG91dHB1dFZhbHVlKSBhcyBUTnVtYmVyKTtcclxuXHJcbiAgY29uc3QgcHVibGljS2V5cyA9IGtleXMubWFwKChrKSA9PiBrLnB1YmxpY0tleSk7XHJcbiAgaWYgKCFpc1RyaXBsZShwdWJsaWNLZXlzKSkge1xyXG4gICAgdGhyb3cgbmV3IEVycm9yKCk7XHJcbiAgfVxyXG5cclxuICBwcmV2T3V0cHV0cy5mb3JFYWNoKCh7IHZhbHVlIH0sIHZpbikgPT4ge1xyXG4gICAgc2lnbktleXMuZm9yRWFjaCgoa2V5KSA9PiB7XHJcbiAgICAgIHNpZ25JbnB1dDJPZjModHhCdWlsZGVyLCB2aW4sIHNjcmlwdFR5cGUsIHB1YmxpY0tleXMsIGtleSwgZ2V0RGVmYXVsdENvc2lnbmVyKHB1YmxpY0tleXMsIGtleS5wdWJsaWNLZXkpLCB2YWx1ZSk7XHJcbiAgICB9KTtcclxuICB9KTtcclxuXHJcbiAgaWYgKHNpZ25LZXlzLmxlbmd0aCA9PT0gMSkge1xyXG4gICAgcmV0dXJuIHR4QnVpbGRlci5idWlsZEluY29tcGxldGUoKSBhcyBVdHhvVHJhbnNhY3Rpb248VE51bWJlcj47XHJcbiAgfVxyXG4gIHJldHVybiB0eEJ1aWxkZXIuYnVpbGQoKSBhcyBVdHhvVHJhbnNhY3Rpb248VE51bWJlcj47XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVTcGVuZFRyYW5zYWN0aW9uPFROdW1iZXIgZXh0ZW5kcyBudW1iZXIgfCBiaWdpbnQgPSBudW1iZXI+KFxyXG4gIGtleXM6IEtleVRyaXBsZSxcclxuICBzY3JpcHRUeXBlOiBTY3JpcHRUeXBlMk9mMyxcclxuICBpbnB1dFR4czogQnVmZmVyW10sXHJcbiAgcmVjaXBpZW50U2NyaXB0OiBCdWZmZXIsXHJcbiAgbmV0d29yazogTmV0d29yayxcclxuICB2ZXJzaW9uPzogbnVtYmVyLFxyXG4gIGFtb3VudFR5cGU/OiAnbnVtYmVyJyB8ICdiaWdpbnQnXHJcbik6IFRyYW5zYWN0aW9uPFROdW1iZXI+IHtcclxuICBjb25zdCBtYXRjaGVzOiAoVHhPdXRQb2ludCAmIFR4T3V0cHV0PFROdW1iZXI+KVtdID0gaW5wdXRUeHNcclxuICAgIC5tYXAoKGlucHV0VHhCdWZmZXIpOiAoVHhPdXRQb2ludCAmIFR4T3V0cHV0PFROdW1iZXI+KVtdID0+IHtcclxuICAgICAgY29uc3QgaW5wdXRUeCA9IGNyZWF0ZVRyYW5zYWN0aW9uRnJvbUJ1ZmZlcjxUTnVtYmVyPihpbnB1dFR4QnVmZmVyLCBuZXR3b3JrLCB7IGFtb3VudFR5cGUgfSk7XHJcblxyXG4gICAgICBjb25zdCB7IHNjcmlwdFB1YktleSB9ID0gY3JlYXRlT3V0cHV0U2NyaXB0Mm9mMyhcclxuICAgICAgICBrZXlzLm1hcCgoaykgPT4gay5wdWJsaWNLZXkpLFxyXG4gICAgICAgIHNjcmlwdFR5cGUgYXMgU2NyaXB0VHlwZTJPZjNcclxuICAgICAgKTtcclxuXHJcbiAgICAgIHJldHVybiBpbnB1dFR4Lm91dHNcclxuICAgICAgICAubWFwKChvLCB2b3V0KTogKFR4T3V0UG9pbnQgJiBUeE91dHB1dDxUTnVtYmVyPikgfCB1bmRlZmluZWQgPT4ge1xyXG4gICAgICAgICAgaWYgKCFzY3JpcHRQdWJLZXkuZXF1YWxzKG8uc2NyaXB0KSkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICB0eGlkOiBpbnB1dFR4LmdldElkKCksXHJcbiAgICAgICAgICAgIHZvdXQsXHJcbiAgICAgICAgICAgIHZhbHVlOiBvLnZhbHVlLFxyXG4gICAgICAgICAgICBzY3JpcHQ6IG8uc2NyaXB0LFxyXG4gICAgICAgICAgfTtcclxuICAgICAgICB9KVxyXG4gICAgICAgIC5maWx0ZXIoKHYpOiB2IGlzIFR4T3V0UG9pbnQgJiBUeE91dHB1dDxUTnVtYmVyPiA9PiB2ICE9PSB1bmRlZmluZWQpO1xyXG4gICAgfSlcclxuICAgIC5yZWR1Y2UoKGFsbCwgbWF0Y2hlcykgPT4gWy4uLmFsbCwgLi4ubWF0Y2hlc10pO1xyXG5cclxuICBpZiAoIW1hdGNoZXMubGVuZ3RoKSB7XHJcbiAgICB0aHJvdyBuZXcgRXJyb3IoYGNvdWxkIG5vdCBmaW5kIG1hdGNoaW5nIG91dHB1dHMgaW4gZnVuZGluZyB0cmFuc2FjdGlvbmApO1xyXG4gIH1cclxuXHJcbiAgcmV0dXJuIGNyZWF0ZVNwZW5kVHJhbnNhY3Rpb25Gcm9tUHJldk91dHB1dHM8VE51bWJlcj4oa2V5cywgc2NyaXB0VHlwZSwgbWF0Y2hlcywgcmVjaXBpZW50U2NyaXB0LCBuZXR3b3JrLCB7XHJcbiAgICB2ZXJzaW9uLFxyXG4gICAgYW1vdW50VHlwZSxcclxuICB9KTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVBzYnRTcGVuZFRyYW5zYWN0aW9uRnJvbVByZXZUeChcclxuICByb290V2FsbGV0S2V5czogUm9vdFdhbGxldEtleXMsXHJcbiAgdW5zcGVudHM6IFdhbGxldFVuc3BlbnQ8YmlnaW50PltdLFxyXG4gIG5ldHdvcms6IE5ldHdvcmssXHJcbiAgc2lnbmVyczogVHVwbGU8S2V5TmFtZT4gPSBbJ3VzZXInLCAnYml0Z28nXSxcclxuICB2ZXJzaW9uPzogbnVtYmVyXHJcbik6IFV0eG9UcmFuc2FjdGlvbjxiaWdpbnQ+IHtcclxuICBjb25zdCBwc2J0ID0gY3JlYXRlUHNidEZvck5ldHdvcmsoeyBuZXR3b3JrIH0sIHsgdmVyc2lvbiB9KTtcclxuXHJcbiAgdW5zcGVudHMuZm9yRWFjaCgodSwgaW5kZXgpID0+IHtcclxuICAgIGFkZFdhbGxldFVuc3BlbnRUb1BzYnQocHNidCwgdSwgcm9vdFdhbGxldEtleXMsIHNpZ25lcnNbMF0sIHNpZ25lcnNbMV0pO1xyXG4gIH0pO1xyXG5cclxuICBjb25zdCBpbnB1dFN1bSA9IHVuc3BlbnRzLnJlZHVjZSgoc3VtLCB7IHZhbHVlIH0pID0+IHN1bSArIEJpZ0ludCh2YWx1ZSksIEJpZ0ludCgwKSk7XHJcbiAgY29uc3QgZmVlID0gbmV0d29yayA9PT0gdXR4b2xpYi5uZXR3b3Jrcy5kb2dlY29pblRlc3QgPyBCaWdJbnQoMV8wMDBfMDAwKSA6IEJpZ0ludCgxXzAwMCk7XHJcbiAgY29uc3Qgb3V0cHV0VmFsdWUgPSBpbnB1dFN1bSAtIGZlZTtcclxuXHJcbiAgYWRkV2FsbGV0T3V0cHV0VG9Qc2J0KHBzYnQsIHJvb3RXYWxsZXRLZXlzLCB1bnNwZW50c1swXS5jaGFpbiwgdW5zcGVudHNbMF0uaW5kZXgsIG91dHB1dFZhbHVlKTtcclxuXHJcbiAgc2lnbmVycy5mb3JFYWNoKChrZXlOYW1lKSA9PiB7XHJcbiAgICBwc2J0LnNldEFsbElucHV0c011c2lnMk5vbmNlSEQocm9vdFdhbGxldEtleXNba2V5TmFtZV0pO1xyXG4gIH0pO1xyXG5cclxuICBzaWduZXJzLmZvckVhY2goKGtleU5hbWUpID0+IHtcclxuICAgIHBzYnQuc2lnbkFsbElucHV0c0hEKHJvb3RXYWxsZXRLZXlzW2tleU5hbWVdKTtcclxuICB9KTtcclxuXHJcbiAgaWYgKCFwc2J0LnZhbGlkYXRlU2lnbmF0dXJlc09mQWxsSW5wdXRzKCkpIHtcclxuICAgIHRocm93IG5ldyBFcnJvcigncHNidCBzaWcgdmFsaWRhdGlvbiBmYWlscycpO1xyXG4gIH1cclxuXHJcbiAgcHNidC5maW5hbGl6ZUFsbElucHV0cygpO1xyXG4gIHJldHVybiBwc2J0LmV4dHJhY3RUcmFuc2FjdGlvbigpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlUHNidFNwZW5kVHJhbnNhY3Rpb248VE51bWJlciBleHRlbmRzIG51bWJlciB8IGJpZ2ludCA9IG51bWJlcj4oe1xyXG4gIHJvb3RXYWxsZXRLZXlzLFxyXG4gIHNpZ25lcnMsXHJcbiAgY2hhaW4sXHJcbiAgaW5kZXgsXHJcbiAgaW5wdXRUeHMsXHJcbiAgbmV0d29yayxcclxuICB2ZXJzaW9uLFxyXG4gIGFtb3VudFR5cGUsXHJcbn06IHtcclxuICByb290V2FsbGV0S2V5czogUm9vdFdhbGxldEtleXM7XHJcbiAgc2lnbmVyczogVHVwbGU8S2V5TmFtZT47XHJcbiAgY2hhaW46IENoYWluQ29kZTtcclxuICBpbmRleDogbnVtYmVyO1xyXG4gIGlucHV0VHhzOiBCdWZmZXJbXTtcclxuICBuZXR3b3JrOiBOZXR3b3JrO1xyXG4gIHZlcnNpb24/OiBudW1iZXI7XHJcbiAgYW1vdW50VHlwZT86ICdudW1iZXInIHwgJ2JpZ2ludCc7XHJcbn0pOiBUcmFuc2FjdGlvbjxUTnVtYmVyPiB7XHJcbiAgY29uc3Qgd2FsbGV0S2V5cyA9IHJvb3RXYWxsZXRLZXlzLmRlcml2ZUZvckNoYWluQW5kSW5kZXgoY2hhaW4sIGluZGV4KTtcclxuICBjb25zdCB7IHNjcmlwdFB1YktleSB9ID0gY3JlYXRlT3V0cHV0U2NyaXB0Mm9mMyh3YWxsZXRLZXlzLnB1YmxpY0tleXMsIHNjcmlwdFR5cGVGb3JDaGFpbihjaGFpbikpO1xyXG5cclxuICBjb25zdCBtYXRjaGVzID0gaW5wdXRUeHNcclxuICAgIC5tYXAoKGlucHV0VHhCdWZmZXIpOiBXYWxsZXRVbnNwZW50PGJpZ2ludD5bXSA9PiB7XHJcbiAgICAgIGNvbnN0IGlucHV0VHggPSBjcmVhdGVUcmFuc2FjdGlvbkZyb21CdWZmZXI8YmlnaW50PihpbnB1dFR4QnVmZmVyLCBuZXR3b3JrLCB7IGFtb3VudFR5cGU6ICdiaWdpbnQnIH0pO1xyXG5cclxuICAgICAgcmV0dXJuIGlucHV0VHgub3V0c1xyXG4gICAgICAgIC5tYXAoKG8sIHZvdXQpOiBXYWxsZXRVbnNwZW50PGJpZ2ludD4gfCB1bmRlZmluZWQgPT4ge1xyXG4gICAgICAgICAgaWYgKCFzY3JpcHRQdWJLZXkuZXF1YWxzKG8uc2NyaXB0KSkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICByZXR1cm4geyBjaGFpbiwgaW5kZXgsIC4uLmZyb21PdXRwdXRXaXRoUHJldlR4PGJpZ2ludD4oaW5wdXRUeCwgdm91dCkgfTtcclxuICAgICAgICB9KVxyXG4gICAgICAgIC5maWx0ZXIoKHYpOiB2IGlzIFdhbGxldFVuc3BlbnQ8YmlnaW50PiA9PiB2ICE9PSB1bmRlZmluZWQpO1xyXG4gICAgfSlcclxuICAgIC5yZWR1Y2UoKGFsbCwgbWF0Y2hlcykgPT4gWy4uLmFsbCwgLi4ubWF0Y2hlc10pO1xyXG5cclxuICBpZiAoIW1hdGNoZXMubGVuZ3RoKSB7XHJcbiAgICB0aHJvdyBuZXcgRXJyb3IoYGNvdWxkIG5vdCBmaW5kIG1hdGNoaW5nIG91dHB1dHMgaW4gZnVuZGluZyB0cmFuc2FjdGlvbmApO1xyXG4gIH1cclxuXHJcbiAgY29uc3QgdHggPSBjcmVhdGVQc2J0U3BlbmRUcmFuc2FjdGlvbkZyb21QcmV2VHgocm9vdFdhbGxldEtleXMsIG1hdGNoZXMsIG5ldHdvcmssIHNpZ25lcnMsIHZlcnNpb24pO1xyXG4gIHJldHVybiB0eC5jbG9uZShhbW91bnRUeXBlKSBhcyBUcmFuc2FjdGlvbjxUTnVtYmVyPjtcclxufVxyXG5cclxuLyoqXHJcbiAqIEByZXR1cm5zIEJJUDMyIGhhcmRjb2RlZCBpbmRleCBmb3IgcDJ0ck11c2lnMiBzcGVuZCB0eXBlLiAwIGZvciBrZXkgcGF0aCBhbmQgMTAwIGZvciBzY3JpcHQgcGF0aC5cclxuICogRm9yIHNhbWUgZml4dHVyZSBrZXkgdHJpcGxlIGFuZCBzY3JpcHQgdHlwZSAocDJ0ck11c2lnMiksXHJcbiAqIHdlIG5lZWQgMiBkaWZmZXJlbnQgZGVwb3NpdCBhbmQgc3BlbmQgdHggZml4dHVyZXMuXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gZ2V0UDJ0ck11c2lnMkluZGV4KHNwZW5kVHlwZTogJ2tleVBhdGgnIHwgJ3NjcmlwdFBhdGgnKTogbnVtYmVyIHtcclxuICByZXR1cm4gc3BlbmRUeXBlID09PSAna2V5UGF0aCcgPyAwIDogMTAwO1xyXG59XHJcbiJdfQ==