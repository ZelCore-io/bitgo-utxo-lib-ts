"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.toOutputScript = exports.fromOutputScript = exports.toBase58Check = exports.fromBase58Check = void 0;
const assert = require("assert");
const types = require("bitcoinjs-lib/src/types");
const bitcoinjs_lib_1 = require("bitcoinjs-lib");
const networks_1 = require("../../networks");
const crypto_1 = require("./crypto");
const bs58checkBase = require('bs58check/base');
const typeforce = require('typeforce');
const bech32_1 = require('bech32');
const FUTURE_SEGWIT_MAX_SIZE = 40;
const FUTURE_SEGWIT_MIN_SIZE = 2;
const FUTURE_SEGWIT_MAX_VERSION = 16;
const FUTURE_SEGWIT_MIN_VERSION = 1;
const FUTURE_SEGWIT_VERSION_DIFF = 0x50;
function fromBech32(address) {
    let result;
    let version;
    try {
        result = bech32_1.bech32.decode(address);
    }
    catch (e) { }
    if (result) {
        version = result.words[0];
        if (version !== 0)
            throw new TypeError(address + ' uses wrong encoding');
    }
    else {
        result = bech32_1.bech32m.decode(address);
        version = result.words[0];
        if (version === 0)
            throw new TypeError(address + ' uses wrong encoding');
    }
    const data = bech32_1.bech32.fromWords(result.words.slice(1));
    return {
        version,
        prefix: result.prefix,
        data: Buffer.from(data),
    };
}
function fromBase58Check(address) {
    const payload = bs58checkBase(crypto_1.groestl).decode(address);
    // TODO: 4.0.0, move to "toOutputScript"
    if (payload.length < 21)
        throw new TypeError(address + ' is too short');
    if (payload.length > 21)
        throw new TypeError(address + ' is too long');
    const version = payload.readUInt8(0);
    const hash = payload.slice(1);
    return { version, hash };
}
exports.fromBase58Check = fromBase58Check;
function toBase58Check(hash, version) {
    typeforce(types.tuple(types.Hash160bit, types.UInt8), arguments);
    const payload = Buffer.allocUnsafe(21);
    payload.writeUInt8(version, 0);
    hash.copy(payload, 1);
    return bs58checkBase(crypto_1.groestl).encode(payload);
}
exports.toBase58Check = toBase58Check;
function fromOutputScript(output, network) {
    assert((0, networks_1.isGroestlcoin)(network));
    try {
        return bitcoinjs_lib_1.payments.p2pkh({ output, network }).address;
    }
    catch (e) { }
    try {
        return bitcoinjs_lib_1.payments.p2sh({ output, network }).address;
    }
    catch (e) { }
    try {
        return bitcoinjs_lib_1.payments.p2wpkh({ output, network }).address;
    }
    catch (e) { }
    try {
        return bitcoinjs_lib_1.payments.p2wsh({ output, network }).address;
    }
    catch (e) { }
    try {
        return bitcoinjs_lib_1.payments.p2tr({ output, network }).address;
    }
    catch (e) { }
    throw new Error(bitcoinjs_lib_1.script.toASM(output) + ' has no matching Address');
}
exports.fromOutputScript = fromOutputScript;
function toOutputScript(address, network) {
    let decodeBase58;
    let decodeBech32;
    try {
        decodeBase58 = fromBase58Check(address);
    }
    catch (e) { }
    if (decodeBase58) {
        if (decodeBase58.version === network.pubKeyHash)
            return bitcoinjs_lib_1.payments.p2pkh({ hash: decodeBase58.hash }).output;
        if (decodeBase58.version === network.scriptHash)
            return bitcoinjs_lib_1.payments.p2sh({ hash: decodeBase58.hash }).output;
    }
    else {
        try {
            decodeBech32 = fromBech32(address);
        }
        catch (e) { }
        if (decodeBech32) {
            if (decodeBech32.prefix !== network.bech32)
                throw new Error(address + ' has an invalid prefix');
            if (decodeBech32.version === 0) {
                if (decodeBech32.data.length === 20)
                    return bitcoinjs_lib_1.payments.p2wpkh({ hash: decodeBech32.data }).output;
                if (decodeBech32.data.length === 32)
                    return bitcoinjs_lib_1.payments.p2wsh({ hash: decodeBech32.data }).output;
            }
            else if (decodeBech32.version >= FUTURE_SEGWIT_MIN_VERSION &&
                decodeBech32.version <= FUTURE_SEGWIT_MAX_VERSION &&
                decodeBech32.data.length >= FUTURE_SEGWIT_MIN_SIZE &&
                decodeBech32.data.length <= FUTURE_SEGWIT_MAX_SIZE) {
                return bitcoinjs_lib_1.script.compile([
                    decodeBech32.version + FUTURE_SEGWIT_VERSION_DIFF,
                    decodeBech32.data,
                ]);
            }
        }
    }
    throw new Error(address + ' has no matching Script');
}
exports.toOutputScript = toOutputScript;
//# sourceMappingURL=data:application/json;base64,