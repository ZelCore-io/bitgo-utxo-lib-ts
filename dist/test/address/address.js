"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getOutputScripts = exports.readFixture = void 0;
const path = require("path");
const assert = require("assert");
const utxolib = require("../../src");
const src_1 = require("../../src");
const testutil_1 = require("../../src/testutil");
const outputScripts_util_1 = require("../integration_local_rpc/generate/outputScripts.util");
const fixtureUtil = require("../fixture.util");
async function readFixture(network, suffix, defaultValue) {
    return await fixtureUtil.readFixture(path.join(__dirname, 'fixtures', `${utxolib.getNetworkName(network)}${suffix}.json`), defaultValue);
}
exports.readFixture = readFixture;
const keyTriples = Array.from({ length: 4 }).map((v, i) => (0, testutil_1.getKeyTriple)(`${i}`));
function getOutputScripts(network) {
    return keyTriples.flatMap((keys) => outputScripts_util_1.scriptTypes
        .filter((t) => (0, outputScripts_util_1.isSupportedDepositType)(network, t))
        .map((scriptType) => {
        return [scriptType, (0, outputScripts_util_1.createScriptPubKey)(keys, scriptType, network)];
    }));
}
exports.getOutputScripts = getOutputScripts;
function runWithAddressFormat(network, addressFormat) {
    describe(`network=${(0, src_1.getNetworkName)(network)}` + (addressFormat ? ` addressFormat=${addressFormat}` : ''), function () {
        let vectors;
        let refVectors;
        before('prepare fixtures', async function () {
            vectors = getOutputScripts(network).map(([scriptType, scriptPubKey]) => [
                scriptType,
                scriptPubKey.toString('hex'),
                addressFormat === undefined
                    ? utxolib.address.fromOutputScript(scriptPubKey, network)
                    : utxolib.addressFormat.fromOutputScriptWithFormat(scriptPubKey, addressFormat, network),
            ]);
            refVectors = await readFixture(network, (addressFormat !== null && addressFormat !== void 0 ? addressFormat : 'default') === 'default' ? '' : `-${addressFormat}`, vectors);
        });
        it('matches test vectors, parses to scriptPubKeyHex, implements toCanonicalFormat', function () {
            assert.strictEqual(vectors.length, refVectors.length);
            vectors.forEach((v, i) => {
                assert.deepStrictEqual(v, refVectors[i]);
                const [, scriptPubKeyHex, address] = v;
                if (!addressFormat || addressFormat === 'default') {
                    assert.strictEqual(utxolib.address.toOutputScript(address, network).toString('hex'), scriptPubKeyHex);
                }
                else {
                    assert.throws(() => {
                        utxolib.address.toOutputScript(address, network);
                    });
                    assert.strictEqual(utxolib.addressFormat.toOutputScriptWithFormat(address, addressFormat, network).toString('hex'), scriptPubKeyHex);
                }
                assert.strictEqual(utxolib.addressFormat.toCanonicalFormat(address, network), utxolib.address.fromOutputScript(Buffer.from(scriptPubKeyHex, 'hex'), network));
                if (network.bech32 && !address.startsWith(network.bech32)) {
                    const { hash, version } = utxolib.address.fromBase58Check(address, network);
                    assert.deepStrictEqual(utxolib.address.toBase58Check(hash, version, network), address);
                }
            });
        });
    });
}
describe('Address', function () {
    (0, src_1.getNetworkList)().forEach((network) => {
        const formats = utxolib.addressFormat.addressFormats.filter((f) => utxolib.addressFormat.isSupportedAddressFormat(f, network));
        [undefined, ...formats].forEach((f) => {
            runWithAddressFormat(network, f);
        });
    });
});
//# sourceMappingURL=data:application/json;base64,