"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const assert = require("assert");
const mocha_1 = require("mocha");
const src_1 = require("../src");
const u = require("./payments.utils");
['p2tr', 'p2tr_ns'].forEach((p) => {
    (0, mocha_1.describe)(p, () => {
        let fn;
        const payment = require('../src/payments/' + p);
        const eccLib = p.startsWith('p2tr') ? src_1.ecc : undefined;
        if (p === 'embed') {
            fn = payment.p2data;
        }
        else {
            fn = payment[p];
        }
        const fixtures = require('./fixtures/' + p);
        fixtures.valid.forEach((f) => {
            (0, mocha_1.it)(f.description + ' as expected', () => {
                const args = u.preform(f.arguments);
                const actual = fn(args, Object.assign({ eccLib }, f.options));
                u.equate(actual, f.expected, f.arguments);
            });
            (0, mocha_1.it)(f.description + ' as expected (no validation)', () => {
                const args = u.preform(f.arguments);
                const actual = fn(args, Object.assign({ eccLib }, f.options, {
                    validate: false,
                }));
                u.equate(actual, f.expected, f.arguments);
            });
        });
        fixtures.invalid.forEach((f) => {
            (0, mocha_1.it)('throws ' + f.exception + (f.description ? 'for ' + f.description : ''), () => {
                const args = u.preform(f.arguments);
                assert.throws(() => {
                    fn(args, Object.assign({ eccLib }, f.options));
                }, new RegExp(f.exception));
            });
        });
        // cross-verify dynamically too
        if (!fixtures.dynamic)
            return;
        const { depends, details } = fixtures.dynamic;
        details.forEach((f) => {
            const detail = u.preform(f);
            const disabled = {};
            if (f.disabled) {
                f.disabled.forEach((k) => {
                    disabled[k] = true;
                });
            }
            for (const key in depends) {
                if (key in disabled)
                    continue;
                const dependencies = depends[key];
                dependencies.forEach((dependency) => {
                    if (!Array.isArray(dependency))
                        dependency = [dependency];
                    const args = {};
                    dependency.forEach((d) => {
                        u.from(d, detail, args);
                    });
                    const expected = u.from(key, detail);
                    (0, mocha_1.it)(f.description + ', ' + key + ' derives from ' + JSON.stringify(dependency), () => {
                        u.equate(fn(args), expected);
                    });
                });
            }
        });
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGF5bWVudHMuc3BlYy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3Rlc3QvcGF5bWVudHMuc3BlYy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLGlDQUFpQztBQUNqQyxpQ0FBcUM7QUFDckMsZ0NBQTZCO0FBRTdCLHNDQUFzQztBQUd0QyxDQUFDLE1BQU0sRUFBRSxTQUFTLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRTtJQUNoQyxJQUFBLGdCQUFRLEVBQUMsQ0FBQyxFQUFFLEdBQUcsRUFBRTtRQUNmLElBQUksRUFBa0IsQ0FBQztRQUN2QixNQUFNLE9BQU8sR0FBRyxPQUFPLENBQUMsa0JBQWtCLEdBQUcsQ0FBQyxDQUFDLENBQUM7UUFDaEQsTUFBTSxNQUFNLEdBQXVDLENBQUMsQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQUcsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDO1FBQzFGLElBQUksQ0FBQyxLQUFLLE9BQU8sRUFBRTtZQUNqQixFQUFFLEdBQUcsT0FBTyxDQUFDLE1BQU0sQ0FBQztTQUNyQjthQUFNO1lBQ0wsRUFBRSxHQUFHLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQztTQUNqQjtRQUNELE1BQU0sUUFBUSxHQUFHLE9BQU8sQ0FBQyxhQUFhLEdBQUcsQ0FBQyxDQUFDLENBQUM7UUFFNUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFNLEVBQUUsRUFBRTtZQUNoQyxJQUFBLFVBQUUsRUFBQyxDQUFDLENBQUMsV0FBVyxHQUFHLGNBQWMsRUFBRSxHQUFHLEVBQUU7Z0JBQ3RDLE1BQU0sSUFBSSxHQUFHLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDO2dCQUNwQyxNQUFNLE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxFQUFFLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRSxNQUFNLEVBQUUsRUFB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LENBQUMsRUFBRSxNQUFNLEVBQUUsSUFBSSxDQUFDLENBQUM7b0JBQzFCLENBQUMsQ0FBQyxDQUFDO29CQUNILE1BQU0sUUFBUSxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLE1BQU0sQ0FBQyxDQUFDO29CQUVyQyxJQUFBLFVBQUUsRUFBQyxDQUFDLENBQUMsV0FBVyxHQUFHLElBQUksR0FBRyxHQUFHLEdBQUcsZ0JBQWdCLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxVQUFVLENBQUMsRUFBRSxHQUFHLEVBQUU7d0JBQ2xGLENBQUMsQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxFQUFFLFFBQVEsQ0FBQyxDQUFDO29CQUMvQixDQUFDLENBQUMsQ0FBQztnQkFDTCxDQUFDLENBQUMsQ0FBQzthQUNKO1FBQ0gsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDLENBQUMsQ0FBQztBQUNMLENBQUMsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgYXNzZXJ0IGZyb20gJ2Fzc2VydCc7XHJcbmltcG9ydCB7IGRlc2NyaWJlLCBpdCB9IGZyb20gJ21vY2hhJztcclxuaW1wb3J0IHsgZWNjIH0gZnJvbSAnLi4vc3JjJztcclxuaW1wb3J0IHsgUGF5bWVudENyZWF0b3IgfSBmcm9tICdiaXRjb2luanMtbGliJztcclxuaW1wb3J0ICogYXMgdSBmcm9tICcuL3BheW1lbnRzLnV0aWxzJztcclxuaW1wb3J0IHsgVGlueVNlY3AyNTZrMUludGVyZmFjZSB9IGZyb20gJy4uL3NyYy90YXByb290JztcclxuXHJcblsncDJ0cicsICdwMnRyX25zJ10uZm9yRWFjaCgocCkgPT4ge1xyXG4gIGRlc2NyaWJlKHAsICgpID0+IHtcclxuICAgIGxldCBmbjogUGF5bWVudENyZWF0b3I7XHJcbiAgICBjb25zdCBwYXltZW50ID0gcmVxdWlyZSgnLi4vc3JjL3BheW1lbnRzLycgKyBwKTtcclxuICAgIGNvbnN0IGVjY0xpYjogVGlueVNlY3AyNTZrMUludGVyZmFjZSB8IHVuZGVmaW5lZCA9IHAuc3RhcnRzV2l0aCgncDJ0cicpID8gZWNjIDogdW5kZWZpbmVkO1xyXG4gICAgaWYgKHAgPT09ICdlbWJlZCcpIHtcclxuICAgICAgZm4gPSBwYXltZW50LnAyZGF0YTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIGZuID0gcGF5bWVudFtwXTtcclxuICAgIH1cclxuICAgIGNvbnN0IGZpeHR1cmVzID0gcmVxdWlyZSgnLi9maXh0dXJlcy8nICsgcCk7XHJcblxyXG4gICAgZml4dHVyZXMudmFsaWQuZm9yRWFjaCgoZjogYW55KSA9PiB7XHJcbiAgICAgIGl0KGYuZGVzY3JpcHRpb24gKyAnIGFzIGV4cGVjdGVkJywgKCkgPT4ge1xyXG4gICAgICAgIGNvbnN0IGFyZ3MgPSB1LnByZWZvcm0oZi5hcmd1bWVudHMpO1xyXG4gICAgICAgIGNvbnN0IGFjdHVhbCA9IGZuKGFyZ3MsIE9iamVjdC5hc3NpZ24oeyBlY2NMaWIgfSwgZi5vcHRpb25zKSk7XHJcblxyXG4gICAgICAgIHUuZXF1YXRlKGFjdHVhbCwgZi5leHBlY3RlZCwgZi5hcmd1bWVudHMpO1xyXG4gICAgICB9KTtcclxuXHJcbiAgICAgIGl0KGYuZGVzY3JpcHRpb24gKyAnIGFzIGV4cGVjdGVkIChubyB2YWxpZGF0aW9uKScsICgpID0+IHtcclxuICAgICAgICBjb25zdCBhcmdzID0gdS5wcmVmb3JtKGYuYXJndW1lbnRzKTtcclxuICAgICAgICBjb25zdCBhY3R1YWwgPSBmbihcclxuICAgICAgICAgIGFyZ3MsXHJcbiAgICAgICAgICBPYmplY3QuYXNzaWduKHsgZWNjTGliIH0sIGYub3B0aW9ucywge1xyXG4gICAgICAgICAgICB2YWxpZGF0ZTogZmFsc2UsXHJcbiAgICAgICAgICB9KVxyXG4gICAgICAgICk7XHJcblxyXG4gICAgICAgIHUuZXF1YXRlKGFjdHVhbCwgZi5leHBlY3RlZCwgZi5hcmd1bWVudHMpO1xyXG4gICAgICB9KTtcclxuICAgIH0pO1xyXG5cclxuICAgIGZpeHR1cmVzLmludmFsaWQuZm9yRWFjaCgoZjogYW55KSA9PiB7XHJcbiAgICAgIGl0KCd0aHJvd3MgJyArIGYuZXhjZXB0aW9uICsgKGYuZGVzY3JpcHRpb24gPyAnZm9yICcgKyBmLmRlc2NyaXB0aW9uIDogJycpLCAoKSA9PiB7XHJcbiAgICAgICAgY29uc3QgYXJncyA9IHUucHJlZm9ybShmLmFyZ3VtZW50cyk7XHJcblxyXG4gICAgICAgIGFzc2VydC50aHJvd3MoKCkgPT4ge1xyXG4gICAgICAgICAgZm4oYXJncywgT2JqZWN0LmFzc2lnbih7IGVjY0xpYiB9LCBmLm9wdGlvbnMpKTtcclxuICAgICAgICB9LCBuZXcgUmVnRXhwKGYuZXhjZXB0aW9uKSk7XHJcbiAgICAgIH0pO1xyXG4gICAgfSk7XHJcblxyXG4gICAgLy8gY3Jvc3MtdmVyaWZ5IGR5bmFtaWNhbGx5IHRvb1xyXG4gICAgaWYgKCFmaXh0dXJlcy5keW5hbWljKSByZXR1cm47XHJcbiAgICBjb25zdCB7IGRlcGVuZHMsIGRldGFpbHMgfSA9IGZpeHR1cmVzLmR5bmFtaWM7XHJcblxyXG4gICAgZGV0YWlscy5mb3JFYWNoKChmOiBhbnkpID0+IHtcclxuICAgICAgY29uc3QgZGV0YWlsID0gdS5wcmVmb3JtKGYpO1xyXG4gICAgICBjb25zdCBkaXNhYmxlZDogYW55ID0ge307XHJcbiAgICAgIGlmIChmLmRpc2FibGVkKSB7XHJcbiAgICAgICAgZi5kaXNhYmxlZC5mb3JFYWNoKChrOiBzdHJpbmcpID0+IHtcclxuICAgICAgICAgIGRpc2FibGVkW2tdID0gdHJ1ZTtcclxuICAgICAgICB9KTtcclxuICAgICAgfVxyXG5cclxuICAgICAgZm9yIChjb25zdCBrZXkgaW4gZGVwZW5kcykge1xyXG4gICAgICAgIGlmIChrZXkgaW4gZGlzYWJsZWQpIGNvbnRpbnVlO1xyXG4gICAgICAgIGNvbnN0IGRlcGVuZGVuY2llcyA9IGRlcGVuZHNba2V5XTtcclxuXHJcbiAgICAgICAgZGVwZW5kZW5jaWVzLmZvckVhY2goKGRlcGVuZGVuY3k6IGFueSkgPT4ge1xyXG4gICAgICAgICAgaWYgKCFBcnJheS5pc0FycmF5KGRlcGVuZGVuY3kpKSBkZXBlbmRlbmN5ID0gW2RlcGVuZGVuY3ldO1xyXG5cclxuICAgICAgICAgIGNvbnN0IGFyZ3MgPSB7fTtcclxuICAgICAgICAgIGRlcGVuZGVuY3kuZm9yRWFjaCgoZDogYW55KSA9PiB7XHJcbiAgICAgICAgICAgIHUuZnJvbShkLCBkZXRhaWwsIGFyZ3MpO1xyXG4gICAgICAgICAgfSk7XHJcbiAgICAgICAgICBjb25zdCBleHBlY3RlZCA9IHUuZnJvbShrZXksIGRldGFpbCk7XHJcblxyXG4gICAgICAgICAgaXQoZi5kZXNjcmlwdGlvbiArICcsICcgKyBrZXkgKyAnIGRlcml2ZXMgZnJvbSAnICsgSlNPTi5zdHJpbmdpZnkoZGVwZW5kZW5jeSksICgpID0+IHtcclxuICAgICAgICAgICAgdS5lcXVhdGUoZm4oYXJncyksIGV4cGVjdGVkKTtcclxuICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICB9KTtcclxufSk7XHJcbiJdfQ==