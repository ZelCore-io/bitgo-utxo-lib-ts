"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const assert = require("assert");
const bitgo_1 = require("../../src/bitgo");
const values = [
    0,
    1,
    1.01 * 1e8,
    Number.MAX_SAFE_INTEGER,
    '10999999800000001',
    '9223372036854775807',
    '91000036854775807',
    // TODO: Add some bigint inputs
];
describe('toTNumber', function () {
    values.forEach((value) => {
        if (typeof value === 'number') {
            it(`number ${value}`, function () {
                assert.strictEqual((0, bitgo_1.toTNumber)(value, 'number'), value);
                assert.strictEqual((0, bitgo_1.toTNumber)(value, 'number'), value);
            });
        }
        it(`bigint ${value}`, function () {
            assert.strictEqual((0, bitgo_1.toTNumber)(value, 'bigint'), BigInt(value));
            assert.strictEqual((0, bitgo_1.toTNumber)(value, 'bigint'), BigInt(value));
        });
    });
    it('throws on undefined value', function () {
        assert.throws(() => {
            const a = undefined;
            (0, bitgo_1.toTNumber)(a, 'number');
        });
    });
    it('throws on unsafe number', function () {
        assert.throws(() => {
            (0, bitgo_1.toTNumber)('10999999800000001', 'number');
        });
    });
    it('throws on invalid amountType', function () {
        assert.throws(() => {
            (0, bitgo_1.toTNumber)(BigInt(123), 'invalid');
        });
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidG51bWJlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3Rlc3QvYml0Z28vdG51bWJlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLGlDQUFpQztBQUNqQywyQ0FBNEM7QUFFNUMsTUFBTSxNQUFNLEdBQUc7SUFDYixDQUFDO0lBQ0QsQ0FBQztJQUNELElBQUksR0FBRyxHQUFHO0lBQ1YsTUFBTSxDQUFDLGdCQUFnQjtJQUN2QixtQkFBbUI7SUFDbkIscUJBQXFCO0lBQ3JCLG1CQUFtQjtJQUNuQiwrQkFBK0I7Q0FDaEMsQ0FBQztBQUVGLFFBQVEsQ0FBQyxXQUFXLEVBQUU7SUFDcEIsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDLEtBQUssRUFBRSxFQUFFO1FBQ3ZCLElBQUksT0FBTyxLQUFLLEtBQUssUUFBUSxFQUFFO1lBQzdCLEVBQUUsQ0FBQyxVQUFVLEtBQUssRUFBRSxFQUFFO2dCQUNwQixNQUFNLENBQUMsV0FBVyxDQUFDLElBQUEsaUJBQVMsRUFBQyxLQUFLLEVBQUUsUUFBUSxDQUFDLEVBQUUsS0FBSyxDQUFDLENBQUM7Z0JBQ3RELE1BQU0sQ0FBQyxXQUFXLENBQUMsSUFBQSxpQkFBUyxFQUFTLEtBQUssRUFBRSxRQUFRLENBQUMsRUFBRSxLQUFLLENBQUMsQ0FBQztZQUNoRSxDQUFDLENBQUMsQ0FBQztTQUNKO1FBQ0QsRUFBRSxDQUFDLFVBQVUsS0FBSyxFQUFFLEVBQUU7WUFDcEIsTUFBTSxDQUFDLFdBQVcsQ0FBQyxJQUFBLGlCQUFTLEVBQUMsS0FBSyxFQUFFLFFBQVEsQ0FBQyxFQUFFLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO1lBQzlELE1BQU0sQ0FBQyxXQUFXLENBQUMsSUFBQSxpQkFBUyxFQUFTLEtBQUssRUFBRSxRQUFRLENBQUMsRUFBRSxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztRQUN4RSxDQUFDLENBQUMsQ0FBQztJQUNMLENBQUMsQ0FBQyxDQUFDO0lBQ0gsRUFBRSxDQUFDLDJCQUEyQixFQUFFO1FBQzlCLE1BQU0sQ0FBQyxNQUFNLENBQUMsR0FBRyxFQUFFO1lBQ2pCLE1BQU0sQ0FBQyxHQUFXLFNBQThCLENBQUM7WUFDakQsSUFBQSxpQkFBUyxFQUFDLENBQUMsRUFBRSxRQUFRLENBQUMsQ0FBQztRQUN6QixDQUFDLENBQUMsQ0FBQztJQUNMLENBQUMsQ0FBQyxDQUFDO0lBQ0gsRUFBRSxDQUFDLHlCQUF5QixFQUFFO1FBQzVCLE1BQU0sQ0FBQyxNQUFNLENBQUMsR0FBRyxFQUFFO1lBQ2pCLElBQUEsaUJBQVMsRUFBQyxtQkFBbUIsRUFBRSxRQUFRLENBQUMsQ0FBQztRQUMzQyxDQUFDLENBQUMsQ0FBQztJQUNMLENBQUMsQ0FBQyxDQUFDO0lBQ0gsRUFBRSxDQUFDLDhCQUE4QixFQUFFO1FBQ2pDLE1BQU0sQ0FBQyxNQUFNLENBQUMsR0FBRyxFQUFFO1lBQ2pCLElBQUEsaUJBQVMsRUFBQyxNQUFNLENBQUMsR0FBRyxDQUFDLEVBQUUsU0FBZ0MsQ0FBQyxDQUFDO1FBQzNELENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQyxDQUFDLENBQUM7QUFDTCxDQUFDLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIGFzc2VydCBmcm9tICdhc3NlcnQnO1xyXG5pbXBvcnQgeyB0b1ROdW1iZXIgfSBmcm9tICcuLi8uLi9zcmMvYml0Z28nO1xyXG5cclxuY29uc3QgdmFsdWVzID0gW1xyXG4gIDAsXHJcbiAgMSxcclxuICAxLjAxICogMWU4LFxyXG4gIE51bWJlci5NQVhfU0FGRV9JTlRFR0VSLFxyXG4gICcxMDk5OTk5OTgwMDAwMDAwMScsXHJcbiAgJzkyMjMzNzIwMzY4NTQ3NzU4MDcnLFxyXG4gICc5MTAwMDAzNjg1NDc3NTgwNycsXHJcbiAgLy8gVE9ETzogQWRkIHNvbWUgYmlnaW50IGlucHV0c1xyXG5dO1xyXG5cclxuZGVzY3JpYmUoJ3RvVE51bWJlcicsIGZ1bmN0aW9uICgpIHtcclxuICB2YWx1ZXMuZm9yRWFjaCgodmFsdWUpID0+IHtcclxuICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInKSB7XHJcbiAgICAgIGl0KGBudW1iZXIgJHt2YWx1ZX1gLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgYXNzZXJ0LnN0cmljdEVxdWFsKHRvVE51bWJlcih2YWx1ZSwgJ251bWJlcicpLCB2YWx1ZSk7XHJcbiAgICAgICAgYXNzZXJ0LnN0cmljdEVxdWFsKHRvVE51bWJlcjxudW1iZXI+KHZhbHVlLCAnbnVtYmVyJyksIHZhbHVlKTtcclxuICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICBpdChgYmlnaW50ICR7dmFsdWV9YCwgZnVuY3Rpb24gKCkge1xyXG4gICAgICBhc3NlcnQuc3RyaWN0RXF1YWwodG9UTnVtYmVyKHZhbHVlLCAnYmlnaW50JyksIEJpZ0ludCh2YWx1ZSkpO1xyXG4gICAgICBhc3NlcnQuc3RyaWN0RXF1YWwodG9UTnVtYmVyPGJpZ2ludD4odmFsdWUsICdiaWdpbnQnKSwgQmlnSW50KHZhbHVlKSk7XHJcbiAgICB9KTtcclxuICB9KTtcclxuICBpdCgndGhyb3dzIG9uIHVuZGVmaW5lZCB2YWx1ZScsIGZ1bmN0aW9uICgpIHtcclxuICAgIGFzc2VydC50aHJvd3MoKCkgPT4ge1xyXG4gICAgICBjb25zdCBhOiBzdHJpbmcgPSB1bmRlZmluZWQgYXMgdW5rbm93biBhcyBzdHJpbmc7XHJcbiAgICAgIHRvVE51bWJlcihhLCAnbnVtYmVyJyk7XHJcbiAgICB9KTtcclxuICB9KTtcclxuICBpdCgndGhyb3dzIG9uIHVuc2FmZSBudW1iZXInLCBmdW5jdGlvbiAoKSB7XHJcbiAgICBhc3NlcnQudGhyb3dzKCgpID0+IHtcclxuICAgICAgdG9UTnVtYmVyKCcxMDk5OTk5OTgwMDAwMDAwMScsICdudW1iZXInKTtcclxuICAgIH0pO1xyXG4gIH0pO1xyXG4gIGl0KCd0aHJvd3Mgb24gaW52YWxpZCBhbW91bnRUeXBlJywgZnVuY3Rpb24gKCkge1xyXG4gICAgYXNzZXJ0LnRocm93cygoKSA9PiB7XHJcbiAgICAgIHRvVE51bWJlcihCaWdJbnQoMTIzKSwgJ2ludmFsaWQnIGFzICdudW1iZXInIHwgJ2JpZ2ludCcpO1xyXG4gICAgfSk7XHJcbiAgfSk7XHJcbn0pO1xyXG4iXX0=