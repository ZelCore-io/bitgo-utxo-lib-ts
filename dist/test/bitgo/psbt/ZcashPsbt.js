"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const assert = require("assert");
const src_1 = require("../../../src");
const utxolib = require("../../../src");
const bitgo_1 = require("../../../src/bitgo");
const testutil_1 = require("../../../src/testutil");
const mock_1 = require("../../../src/testutil/mock");
const network = src_1.networks.zcash;
const rootWalletKeys = (0, testutil_1.getDefaultWalletKeys)();
describe('Zcash PSBT', function () {
    let psbt;
    before(async function () {
        const unspents = (0, mock_1.mockUnspents)(rootWalletKeys, ['p2sh'], BigInt('10000000000000000'), network);
        psbt = await utxolib.bitgo.ZcashPsbt.createPsbt({ network });
        unspents.forEach((unspent) => {
            utxolib.bitgo.addWalletUnspentToPsbt(psbt, unspent, rootWalletKeys, 'user', 'bitgo');
        });
        (0, bitgo_1.addWalletOutputToPsbt)(psbt, rootWalletKeys, (0, bitgo_1.getInternalChainCode)('p2sh'), 0, BigInt('1000000000000000'));
    });
    describe('txHex should serialize psbt', function () {
        function testToHexForVersion(version) {
            it(`version ${version} should serialize properly`, async function () {
                psbt.setDefaultsForVersion(network, version);
                assert.deepStrictEqual(psbt.toHex(), psbt.toBuffer().toString('hex'));
            });
        }
        [400, 450, 500].forEach((version) => testToHexForVersion(version));
        function testFromHexForVersion(version) {
            it(`version ${version} should deserialize from toHex`, async function () {
                psbt.setDefaultsForVersion(network, version);
                const psbtHex = psbt.toHex();
                const psbt2Hex = bitgo_1.ZcashPsbt.fromHex(psbtHex, { network }).toHex();
                assert.deepStrictEqual(psbt2Hex, psbtHex);
            });
        }
        [400, 450, 500].forEach((version) => testFromHexForVersion(version));
    });
    describe('should be able to sign the transaction', function () {
        it('can sign the inputs', async function () {
            psbt.signAllInputsHD(rootWalletKeys.user);
            assert(!psbt.__CACHE.__UNSAFE_SIGN_NONSEGWIT);
            psbt.signAllInputsHD(rootWalletKeys.bitgo);
            assert(!psbt.__CACHE.__UNSAFE_SIGN_NONSEGWIT);
        });
        it('can validate the signatures on the unspents', async function () {
            psbt.validateSignaturesOfAllInputs();
            assert(!psbt.__CACHE.__UNSAFE_SIGN_NONSEGWIT);
        });
        it('can finalize and extract the transaction', async function () {
            psbt.finalizeAllInputs();
            psbt.extractTransaction(true);
        });
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiWmNhc2hQc2J0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vdGVzdC9iaXRnby9wc2J0L1pjYXNoUHNidC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLGlDQUFpQztBQUVqQyxzQ0FBd0M7QUFDeEMsd0NBQXdDO0FBQ3hDLDhDQUEyRztBQUMzRyxvREFBNkQ7QUFFN0QscURBQTBEO0FBRTFELE1BQU0sT0FBTyxHQUFHLGNBQVEsQ0FBQyxLQUFLLENBQUM7QUFDL0IsTUFBTSxjQUFjLEdBQUcsSUFBQSwrQkFBb0IsR0FBRSxDQUFDO0FBRTlDLFFBQVEsQ0FBQyxZQUFZLEVBQUU7SUFDckIsSUFBSSxJQUE2QixDQUFDO0lBQ2xDLE1BQU0sQ0FBQyxLQUFLO1FBQ1YsTUFBTSxRQUFRLEdBQUcsSUFBQSxtQkFBWSxFQUFDLGNBQWMsRUFBRSxDQUFDLE1BQU0sQ0FBQyxFQUFFLE1BQU0sQ0FBQyxtQkFBbUIsQ0FBQyxFQUFFLE9BQU8sQ0FBQyxDQUFDO1FBQzlGLElBQUksR0FBRyxNQUFNLE9BQU8sQ0FBQyxLQUFLLENBQUMsU0FBUyxDQUFDLFVBQVUsQ0FBQyxFQUFFLE9BQU8sRUFBRSxDQUFDLENBQUM7UUFFN0QsUUFBUSxDQUFDLE9BQU8sQ0FBQyxDQUFDLE9BQU8sRUFBRSxFQUFFO1lBQzNCLE9BQU8sQ0FBQyxLQUFLLENBQUMsc0JBQXNCLENBQUMsSUFBSSxFQUFFLE9BQWdDLEVBQUUsY0FBYyxFQUFFLE1BQU0sRUFBRSxPQUFPLENBQUMsQ0FBQztRQUNoSCxDQUFDLENBQUMsQ0FBQztRQUNILElBQUEsNkJBQXFCLEVBQUMsSUFBSSxFQUFFLGNBQWMsRUFBRSxJQUFBLDRCQUFvQixFQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsRUFBRSxNQUFNLENBQUMsa0JBQWtCLENBQUMsQ0FBQyxDQUFDO0lBQzNHLENBQUMsQ0FBQyxDQUFDO0lBRUgsUUFBUSxDQUFDLDZCQUE2QixFQUFFO1FBQ3RDLFNBQVMsbUJBQW1CLENBQUMsT0FBZTtZQUMxQyxFQUFFLENBQUMsV0FBVyxPQUFPLDRCQUE0QixFQUFFLEtBQUs7Z0JBQ3RELElBQUksQ0FBQyxxQkFBcUIsQ0FBQyxPQUFPLEVBQUUsT0FBTyxDQUFDLENBQUM7Z0JBQzdDLE1BQU0sQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxFQUFFLElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztZQUN4RSxDQUFDLENBQUMsQ0FBQztRQUNMLENBQUM7UUFDRCxDQUFDLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsT0FBTyxFQUFFLEVBQUUsQ0FBQyxtQkFBbUIsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO1FBRW5FLFNBQVMscUJBQXFCLENBQUMsT0FBZTtZQUM1QyxFQUFFLENBQUMsV0FBVyxPQUFPLGdDQUFnQyxFQUFFLEtBQUs7Z0JBQzFELElBQUksQ0FBQyxxQkFBcUIsQ0FBQyxPQUFPLEVBQUUsT0FBTyxDQUFDLENBQUM7Z0JBQzdDLE1BQU0sT0FBTyxHQUFHLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQztnQkFDN0IsTUFBTSxRQUFRLEdBQUcsaUJBQVMsQ0FBQyxPQUFPLENBQUMsT0FBTyxFQUFFLEVBQUUsT0FBTyxFQUFFLENBQUMsQ0FBQyxLQUFLLEVBQUUsQ0FBQztnQkFDakUsTUFBTSxDQUFDLGVBQWUsQ0FBQyxRQUFRLEVBQUUsT0FBTyxDQUFDLENBQUM7WUFDNUMsQ0FBQyxDQUFDLENBQUM7UUFDTCxDQUFDO1FBQ0QsQ0FBQyxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLE9BQU8sRUFBRSxFQUFFLENBQUMscUJBQXFCLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQztJQUN2RSxDQUFDLENBQUMsQ0FBQztJQUVILFFBQVEsQ0FBQyx3Q0FBd0MsRUFBRTtRQUNqRCxFQUFFLENBQUMscUJBQXFCLEVBQUUsS0FBSztZQUM3QixJQUFJLENBQUMsZUFBZSxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUMxQyxNQUFNLENBQUMsQ0FBRSxJQUFZLENBQUMsT0FBTyxDQUFDLHVCQUF1QixDQUFDLENBQUM7WUFDdkQsSUFBSSxDQUFDLGVBQWUsQ0FBQyxjQUFjLENBQUMsS0FBSyxDQUFDLENBQUM7WUFDM0MsTUFBTSxDQUFDLENBQUUsSUFBWSxDQUFDLE9BQU8sQ0FBQyx1QkFBdUIsQ0FBQyxDQUFDO1FBQ3pELENBQUMsQ0FBQyxDQUFDO1FBRUgsRUFBRSxDQUFDLDZDQUE2QyxFQUFFLEtBQUs7WUFDckQsSUFBSSxDQUFDLDZCQUE2QixFQUFFLENBQUM7WUFDckMsTUFBTSxDQUFDLENBQUUsSUFBWSxDQUFDLE9BQU8sQ0FBQyx1QkFBdUIsQ0FBQyxDQUFDO1FBQ3pELENBQUMsQ0FBQyxDQUFDO1FBRUgsRUFBRSxDQUFDLDBDQUEwQyxFQUFFLEtBQUs7WUFDbEQsSUFBSSxDQUFDLGlCQUFpQixFQUFFLENBQUM7WUFDekIsSUFBSSxDQUFDLGtCQUFrQixDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ2hDLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQyxDQUFDLENBQUM7QUFDTCxDQUFDLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIGFzc2VydCBmcm9tICdhc3NlcnQnO1xyXG5cclxuaW1wb3J0IHsgbmV0d29ya3MgfSBmcm9tICcuLi8uLi8uLi9zcmMnO1xyXG5pbXBvcnQgKiBhcyB1dHhvbGliIGZyb20gJy4uLy4uLy4uL3NyYyc7XHJcbmltcG9ydCB7IGFkZFdhbGxldE91dHB1dFRvUHNidCwgZ2V0SW50ZXJuYWxDaGFpbkNvZGUsIFdhbGxldFVuc3BlbnQsIFpjYXNoUHNidCB9IGZyb20gJy4uLy4uLy4uL3NyYy9iaXRnbyc7XHJcbmltcG9ydCB7IGdldERlZmF1bHRXYWxsZXRLZXlzIH0gZnJvbSAnLi4vLi4vLi4vc3JjL3Rlc3R1dGlsJztcclxuXHJcbmltcG9ydCB7IG1vY2tVbnNwZW50cyB9IGZyb20gJy4uLy4uLy4uL3NyYy90ZXN0dXRpbC9tb2NrJztcclxuXHJcbmNvbnN0IG5ldHdvcmsgPSBuZXR3b3Jrcy56Y2FzaDtcclxuY29uc3Qgcm9vdFdhbGxldEtleXMgPSBnZXREZWZhdWx0V2FsbGV0S2V5cygpO1xyXG5cclxuZGVzY3JpYmUoJ1pjYXNoIFBTQlQnLCBmdW5jdGlvbiAoKSB7XHJcbiAgbGV0IHBzYnQ6IHV0eG9saWIuYml0Z28uWmNhc2hQc2J0O1xyXG4gIGJlZm9yZShhc3luYyBmdW5jdGlvbiAoKSB7XHJcbiAgICBjb25zdCB1bnNwZW50cyA9IG1vY2tVbnNwZW50cyhyb290V2FsbGV0S2V5cywgWydwMnNoJ10sIEJpZ0ludCgnMTAwMDAwMDAwMDAwMDAwMDAnKSwgbmV0d29yayk7XHJcbiAgICBwc2J0ID0gYXdhaXQgdXR4b2xpYi5iaXRnby5aY2FzaFBzYnQuY3JlYXRlUHNidCh7IG5ldHdvcmsgfSk7XHJcblxyXG4gICAgdW5zcGVudHMuZm9yRWFjaCgodW5zcGVudCkgPT4ge1xyXG4gICAgICB1dHhvbGliLmJpdGdvLmFkZFdhbGxldFVuc3BlbnRUb1BzYnQocHNidCwgdW5zcGVudCBhcyBXYWxsZXRVbnNwZW50PGJpZ2ludD4sIHJvb3RXYWxsZXRLZXlzLCAndXNlcicsICdiaXRnbycpO1xyXG4gICAgfSk7XHJcbiAgICBhZGRXYWxsZXRPdXRwdXRUb1BzYnQocHNidCwgcm9vdFdhbGxldEtleXMsIGdldEludGVybmFsQ2hhaW5Db2RlKCdwMnNoJyksIDAsIEJpZ0ludCgnMTAwMDAwMDAwMDAwMDAwMCcpKTtcclxuICB9KTtcclxuXHJcbiAgZGVzY3JpYmUoJ3R4SGV4IHNob3VsZCBzZXJpYWxpemUgcHNidCcsIGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIHRlc3RUb0hleEZvclZlcnNpb24odmVyc2lvbjogbnVtYmVyKSB7XHJcbiAgICAgIGl0KGB2ZXJzaW9uICR7dmVyc2lvbn0gc2hvdWxkIHNlcmlhbGl6ZSBwcm9wZXJseWAsIGFzeW5jIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBwc2J0LnNldERlZmF1bHRzRm9yVmVyc2lvbihuZXR3b3JrLCB2ZXJzaW9uKTtcclxuICAgICAgICBhc3NlcnQuZGVlcFN0cmljdEVxdWFsKHBzYnQudG9IZXgoKSwgcHNidC50b0J1ZmZlcigpLnRvU3RyaW5nKCdoZXgnKSk7XHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgWzQwMCwgNDUwLCA1MDBdLmZvckVhY2goKHZlcnNpb24pID0+IHRlc3RUb0hleEZvclZlcnNpb24odmVyc2lvbikpO1xyXG5cclxuICAgIGZ1bmN0aW9uIHRlc3RGcm9tSGV4Rm9yVmVyc2lvbih2ZXJzaW9uOiBudW1iZXIpIHtcclxuICAgICAgaXQoYHZlcnNpb24gJHt2ZXJzaW9ufSBzaG91bGQgZGVzZXJpYWxpemUgZnJvbSB0b0hleGAsIGFzeW5jIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBwc2J0LnNldERlZmF1bHRzRm9yVmVyc2lvbihuZXR3b3JrLCB2ZXJzaW9uKTtcclxuICAgICAgICBjb25zdCBwc2J0SGV4ID0gcHNidC50b0hleCgpO1xyXG4gICAgICAgIGNvbnN0IHBzYnQySGV4ID0gWmNhc2hQc2J0LmZyb21IZXgocHNidEhleCwgeyBuZXR3b3JrIH0pLnRvSGV4KCk7XHJcbiAgICAgICAgYXNzZXJ0LmRlZXBTdHJpY3RFcXVhbChwc2J0MkhleCwgcHNidEhleCk7XHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgWzQwMCwgNDUwLCA1MDBdLmZvckVhY2goKHZlcnNpb24pID0+IHRlc3RGcm9tSGV4Rm9yVmVyc2lvbih2ZXJzaW9uKSk7XHJcbiAgfSk7XHJcblxyXG4gIGRlc2NyaWJlKCdzaG91bGQgYmUgYWJsZSB0byBzaWduIHRoZSB0cmFuc2FjdGlvbicsIGZ1bmN0aW9uICgpIHtcclxuICAgIGl0KCdjYW4gc2lnbiB0aGUgaW5wdXRzJywgYXN5bmMgZnVuY3Rpb24gKCkge1xyXG4gICAgICBwc2J0LnNpZ25BbGxJbnB1dHNIRChyb290V2FsbGV0S2V5cy51c2VyKTtcclxuICAgICAgYXNzZXJ0KCEocHNidCBhcyBhbnkpLl9fQ0FDSEUuX19VTlNBRkVfU0lHTl9OT05TRUdXSVQpO1xyXG4gICAgICBwc2J0LnNpZ25BbGxJbnB1dHNIRChyb290V2FsbGV0S2V5cy5iaXRnbyk7XHJcbiAgICAgIGFzc2VydCghKHBzYnQgYXMgYW55KS5fX0NBQ0hFLl9fVU5TQUZFX1NJR05fTk9OU0VHV0lUKTtcclxuICAgIH0pO1xyXG5cclxuICAgIGl0KCdjYW4gdmFsaWRhdGUgdGhlIHNpZ25hdHVyZXMgb24gdGhlIHVuc3BlbnRzJywgYXN5bmMgZnVuY3Rpb24gKCkge1xyXG4gICAgICBwc2J0LnZhbGlkYXRlU2lnbmF0dXJlc09mQWxsSW5wdXRzKCk7XHJcbiAgICAgIGFzc2VydCghKHBzYnQgYXMgYW55KS5fX0NBQ0hFLl9fVU5TQUZFX1NJR05fTk9OU0VHV0lUKTtcclxuICAgIH0pO1xyXG5cclxuICAgIGl0KCdjYW4gZmluYWxpemUgYW5kIGV4dHJhY3QgdGhlIHRyYW5zYWN0aW9uJywgYXN5bmMgZnVuY3Rpb24gKCkge1xyXG4gICAgICBwc2J0LmZpbmFsaXplQWxsSW5wdXRzKCk7XHJcbiAgICAgIHBzYnQuZXh0cmFjdFRyYW5zYWN0aW9uKHRydWUpO1xyXG4gICAgfSk7XHJcbiAgfSk7XHJcbn0pO1xyXG4iXX0=