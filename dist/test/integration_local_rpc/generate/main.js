"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const assert = require("assert");
const utxolib = require('../../../src');
const src_1 = require("../../../src");
const regtestNode_1 = require("./regtestNode");
const outputScripts_util_1 = require("./outputScripts.util");
const RpcClient_1 = require("./RpcClient");
const fixtures_1 = require("./fixtures");
const outputScripts_1 = require("../../../src/bitgo/outputScripts");
const faucet_1 = require("./faucet");
const bitgo_1 = require("../../../src/bitgo");
function getScriptTypes() {
    // FIXME(BG-66941): p2trMusig2 signing does not work in this test suite yet
    //  because the test suite is written with TransactionBuilder
    return outputScripts_util_1.scriptTypes.filter((scriptType) => scriptType);
}
async function printRpcHelp(rpc, network) {
    console.log(await rpc.getHelp());
}
async function printNodeHelp(network) {
    const { stdout, stderr } = await (0, regtestNode_1.getRegtestNodeHelp)(network);
    if (stderr) {
        console.error(stderr);
        throw new Error(`stderr`);
    }
    console.log(stdout);
}
async function initBlockchain(rpc, protocol) {
    let minBlocks = 300;
    switch (protocol.network) {
        case utxolib.networks.bitcoingoldTestnet:
            // The actual BTC/BTG fork flag only gets activated at this height.
            // On mainnet the height was at 491407 (Around 10/25/2017 12:00 UTC)
            // Prior to that, signatures that use the BIP143 sighash flag are invalid.
            // https://github.com/BTCGPU/BTCGPU/blob/71894be9/src/chainparams.cpp#L371
            minBlocks = 2000;
            break;
        case utxolib.networks.dogecoinTest:
            // Mine 1000 blocks to get at least 100 M doge to send
            minBlocks = 1000;
            break;
        case utxolib.networks.zcashTest:
            switch (protocol.version) {
                case bitgo_1.ZcashTransaction.VERSION4_BRANCH_CANOPY:
                    minBlocks = 400;
                    break;
                case bitgo_1.ZcashTransaction.VERSION4_BRANCH_NU5:
                case bitgo_1.ZcashTransaction.VERSION5_BRANCH_NU5:
                    minBlocks = 500;
                    break;
                default:
                    throw new Error(`unexpected protocol version ${protocol.version}`);
            }
            break;
    }
    const diff = minBlocks - (await rpc.getBlockCount());
    if (diff > 0) {
        console.log(`mining ${diff} blocks to reach height ${minBlocks}`);
        await (0, faucet_1.generateToFaucet)(rpc, diff);
    }
}
function toRegtestAddress(network, scriptType, script) {
    if (scriptType === 'p2wsh' || scriptType === 'p2wkh' || scriptType === 'p2tr' || scriptType === 'p2trMusig2') {
        switch (network) {
            case utxolib.networks.testnet:
                network = { bech32: 'bcrt' };
                break;
            case utxolib.networks.litecoinTest:
                network = { bech32: 'rltc' };
                break;
            case utxolib.networks.bitcoingoldTestnet:
                network = { bech32: 'btgrt' };
                break;
        }
    }
    return utxolib.address.fromOutputScript(script, network);
}
function getSpendTx(scriptType, inputTxs, script, protocol, amountType, p2trMusig2SpendType) {
    if (scriptType === 'p2trMusig2') {
        if (!p2trMusig2SpendType) {
            throw new Error('Invalid p2tr spend type');
        }
        const index = (0, outputScripts_util_1.getP2trMusig2Index)(p2trMusig2SpendType);
        const signers = p2trMusig2SpendType === 'keyPath' ? ['user', 'bitgo'] : ['user', 'backup'];
        const rootWalletKeys = new bitgo_1.RootWalletKeys(fixtures_1.fixtureKeys);
        return (0, outputScripts_util_1.createPsbtSpendTransaction)({
            rootWalletKeys,
            chain: (0, bitgo_1.getInternalChainCode)(scriptType),
            index,
            signers,
            inputTxs,
            network: protocol.network,
            version: protocol.version,
            amountType,
        });
    }
    else {
        return (0, outputScripts_util_1.createSpendTransaction)(fixtures_1.fixtureKeys, scriptType, inputTxs, script, protocol.network, protocol.version, amountType);
    }
}
async function createTransactionsForScriptType(rpc, scriptType, protocol, p2trMusig2SpendType) {
    const fullScriptType = `${scriptType}${p2trMusig2SpendType ? p2trMusig2SpendType : ''}`;
    const logTag = `createTransaction ${fullScriptType} ${(0, src_1.getNetworkName)(protocol.network)} v=${protocol.version}`;
    if (!(0, outputScripts_util_1.isSupportedDepositType)(protocol.network, scriptType)) {
        console.log(logTag + ': not supported, skipping');
        return;
    }
    console.log(logTag);
    let keys = fixtures_1.fixtureKeys;
    if (scriptType === 'p2trMusig2') {
        if (!p2trMusig2SpendType) {
            throw new Error('Invalid p2tr spend type');
        }
        const index = (0, outputScripts_util_1.getP2trMusig2Index)(p2trMusig2SpendType);
        const rootWalletKeys = new bitgo_1.RootWalletKeys(fixtures_1.fixtureKeys);
        keys = rootWalletKeys.deriveForChainAndIndex((0, bitgo_1.getInternalChainCode)(scriptType), index).triple;
    }
    const script = (0, outputScripts_util_1.createScriptPubKey)(keys, scriptType, protocol.network);
    const address = toRegtestAddress(protocol.network, scriptType, script);
    const deposit1Txid = await (0, faucet_1.sendFromFaucet)(rpc, address, 1);
    const deposit1Tx = await rpc.getRawTransaction(deposit1Txid);
    await (0, fixtures_1.writeTransactionFixtureWithInputs)(rpc, protocol, `deposit_${fullScriptType}.json`, deposit1Txid);
    if (!(0, outputScripts_1.isScriptType2Of3)(scriptType) || !(0, outputScripts_1.isSupportedScriptType)(protocol.network, scriptType)) {
        console.log(logTag + ': spend not supported, skipping spend');
        return;
    }
    let amount = 1;
    switch (protocol.network) {
        case utxolib.networks.dogecoinTest:
            // Exercise bigint precision with an amount > 100M and also where number would lose precision
            amount = 109999998.00000001;
            break;
    }
    const deposit2Txid = await (0, faucet_1.sendFromFaucet)(rpc, address, amount);
    const deposit2Tx = await rpc.getRawTransaction(deposit2Txid);
    let spendTx;
    switch (protocol.network) {
        case utxolib.networks.dogecoinTest:
            spendTx = getSpendTx(scriptType, [deposit1Tx, deposit2Tx], script, protocol, 'bigint');
            break;
        default:
            spendTx = getSpendTx(scriptType, [deposit1Tx, deposit2Tx], script, protocol, 'number', p2trMusig2SpendType);
            break;
    }
    const spendTxid = await rpc.sendRawTransaction(spendTx.toBuffer());
    assert.strictEqual(spendTxid, spendTx.getId());
    await (0, fixtures_1.writeTransactionFixtureWithInputs)(rpc, protocol, `spend_${fullScriptType}.json`, spendTxid);
}
async function createTransactions(rpc, protocol) {
    for (const scriptType of getScriptTypes()) {
        if (scriptType === 'p2trMusig2') {
            await createTransactionsForScriptType(rpc, scriptType, protocol, 'keyPath');
            await createTransactionsForScriptType(rpc, scriptType, protocol, 'scriptPath');
        }
        else {
            await createTransactionsForScriptType(rpc, scriptType, protocol);
        }
    }
}
async function withRpcClient(protocol, f) {
    await (0, fixtures_1.wipeFixtures)(protocol);
    let rpc;
    let node;
    if (process.env.UTXOLIB_TESTS_USE_DOCKER === '1') {
        node = await (0, regtestNode_1.getRegtestNode)(protocol.network);
        rpc = await RpcClient_1.RpcClient.forUrlWait(protocol.network, (0, regtestNode_1.getRegtestNodeUrl)(protocol.network));
    }
    else {
        rpc = await RpcClient_1.RpcClient.fromEnvvar(protocol.network);
    }
    try {
        await f(rpc);
    }
    catch (e) {
        console.error(`error for network ${(0, src_1.getNetworkName)(protocol.network)}`);
        throw e;
    }
    finally {
        if (node) {
            await node.stop();
        }
    }
}
async function run(protocol) {
    await withRpcClient(protocol, async (rpc) => {
        if (process.env.UTXOLIB_TESTS_PRINT_RPC_HELP === '1') {
            await printRpcHelp(rpc, protocol.network);
        }
        else {
            await initBlockchain(rpc, protocol);
            await createTransactions(rpc, protocol);
        }
    });
}
async function main(args) {
    const allowedNetworks = args.map((name) => {
        const network = utxolib.networks[name];
        if (!network) {
            throw new Error(`invalid network ${name}`);
        }
        return (0, src_1.getMainnet)(network);
    });
    for (const networkName of Object.keys(utxolib.networks)) {
        const network = utxolib.networks[networkName];
        if (!(0, src_1.isTestnet)(network)) {
            continue;
        }
        if (allowedNetworks.length && !allowedNetworks.some((n) => n === (0, src_1.getMainnet)(network))) {
            console.log(`skipping ${networkName}`);
            continue;
        }
        if (process.env.UTXOLIB_TESTS_PRINT_NODE_HELP === '1') {
            await printNodeHelp(network);
            continue;
        }
        for (const version of (0, fixtures_1.getProtocolVersions)(network)) {
            await run({ network, version });
        }
    }
}
if (require.main === module) {
    main(process.argv.slice(2)).catch((e) => {
        console.error(e);
        process.exit(1);
    });
}
//# sourceMappingURL=data:application/json;base64,