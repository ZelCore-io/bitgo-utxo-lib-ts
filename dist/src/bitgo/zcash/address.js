"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.toOutputScript = exports.fromOutputScript = exports.toBase58Check = exports.fromBase58Check = void 0;
const assert = require("assert");
const bitcoinjs_lib_1 = require("bitcoinjs-lib");
const types = require("bitcoinjs-lib/src/types");
const networks_1 = require("../../networks");
const bs58check = require('bs58check');
const typeforce = require('typeforce');
function fromBase58Check(address, network) {
    const payload = bs58check.decode(address);
    const version = (0, networks_1.isZcash8BitUnit)(network) ? payload.readUInt8(0) : payload.readUInt16BE(0);
    const hash = payload.slice(2);
    return { version, hash };
}
exports.fromBase58Check = fromBase58Check;
function toBase58Check(hash, version) {
    typeforce(types.tuple(types.Hash160bit, types.Number), arguments);
    const payload = Buffer.allocUnsafe(22);
    payload.writeUInt16BE(version, 0);
    hash.copy(payload, 2);
    return bs58check.encode(payload);
}
exports.toBase58Check = toBase58Check;
function fromOutputScript(outputScript, network) {
    assert((0, networks_1.isZcash)(network));
    let o;
    let prefix;
    try {
        o = bitcoinjs_lib_1.payments.p2pkh({ output: outputScript });
        prefix = network.pubKeyHash;
    }
    catch (e) { }
    try {
        o = bitcoinjs_lib_1.payments.p2sh({ output: outputScript });
        prefix = network.scriptHash;
    }
    catch (e) { }
    if (!o || !o.hash || prefix === undefined) {
        throw new Error(`unsupported outputScript`);
    }
    return toBase58Check(o.hash, prefix);
}
exports.fromOutputScript = fromOutputScript;
function toOutputScript(address, network) {
    assert((0, networks_1.isZcash)(network));
    const { version, hash } = fromBase58Check(address, network);
    if (version === network.pubKeyHash) {
        return bitcoinjs_lib_1.payments.p2pkh({ hash }).output;
    }
    if (version === network.scriptHash) {
        return bitcoinjs_lib_1.payments.p2sh({ hash }).output;
    }
    throw new Error(address + ' has no matching Script');
}
exports.toOutputScript = toOutputScript;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWRkcmVzcy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9iaXRnby96Y2FzaC9hZGRyZXNzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLGlDQUFpQztBQUNqQyxpREFBeUM7QUFDekMsaURBQWlEO0FBRWpELDZDQUFtRTtBQUNuRSxNQUFNLFNBQVMsR0FBRyxPQUFPLENBQUMsV0FBVyxDQUFDLENBQUM7QUFDdkMsTUFBTSxTQUFTLEdBQUcsT0FBTyxDQUFDLFdBQVcsQ0FBQyxDQUFDO0FBRXZDLFNBQWdCLGVBQWUsQ0FBQyxPQUFlLEVBQUUsT0FBZ0I7SUFDL0QsTUFBTSxPQUFPLEdBQUcsU0FBUyxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUMxQyxNQUFNLE9BQU8sR0FBRyxJQUFBLDBCQUFlLEVBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDMUYsTUFBTSxJQUFJLEdBQUcsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUM5QixPQUFPLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSxDQUFDO0FBQzNCLENBQUM7QUFMRCwwQ0FLQztBQUVELFNBQWdCLGFBQWEsQ0FBQyxJQUFZLEVBQUUsT0FBZTtJQUN6RCxTQUFTLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsVUFBVSxFQUFFLEtBQUssQ0FBQyxNQUFNLENBQUMsRUFBRSxTQUFTLENBQUMsQ0FBQztJQUVsRSxNQUFNLE9BQU8sR0FBRyxNQUFNLENBQUMsV0FBVyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQ3ZDLE9BQU8sQ0FBQyxhQUFhLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBQ2xDLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBQ3RCLE9BQU8sU0FBUyxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQztBQUNuQyxDQUFDO0FBUEQsc0NBT0M7QUFFRCxTQUFnQixnQkFBZ0IsQ0FBQyxZQUFvQixFQUFFLE9BQWdCO0lBQ3JFLE1BQU0sQ0FBQyxJQUFBLGtCQUFPLEVBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQztJQUN6QixJQUFJLENBQUMsQ0FBQztJQUNOLElBQUksTUFBTSxDQUFDO0lBQ1gsSUFBSTtRQUNGLENBQUMsR0FBRyx3QkFBUSxDQUFDLEtBQUssQ0FBQyxFQUFFLE1BQU0sRUFBRSxZQUFZLEVBQUUsQ0FBQyxDQUFDO1FBQzdDLE1BQU0sR0FBRyxPQUFPLENBQUMsVUFBVSxDQUFDO0tBQzdCO0lBQUMsT0FBTyxDQUFDLEVBQUUsR0FBRTtJQUNkLElBQUk7UUFDRixDQUFDLEdBQUcsd0JBQVEsQ0FBQyxJQUFJLENBQUMsRUFBRSxNQUFNLEVBQUUsWUFBWSxFQUFFLENBQUMsQ0FBQztRQUM1QyxNQUFNLEdBQUcsT0FBTyxDQUFDLFVBQVUsQ0FBQztLQUM3QjtJQUFDLE9BQU8sQ0FBQyxFQUFFLEdBQUU7SUFDZCxJQUFJLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksSUFBSSxNQUFNLEtBQUssU0FBUyxFQUFFO1FBQ3pDLE1BQU0sSUFBSSxLQUFLLENBQUMsMEJBQTBCLENBQUMsQ0FBQztLQUM3QztJQUNELE9BQU8sYUFBYSxDQUFDLENBQUMsQ0FBQyxJQUFJLEVBQUUsTUFBTSxDQUFDLENBQUM7QUFDdkMsQ0FBQztBQWhCRCw0Q0FnQkM7QUFFRCxTQUFnQixjQUFjLENBQUMsT0FBZSxFQUFFLE9BQWdCO0lBQzlELE1BQU0sQ0FBQyxJQUFBLGtCQUFPLEVBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQztJQUN6QixNQUFNLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSxHQUFHLGVBQWUsQ0FBQyxPQUFPLEVBQUUsT0FBTyxDQUFDLENBQUM7SUFDNUQsSUFBSSxPQUFPLEtBQUssT0FBTyxDQUFDLFVBQVUsRUFBRTtRQUNsQyxPQUFPLHdCQUFRLENBQUMsS0FBSyxDQUFDLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQyxNQUFnQixDQUFDO0tBQ2xEO0lBQ0QsSUFBSSxPQUFPLEtBQUssT0FBTyxDQUFDLFVBQVUsRUFBRTtRQUNsQyxPQUFPLHdCQUFRLENBQUMsSUFBSSxDQUFDLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQyxNQUFnQixDQUFDO0tBQ2pEO0lBQ0QsTUFBTSxJQUFJLEtBQUssQ0FBQyxPQUFPLEdBQUcseUJBQXlCLENBQUMsQ0FBQztBQUN2RCxDQUFDO0FBVkQsd0NBVUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBhc3NlcnQgZnJvbSAnYXNzZXJ0JztcclxuaW1wb3J0IHsgcGF5bWVudHMgfSBmcm9tICdiaXRjb2luanMtbGliJztcclxuaW1wb3J0ICogYXMgdHlwZXMgZnJvbSAnYml0Y29pbmpzLWxpYi9zcmMvdHlwZXMnO1xyXG5pbXBvcnQgeyBCYXNlNThDaGVja1Jlc3VsdCB9IGZyb20gJ2JpdGNvaW5qcy1saWIvc3JjL2FkZHJlc3MnO1xyXG5pbXBvcnQgeyBpc1pjYXNoLCBOZXR3b3JrLCBpc1pjYXNoOEJpdFVuaXQgfSBmcm9tICcuLi8uLi9uZXR3b3Jrcyc7XHJcbmNvbnN0IGJzNThjaGVjayA9IHJlcXVpcmUoJ2JzNThjaGVjaycpO1xyXG5jb25zdCB0eXBlZm9yY2UgPSByZXF1aXJlKCd0eXBlZm9yY2UnKTtcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBmcm9tQmFzZTU4Q2hlY2soYWRkcmVzczogc3RyaW5nLCBuZXR3b3JrOiBOZXR3b3JrKTogQmFzZTU4Q2hlY2tSZXN1bHQge1xyXG4gIGNvbnN0IHBheWxvYWQgPSBiczU4Y2hlY2suZGVjb2RlKGFkZHJlc3MpO1xyXG4gIGNvbnN0IHZlcnNpb24gPSBpc1pjYXNoOEJpdFVuaXQobmV0d29yaykgPyBwYXlsb2FkLnJlYWRVSW50OCgwKSA6IHBheWxvYWQucmVhZFVJbnQxNkJFKDApO1xyXG4gIGNvbnN0IGhhc2ggPSBwYXlsb2FkLnNsaWNlKDIpO1xyXG4gIHJldHVybiB7IHZlcnNpb24sIGhhc2ggfTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHRvQmFzZTU4Q2hlY2soaGFzaDogQnVmZmVyLCB2ZXJzaW9uOiBudW1iZXIpOiBzdHJpbmcge1xyXG4gIHR5cGVmb3JjZSh0eXBlcy50dXBsZSh0eXBlcy5IYXNoMTYwYml0LCB0eXBlcy5OdW1iZXIpLCBhcmd1bWVudHMpO1xyXG5cclxuICBjb25zdCBwYXlsb2FkID0gQnVmZmVyLmFsbG9jVW5zYWZlKDIyKTtcclxuICBwYXlsb2FkLndyaXRlVUludDE2QkUodmVyc2lvbiwgMCk7XHJcbiAgaGFzaC5jb3B5KHBheWxvYWQsIDIpO1xyXG4gIHJldHVybiBiczU4Y2hlY2suZW5jb2RlKHBheWxvYWQpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZnJvbU91dHB1dFNjcmlwdChvdXRwdXRTY3JpcHQ6IEJ1ZmZlciwgbmV0d29yazogTmV0d29yayk6IHN0cmluZyB7XHJcbiAgYXNzZXJ0KGlzWmNhc2gobmV0d29yaykpO1xyXG4gIGxldCBvO1xyXG4gIGxldCBwcmVmaXg7XHJcbiAgdHJ5IHtcclxuICAgIG8gPSBwYXltZW50cy5wMnBraCh7IG91dHB1dDogb3V0cHV0U2NyaXB0IH0pO1xyXG4gICAgcHJlZml4ID0gbmV0d29yay5wdWJLZXlIYXNoO1xyXG4gIH0gY2F0Y2ggKGUpIHt9XHJcbiAgdHJ5IHtcclxuICAgIG8gPSBwYXltZW50cy5wMnNoKHsgb3V0cHV0OiBvdXRwdXRTY3JpcHQgfSk7XHJcbiAgICBwcmVmaXggPSBuZXR3b3JrLnNjcmlwdEhhc2g7XHJcbiAgfSBjYXRjaCAoZSkge31cclxuICBpZiAoIW8gfHwgIW8uaGFzaCB8fCBwcmVmaXggPT09IHVuZGVmaW5lZCkge1xyXG4gICAgdGhyb3cgbmV3IEVycm9yKGB1bnN1cHBvcnRlZCBvdXRwdXRTY3JpcHRgKTtcclxuICB9XHJcbiAgcmV0dXJuIHRvQmFzZTU4Q2hlY2soby5oYXNoLCBwcmVmaXgpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gdG9PdXRwdXRTY3JpcHQoYWRkcmVzczogc3RyaW5nLCBuZXR3b3JrOiBOZXR3b3JrKTogQnVmZmVyIHtcclxuICBhc3NlcnQoaXNaY2FzaChuZXR3b3JrKSk7XHJcbiAgY29uc3QgeyB2ZXJzaW9uLCBoYXNoIH0gPSBmcm9tQmFzZTU4Q2hlY2soYWRkcmVzcywgbmV0d29yayk7XHJcbiAgaWYgKHZlcnNpb24gPT09IG5ldHdvcmsucHViS2V5SGFzaCkge1xyXG4gICAgcmV0dXJuIHBheW1lbnRzLnAycGtoKHsgaGFzaCB9KS5vdXRwdXQgYXMgQnVmZmVyO1xyXG4gIH1cclxuICBpZiAodmVyc2lvbiA9PT0gbmV0d29yay5zY3JpcHRIYXNoKSB7XHJcbiAgICByZXR1cm4gcGF5bWVudHMucDJzaCh7IGhhc2ggfSkub3V0cHV0IGFzIEJ1ZmZlcjtcclxuICB9XHJcbiAgdGhyb3cgbmV3IEVycm9yKGFkZHJlc3MgKyAnIGhhcyBubyBtYXRjaGluZyBTY3JpcHQnKTtcclxufVxyXG4iXX0=