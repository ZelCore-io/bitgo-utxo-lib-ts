"use strict";
/**
 * Contains helper methods for determining if a transaction output belongs to a given BitGo wallet
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.getTotalAmountOfInternalOutputs = exports.findInternalOutputIndices = exports.getTotalAmountOfWalletOutputs = exports.findWalletOutputIndices = exports.isWalletOutput = exports.deriveKeyPairForOutput = void 0;
const types_1 = require("../../types");
const outputScripts_1 = require("../../outputScripts");
const UtxoPsbt_1 = require("../../UtxoPsbt");
const utils_1 = require("bip174/src/lib/utils");
const RootNodes_1 = require("./RootNodes");
/**
 * Derives the appropriate BIP32 key pair for a given output.
 * It uses either tapBip32Derivation or bip32Derivation paths from the output.
 * @param bip32 - The BIP32Interface object to derive from.
 * @param output - The specific PSBT output to derive for.
 * @returns The derived BIP32 key pair if master fingerprint matches, or undefined.
 */
function deriveKeyPairForOutput(bip32, output) {
    var _a, _b;
    return ((_a = output.tapBip32Derivation) === null || _a === void 0 ? void 0 : _a.length)
        ? UtxoPsbt_1.UtxoPsbt.deriveKeyPair(bip32, output.tapBip32Derivation, { ignoreY: true })
        : ((_b = output.bip32Derivation) === null || _b === void 0 ? void 0 : _b.length)
            ? UtxoPsbt_1.UtxoPsbt.deriveKeyPair(bip32, output.bip32Derivation, { ignoreY: false })
            : undefined;
}
exports.deriveKeyPairForOutput = deriveKeyPairForOutput;
/**
 * Determines if a specified output in a PSBT is an output of the wallet represented by the given root nodes.
 * @param psbt - The PSBT to check.
 * @param outputIndex - The index of the output to check.
 * @param rootWalletNodes - The root nodes representing the wallet.
 * @returns A boolean indicating if the output belongs to the wallet.
 */
function isWalletOutput(psbt, outputIndex, rootWalletNodes) {
    const output = (0, utils_1.checkForOutput)(psbt.data.outputs, outputIndex);
    const pubKeys = rootWalletNodes.map((rootNode) => { var _a; return (_a = deriveKeyPairForOutput(rootNode, output)) === null || _a === void 0 ? void 0 : _a.publicKey; });
    if (!(0, types_1.isBufferArray)(pubKeys)) {
        return false;
    }
    const outputScript = psbt.getOutputScript(outputIndex);
    return outputScripts_1.scriptTypes2Of3.some((scriptType) => (0, outputScripts_1.createOutputScript2of3)(pubKeys, scriptType).scriptPubKey.equals(outputScript));
}
exports.isWalletOutput = isWalletOutput;
/**
 * Finds indices of all outputs in a PSBT that belong to the wallet represented by the given root nodes.
 * @param psbt - The PSBT to search through.
 * @param rootWalletNodes - The root nodes representing the wallet.
 * @returns An array of indices corresponding to wallet outputs.
 */
function findWalletOutputIndices(psbt, rootWalletNodes) {
    return psbt.data.outputs.flatMap((_, i) => (isWalletOutput(psbt, i, rootWalletNodes) ? [i] : []));
}
exports.findWalletOutputIndices = findWalletOutputIndices;
/**
 * Calculates the total amount of all wallet outputs in a PSBT for the wallet represented by the given root nodes.
 * @param psbt - The PSBT to calculate for.
 * @param rootWalletNodes - The root nodes representing the wallet.
 * @returns The total amount of wallet outputs.
 */
function getTotalAmountOfWalletOutputs(psbt, rootWalletNodes) {
    const indices = findWalletOutputIndices(psbt, rootWalletNodes);
    const txOutputs = psbt.txOutputs;
    return indices.reduce((sum, i) => sum + txOutputs[i].value, BigInt(0));
}
exports.getTotalAmountOfWalletOutputs = getTotalAmountOfWalletOutputs;
/**
 * Finds indices of all internal outputs in a PSBT, identified as outputs belonging to the wallet's root nodes within the PSBT.
 * @param psbt - The PSBT containing the wallet's root nodes as indicated by global Xpubs.
 * @returns An array of indices of internal outputs.
 */
function findInternalOutputIndices(psbt) {
    const rootNodes = (0, RootNodes_1.getSortedRootNodes)(psbt);
    return findWalletOutputIndices(psbt, rootNodes);
}
exports.findInternalOutputIndices = findInternalOutputIndices;
/**
 * Calculates the total amount of all internal outputs in a PSBT, identified as outputs belonging to the wallet's root nodes within the PSBT.
 * @param psbt - The PSBT containing the wallet's root nodes as indicated by global Xpubs.
 * @returns The total amount of internal outputs.
 */
function getTotalAmountOfInternalOutputs(psbt) {
    const rootNodes = (0, RootNodes_1.getSortedRootNodes)(psbt);
    return getTotalAmountOfWalletOutputs(psbt, rootNodes);
}
exports.getTotalAmountOfInternalOutputs = getTotalAmountOfInternalOutputs;
//# sourceMappingURL=data:application/json;base64,