"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const assert = require("assert");
const fixtures_1 = require("./fixtures");
const address_1 = require("../../../src/bitgo/bitcoincash/address");
const src_1 = require("../../../src");
const networks_1 = require("../../../src/networks");
(0, src_1.getNetworkList)()
    .filter(networks_1.isBitcoinCash)
    .forEach((network) => {
    describe(`Cashaddr [${(0, src_1.getNetworkName)(network)}]`, function () {
        it('rejects mixed-case cashaddr', function () {
            (0, fixtures_1.getTestVectorsBitcoinCashAddressTranslations)(network)
                .filter((v) => v.format === 'cashaddr')
                .forEach((v) => {
                const uppercase = [...v.input.toUpperCase()];
                const lowercase = [...v.input.toLowerCase()];
                const mixedCase = [...v.input].map((c, i) => (i % 2 === 0 ? uppercase[i] : lowercase[i]));
                assert.doesNotThrow(() => (0, address_1.toOutputScriptFromCashAddress)(lowercase.join(''), network));
                assert.doesNotThrow(() => (0, address_1.toOutputScriptFromCashAddress)(uppercase.join(''), network));
                assert.throws(() => (0, address_1.toOutputScriptFromCashAddress)(mixedCase.join(''), network));
            });
        });
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FzaGFkZHIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi90ZXN0L2FkZHJlc3MvYml0Y29pbmNhc2gvY2FzaGFkZHIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxpQ0FBaUM7QUFFakMseUNBQTBFO0FBQzFFLG9FQUF1RjtBQUN2RixzQ0FBOEQ7QUFDOUQsb0RBQXNEO0FBRXRELElBQUEsb0JBQWMsR0FBRTtLQUNiLE1BQU0sQ0FBQyx3QkFBYSxDQUFDO0tBQ3JCLE9BQU8sQ0FBQyxDQUFDLE9BQU8sRUFBRSxFQUFFO0lBQ25CLFFBQVEsQ0FBQyxhQUFhLElBQUEsb0JBQWMsRUFBQyxPQUFPLENBQUMsR0FBRyxFQUFFO1FBQ2hELEVBQUUsQ0FBQyw2QkFBNkIsRUFBRTtZQUNoQyxJQUFBLHVEQUE0QyxFQUFDLE9BQU8sQ0FBQztpQkFDbEQsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsTUFBTSxLQUFLLFVBQVUsQ0FBQztpQkFDdEMsT0FBTyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUU7Z0JBQ2IsTUFBTSxTQUFTLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxLQUFLLENBQUMsV0FBVyxFQUFFLENBQUMsQ0FBQztnQkFDN0MsTUFBTSxTQUFTLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxLQUFLLENBQUMsV0FBVyxFQUFFLENBQUMsQ0FBQztnQkFDN0MsTUFBTSxTQUFTLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQzFGLE1BQU0sQ0FBQyxZQUFZLENBQUMsR0FBRyxFQUFFLENBQUMsSUFBQSx1Q0FBNkIsRUFBQyxTQUFTLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxFQUFFLE9BQU8sQ0FBQyxDQUFDLENBQUM7Z0JBQ3RGLE1BQU0sQ0FBQyxZQUFZLENBQUMsR0FBRyxFQUFFLENBQUMsSUFBQSx1Q0FBNkIsRUFBQyxTQUFTLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxFQUFFLE9BQU8sQ0FBQyxDQUFDLENBQUM7Z0JBQ3RGLE1BQU0sQ0FBQyxNQUFNLENBQUMsR0FBRyxFQUFFLENBQUMsSUFBQSx1Q0FBNkIsRUFBQyxTQUFTLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxFQUFFLE9BQU8sQ0FBQyxDQUFDLENBQUM7WUFDbEYsQ0FBQyxDQUFDLENBQUM7UUFDUCxDQUFDLENBQUMsQ0FBQztJQUNMLENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBhc3NlcnQgZnJvbSAnYXNzZXJ0JztcclxuXHJcbmltcG9ydCB7IGdldFRlc3RWZWN0b3JzQml0Y29pbkNhc2hBZGRyZXNzVHJhbnNsYXRpb25zIH0gZnJvbSAnLi9maXh0dXJlcyc7XHJcbmltcG9ydCB7IHRvT3V0cHV0U2NyaXB0RnJvbUNhc2hBZGRyZXNzIH0gZnJvbSAnLi4vLi4vLi4vc3JjL2JpdGdvL2JpdGNvaW5jYXNoL2FkZHJlc3MnO1xyXG5pbXBvcnQgeyBnZXROZXR3b3JrTGlzdCwgZ2V0TmV0d29ya05hbWUgfSBmcm9tICcuLi8uLi8uLi9zcmMnO1xyXG5pbXBvcnQgeyBpc0JpdGNvaW5DYXNoIH0gZnJvbSAnLi4vLi4vLi4vc3JjL25ldHdvcmtzJztcclxuXHJcbmdldE5ldHdvcmtMaXN0KClcclxuICAuZmlsdGVyKGlzQml0Y29pbkNhc2gpXHJcbiAgLmZvckVhY2goKG5ldHdvcmspID0+IHtcclxuICAgIGRlc2NyaWJlKGBDYXNoYWRkciBbJHtnZXROZXR3b3JrTmFtZShuZXR3b3JrKX1dYCwgZnVuY3Rpb24gKCkge1xyXG4gICAgICBpdCgncmVqZWN0cyBtaXhlZC1jYXNlIGNhc2hhZGRyJywgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGdldFRlc3RWZWN0b3JzQml0Y29pbkNhc2hBZGRyZXNzVHJhbnNsYXRpb25zKG5ldHdvcmspXHJcbiAgICAgICAgICAuZmlsdGVyKCh2KSA9PiB2LmZvcm1hdCA9PT0gJ2Nhc2hhZGRyJylcclxuICAgICAgICAgIC5mb3JFYWNoKCh2KSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IHVwcGVyY2FzZSA9IFsuLi52LmlucHV0LnRvVXBwZXJDYXNlKCldO1xyXG4gICAgICAgICAgICBjb25zdCBsb3dlcmNhc2UgPSBbLi4udi5pbnB1dC50b0xvd2VyQ2FzZSgpXTtcclxuICAgICAgICAgICAgY29uc3QgbWl4ZWRDYXNlID0gWy4uLnYuaW5wdXRdLm1hcCgoYywgaSkgPT4gKGkgJSAyID09PSAwID8gdXBwZXJjYXNlW2ldIDogbG93ZXJjYXNlW2ldKSk7XHJcbiAgICAgICAgICAgIGFzc2VydC5kb2VzTm90VGhyb3coKCkgPT4gdG9PdXRwdXRTY3JpcHRGcm9tQ2FzaEFkZHJlc3MobG93ZXJjYXNlLmpvaW4oJycpLCBuZXR3b3JrKSk7XHJcbiAgICAgICAgICAgIGFzc2VydC5kb2VzTm90VGhyb3coKCkgPT4gdG9PdXRwdXRTY3JpcHRGcm9tQ2FzaEFkZHJlc3ModXBwZXJjYXNlLmpvaW4oJycpLCBuZXR3b3JrKSk7XHJcbiAgICAgICAgICAgIGFzc2VydC50aHJvd3MoKCkgPT4gdG9PdXRwdXRTY3JpcHRGcm9tQ2FzaEFkZHJlc3MobWl4ZWRDYXNlLmpvaW4oJycpLCBuZXR3b3JrKSk7XHJcbiAgICAgICAgICB9KTtcclxuICAgICAgfSk7XHJcbiAgICB9KTtcclxuICB9KTtcclxuIl19