"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const assert = require("assert");
const bitgo_1 = require("../../../src/bitgo");
const outputScripts_1 = require("../../../src/bitgo/outputScripts");
describe('chain codes', function () {
    it('map to scriptTypes and back', function () {
        bitgo_1.chainCodes.forEach((c) => {
            assert.strict((0, bitgo_1.isChainCode)(c));
            assert.strict(!(0, bitgo_1.isChainCode)(c + 2));
            assert.strict((0, bitgo_1.toChainPair)(c).includes(c));
            assert.throws(() => (0, bitgo_1.toChainPair)((c + 2)));
        });
        assert.deepStrictEqual(bitgo_1.chainCodes.map((c) => (0, bitgo_1.toChainPair)(c)), [
            [0, 1],
            [0, 1],
            [10, 11],
            [10, 11],
            [20, 21],
            [20, 21],
            [30, 31],
            [30, 31],
            [40, 41],
            [40, 41],
        ]);
        outputScripts_1.scriptTypes2Of3.forEach((t) => {
            assert.strictEqual(t, (0, bitgo_1.scriptTypeForChain)((0, bitgo_1.getExternalChainCode)(t)));
            assert.strictEqual(t, (0, bitgo_1.scriptTypeForChain)((0, bitgo_1.getInternalChainCode)(t)));
        });
        assert.deepStrictEqual(bitgo_1.chainCodes.map((c) => (0, bitgo_1.scriptTypeForChain)(c)), ['p2sh', 'p2sh', 'p2shP2wsh', 'p2shP2wsh', 'p2wsh', 'p2wsh', 'p2tr', 'p2tr', 'p2trMusig2', 'p2trMusig2']);
        bitgo_1.chainCodes.forEach((c) => {
            assert.strict((0, bitgo_1.isExternalChainCode)(c) || (0, bitgo_1.isInternalChainCode)(c));
            assert.strictEqual((0, bitgo_1.isExternalChainCode)(c) && (0, bitgo_1.isInternalChainCode)(c), false);
            assert.strictEqual((0, bitgo_1.isExternalChainCode)(c) ? (0, bitgo_1.getExternalChainCode)(c) : (0, bitgo_1.getInternalChainCode)(c), c);
        });
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2hhaW5zLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vdGVzdC9iaXRnby93YWxsZXQvY2hhaW5zLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsaUNBQWlDO0FBQ2pDLDhDQVU0QjtBQUM1QixvRUFBbUU7QUFFbkUsUUFBUSxDQUFDLGFBQWEsRUFBRTtJQUN0QixFQUFFLENBQUMsNkJBQTZCLEVBQUU7UUFDaEMsa0JBQVUsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRTtZQUN2QixNQUFNLENBQUMsTUFBTSxDQUFDLElBQUEsbUJBQVcsRUFBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQzlCLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxJQUFBLG1CQUFXLEVBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDbkMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxJQUFBLG1CQUFXLEVBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDMUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxHQUFHLEVBQUUsQ0FBQyxJQUFBLG1CQUFXLEVBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFjLENBQUMsQ0FBQyxDQUFDO1FBQ3pELENBQUMsQ0FBQyxDQUFDO1FBRUgsTUFBTSxDQUFDLGVBQWUsQ0FDcEIsa0JBQVUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLElBQUEsbUJBQVcsRUFBQyxDQUFDLENBQUMsQ0FBQyxFQUNyQztZQUNFLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQztZQUNOLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQztZQUVOLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQztZQUNSLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQztZQUVSLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQztZQUNSLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQztZQUVSLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQztZQUNSLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQztZQUVSLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQztZQUNSLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQztTQUNULENBQ0YsQ0FBQztRQUVGLCtCQUFlLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUU7WUFDNUIsTUFBTSxDQUFDLFdBQVcsQ0FBQyxDQUFDLEVBQUUsSUFBQSwwQkFBa0IsRUFBQyxJQUFBLDRCQUFvQixFQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUNuRSxNQUFNLENBQUMsV0FBVyxDQUFDLENBQUMsRUFBRSxJQUFBLDBCQUFrQixFQUFDLElBQUEsNEJBQW9CLEVBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3JFLENBQUMsQ0FBQyxDQUFDO1FBRUgsTUFBTSxDQUFDLGVBQWUsQ0FDcEIsa0JBQVUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLElBQUEsMEJBQWtCLEVBQUMsQ0FBQyxDQUFDLENBQUMsRUFDNUMsQ0FBQyxNQUFNLEVBQUUsTUFBTSxFQUFFLFdBQVcsRUFBRSxXQUFXLEVBQUUsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxFQUFFLFlBQVksRUFBRSxZQUFZLENBQUMsQ0FDekcsQ0FBQztRQUVGLGtCQUFVLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUU7WUFDdkIsTUFBTSxDQUFDLE1BQU0sQ0FBQyxJQUFBLDJCQUFtQixFQUFDLENBQUMsQ0FBQyxJQUFJLElBQUEsMkJBQW1CLEVBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUNoRSxNQUFNLENBQUMsV0FBVyxDQUFDLElBQUEsMkJBQW1CLEVBQUMsQ0FBQyxDQUFDLElBQUksSUFBQSwyQkFBbUIsRUFBQyxDQUFDLENBQUMsRUFBRSxLQUFLLENBQUMsQ0FBQztZQUM1RSxNQUFNLENBQUMsV0FBVyxDQUFDLElBQUEsMkJBQW1CLEVBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUEsNEJBQW9CLEVBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUEsNEJBQW9CLEVBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFDcEcsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDLENBQUMsQ0FBQztBQUNMLENBQUMsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgYXNzZXJ0IGZyb20gJ2Fzc2VydCc7XHJcbmltcG9ydCB7XHJcbiAgQ2hhaW5Db2RlLFxyXG4gIGNoYWluQ29kZXMsXHJcbiAgZ2V0RXh0ZXJuYWxDaGFpbkNvZGUsXHJcbiAgZ2V0SW50ZXJuYWxDaGFpbkNvZGUsXHJcbiAgaXNDaGFpbkNvZGUsXHJcbiAgaXNFeHRlcm5hbENoYWluQ29kZSxcclxuICBpc0ludGVybmFsQ2hhaW5Db2RlLFxyXG4gIHNjcmlwdFR5cGVGb3JDaGFpbixcclxuICB0b0NoYWluUGFpcixcclxufSBmcm9tICcuLi8uLi8uLi9zcmMvYml0Z28nO1xyXG5pbXBvcnQgeyBzY3JpcHRUeXBlczJPZjMgfSBmcm9tICcuLi8uLi8uLi9zcmMvYml0Z28vb3V0cHV0U2NyaXB0cyc7XHJcblxyXG5kZXNjcmliZSgnY2hhaW4gY29kZXMnLCBmdW5jdGlvbiAoKSB7XHJcbiAgaXQoJ21hcCB0byBzY3JpcHRUeXBlcyBhbmQgYmFjaycsIGZ1bmN0aW9uICgpIHtcclxuICAgIGNoYWluQ29kZXMuZm9yRWFjaCgoYykgPT4ge1xyXG4gICAgICBhc3NlcnQuc3RyaWN0KGlzQ2hhaW5Db2RlKGMpKTtcclxuICAgICAgYXNzZXJ0LnN0cmljdCghaXNDaGFpbkNvZGUoYyArIDIpKTtcclxuICAgICAgYXNzZXJ0LnN0cmljdCh0b0NoYWluUGFpcihjKS5pbmNsdWRlcyhjKSk7XHJcbiAgICAgIGFzc2VydC50aHJvd3MoKCkgPT4gdG9DaGFpblBhaXIoKGMgKyAyKSBhcyBDaGFpbkNvZGUpKTtcclxuICAgIH0pO1xyXG5cclxuICAgIGFzc2VydC5kZWVwU3RyaWN0RXF1YWwoXHJcbiAgICAgIGNoYWluQ29kZXMubWFwKChjKSA9PiB0b0NoYWluUGFpcihjKSksXHJcbiAgICAgIFtcclxuICAgICAgICBbMCwgMV0sXHJcbiAgICAgICAgWzAsIDFdLFxyXG5cclxuICAgICAgICBbMTAsIDExXSxcclxuICAgICAgICBbMTAsIDExXSxcclxuXHJcbiAgICAgICAgWzIwLCAyMV0sXHJcbiAgICAgICAgWzIwLCAyMV0sXHJcblxyXG4gICAgICAgIFszMCwgMzFdLFxyXG4gICAgICAgIFszMCwgMzFdLFxyXG5cclxuICAgICAgICBbNDAsIDQxXSxcclxuICAgICAgICBbNDAsIDQxXSxcclxuICAgICAgXVxyXG4gICAgKTtcclxuXHJcbiAgICBzY3JpcHRUeXBlczJPZjMuZm9yRWFjaCgodCkgPT4ge1xyXG4gICAgICBhc3NlcnQuc3RyaWN0RXF1YWwodCwgc2NyaXB0VHlwZUZvckNoYWluKGdldEV4dGVybmFsQ2hhaW5Db2RlKHQpKSk7XHJcbiAgICAgIGFzc2VydC5zdHJpY3RFcXVhbCh0LCBzY3JpcHRUeXBlRm9yQ2hhaW4oZ2V0SW50ZXJuYWxDaGFpbkNvZGUodCkpKTtcclxuICAgIH0pO1xyXG5cclxuICAgIGFzc2VydC5kZWVwU3RyaWN0RXF1YWwoXHJcbiAgICAgIGNoYWluQ29kZXMubWFwKChjKSA9PiBzY3JpcHRUeXBlRm9yQ2hhaW4oYykpLFxyXG4gICAgICBbJ3Ayc2gnLCAncDJzaCcsICdwMnNoUDJ3c2gnLCAncDJzaFAyd3NoJywgJ3Ayd3NoJywgJ3Ayd3NoJywgJ3AydHInLCAncDJ0cicsICdwMnRyTXVzaWcyJywgJ3AydHJNdXNpZzInXVxyXG4gICAgKTtcclxuXHJcbiAgICBjaGFpbkNvZGVzLmZvckVhY2goKGMpID0+IHtcclxuICAgICAgYXNzZXJ0LnN0cmljdChpc0V4dGVybmFsQ2hhaW5Db2RlKGMpIHx8IGlzSW50ZXJuYWxDaGFpbkNvZGUoYykpO1xyXG4gICAgICBhc3NlcnQuc3RyaWN0RXF1YWwoaXNFeHRlcm5hbENoYWluQ29kZShjKSAmJiBpc0ludGVybmFsQ2hhaW5Db2RlKGMpLCBmYWxzZSk7XHJcbiAgICAgIGFzc2VydC5zdHJpY3RFcXVhbChpc0V4dGVybmFsQ2hhaW5Db2RlKGMpID8gZ2V0RXh0ZXJuYWxDaGFpbkNvZGUoYykgOiBnZXRJbnRlcm5hbENoYWluQ29kZShjKSwgYyk7XHJcbiAgICB9KTtcclxuICB9KTtcclxufSk7XHJcbiJdfQ==