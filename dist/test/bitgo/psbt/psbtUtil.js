"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.constructTransactionUsingTxBuilder = exports.signTxBuilder = exports.signPsbt = exports.toBigInt = exports.assertEqualTransactions = exports.validatePsbtParsing = void 0;
const bitgo_1 = require("../../../src/bitgo");
const Psbt_1 = require("../../../src/bitgo/wallet/Psbt");
const assert = require("assert");
function validateScript(psbtParsed, txParsed) {
    if (txParsed === undefined) {
        assert.deepStrictEqual(Buffer.isBuffer(psbtParsed.pubScript), true);
        if (psbtParsed.scriptType === 'p2sh') {
            assert.deepStrictEqual(Buffer.isBuffer(psbtParsed.redeemScript), true);
            assert.deepStrictEqual(Buffer.isBuffer(psbtParsed.witnessScript), false);
        }
        else if (psbtParsed.scriptType === 'p2wsh') {
            assert.deepStrictEqual(Buffer.isBuffer(psbtParsed.redeemScript), false);
            assert.deepStrictEqual(Buffer.isBuffer(psbtParsed.witnessScript), true);
        }
        else if (psbtParsed.scriptType === 'p2shP2wsh') {
            assert.deepStrictEqual(Buffer.isBuffer(psbtParsed.redeemScript), true);
            assert.deepStrictEqual(Buffer.isBuffer(psbtParsed.witnessScript), true);
        }
        else if (psbtParsed.scriptType === 'taprootScriptPathSpend') {
            assert.deepStrictEqual((0, bitgo_1.isValidControlBock)(psbtParsed.controlBlock), true);
            assert.deepStrictEqual(psbtParsed.scriptPathLevel, (0, bitgo_1.calculateScriptPathLevel)(psbtParsed.controlBlock));
            assert.deepStrictEqual(psbtParsed.leafVersion, (0, bitgo_1.getLeafVersion)(psbtParsed.controlBlock));
        }
    }
    else {
        assert.ok(txParsed.scriptType !== 'taprootKeyPathSpend');
        assert.deepStrictEqual(txParsed.scriptType, psbtParsed.scriptType);
        assert.deepStrictEqual(txParsed.pubScript, psbtParsed.pubScript);
        if ((txParsed.scriptType === 'p2sh' && psbtParsed.scriptType === 'p2sh') ||
            (txParsed.scriptType === 'p2wsh' && psbtParsed.scriptType === 'p2wsh') ||
            (txParsed.scriptType === 'p2shP2wsh' && psbtParsed.scriptType === 'p2shP2wsh')) {
            assert.deepStrictEqual(txParsed.redeemScript, psbtParsed.redeemScript);
            assert.deepStrictEqual(txParsed.witnessScript, psbtParsed.witnessScript);
        }
        else if (txParsed.scriptType === 'taprootScriptPathSpend' && psbtParsed.scriptType === 'taprootScriptPathSpend') {
            // To ensure script path p2tr
            assert.deepStrictEqual(txParsed.publicKeys, psbtParsed.publicKeys);
            const txParsedP2trScriptPath = txParsed;
            assert.deepStrictEqual(txParsedP2trScriptPath.controlBlock, psbtParsed.controlBlock);
            assert.deepStrictEqual(txParsedP2trScriptPath.scriptPathLevel, psbtParsed.scriptPathLevel);
            assert.deepStrictEqual(txParsedP2trScriptPath.leafVersion, psbtParsed.leafVersion);
        }
    }
}
function validatePublicKeys(psbtParsed, txParsed) {
    var _a;
    if (txParsed === undefined) {
        assert.deepStrictEqual(psbtParsed.publicKeys.length, 3);
        psbtParsed.publicKeys.forEach((publicKey) => {
            assert.deepStrictEqual(Buffer.isBuffer(publicKey), true);
        });
    }
    else {
        assert.ok(txParsed.scriptType !== 'taprootKeyPathSpend');
        assert.deepStrictEqual(txParsed.publicKeys.length, (_a = psbtParsed.publicKeys) === null || _a === void 0 ? void 0 : _a.length);
        const pubKeyMatch = txParsed.publicKeys.every((txPubKey) => { var _a; return (_a = psbtParsed.publicKeys) === null || _a === void 0 ? void 0 : _a.some((psbtPubKey) => psbtPubKey.equals(txPubKey)); });
        assert.deepStrictEqual(pubKeyMatch, true);
    }
}
function validateSignature(psbtParsed, txParsed) {
    var _a;
    if (txParsed === undefined) {
        assert.deepStrictEqual(psbtParsed.signatures, undefined);
    }
    else {
        const txSignatures = txParsed.signatures.filter((txSig) => Buffer.isBuffer(txSig) && !(0, bitgo_1.isPlaceholderSignature)(txSig));
        assert.deepStrictEqual(txSignatures.length, (_a = psbtParsed.signatures) === null || _a === void 0 ? void 0 : _a.length);
        if (txSignatures.length < 1) {
            return;
        }
        const sigMatch = txSignatures.every((txSig) => { var _a; return Buffer.isBuffer(txSig) ? (_a = psbtParsed.signatures) === null || _a === void 0 ? void 0 : _a.some((psbtSig) => psbtSig.equals(txSig)) : true; });
        assert.deepStrictEqual(sigMatch, true);
    }
}
function validatePsbtParsing(tx, psbt, unspents, signatureTarget) {
    unspents.forEach((u, i) => {
        if (!(0, bitgo_1.isWalletUnspent)(u)) {
            return;
        }
        const scriptType = (0, bitgo_1.scriptTypeForChain)(u.chain);
        if (signatureTarget === 'unsigned') {
            if (scriptType === 'p2tr') {
                assert.throws(() => (0, Psbt_1.parsePsbtInput)(psbt.data.inputs[i]), (e) => e.message === 'could not parse input');
            }
            else {
                const psbtParsed = (0, Psbt_1.parsePsbtInput)(psbt.data.inputs[i]);
                assert.deepStrictEqual(psbtParsed.scriptType, scriptType);
                validateScript(psbtParsed, undefined);
                validatePublicKeys(psbtParsed, undefined);
                validateSignature(psbtParsed, undefined);
            }
        }
        else {
            const psbtParsed = (0, Psbt_1.parsePsbtInput)(psbt.data.inputs[i]);
            assert.strictEqual(psbtParsed.scriptType, scriptType === 'p2tr' ? 'taprootScriptPathSpend' : scriptType);
            assert.ok(psbtParsed.scriptType !== 'p2shP2pk');
            const txParsed = (0, bitgo_1.parseSignatureScript2Of3)(tx.ins[i]);
            validateScript(psbtParsed, txParsed);
            validatePublicKeys(psbtParsed, txParsed);
            validateSignature(psbtParsed, txParsed);
        }
    });
}
exports.validatePsbtParsing = validatePsbtParsing;
function assertEqualTransactions(txOne, txTwo) {
    assert.ok(txOne.network === txTwo.network);
    assert.ok(txOne.getId() === txTwo.getId());
    assert.ok(txOne.toHex() === txTwo.toHex());
    assert.ok(txOne.virtualSize() === txTwo.virtualSize());
    assert.ok(txOne.locktime === txTwo.locktime);
    assert.ok(txOne.version === txTwo.version);
    assert.ok(txOne.weight() === txTwo.weight());
    assert.ok(txOne.ins.length === txTwo.ins.length);
    assert.ok(txOne.outs.length === txTwo.outs.length);
    txOne.ins.forEach((_, i) => {
        const parsedInputOne = (0, bitgo_1.parseSignatureScript2Of3)(txOne.ins[i]);
        const parsedInputTwo = (0, bitgo_1.parseSignatureScript2Of3)(txTwo.ins[i]);
        assert.deepStrictEqual(parsedInputOne, parsedInputTwo);
    });
    txOne.outs.forEach((_, i) => {
        assert.deepStrictEqual(txOne.outs[i], txTwo.outs[i]);
    });
    assert.ok(txOne.toBuffer().equals(txTwo.toBuffer()));
}
exports.assertEqualTransactions = assertEqualTransactions;
function toBigInt(unspents) {
    return unspents.map((u) => {
        if ((0, bitgo_1.isWalletUnspent)(u)) {
            return { ...u, value: BigInt(u.value) };
        }
        throw new Error('invalid unspent');
    });
}
exports.toBigInt = toBigInt;
function signPsbt(psbt, unspents, rootWalletKeys, signer, cosigner, signatureTarget) {
    unspents.forEach((u, i) => {
        if (!(0, bitgo_1.isWalletUnspent)(u)) {
            throw new Error('invalid unspent');
        }
        try {
            if (signatureTarget === 'unsigned') {
                (0, Psbt_1.signWalletPsbt)(psbt, i, rootWalletKeys[signer], u);
            }
            (0, Psbt_1.signWalletPsbt)(psbt, i, rootWalletKeys[cosigner], u);
        }
        catch (err) {
            assert.deepStrictEqual(signatureTarget, 'unsigned');
            assert.deepStrictEqual((0, bitgo_1.scriptTypeForChain)(u.chain), 'p2tr');
            assert.deepStrictEqual(psbt.data.inputs[i].tapLeafScript, undefined);
            assert.deepStrictEqual(psbt.data.inputs[i].tapBip32Derivation, undefined);
            assert.deepStrictEqual(psbt.data.inputs[i].tapScriptSig, undefined);
            assert.ok(psbt.data.inputs[i].witnessUtxo);
        }
    });
}
exports.signPsbt = signPsbt;
function signTxBuilder(txb, unspents, rootWalletKeys, signer, cosigner, signatureTarget) {
    let walletUnspentSigners = [];
    if (signatureTarget === 'halfsigned') {
        walletUnspentSigners = [bitgo_1.WalletUnspentSigner.from(rootWalletKeys, rootWalletKeys[signer], rootWalletKeys[cosigner])];
    }
    else if (signatureTarget === 'fullsigned') {
        walletUnspentSigners = [
            bitgo_1.WalletUnspentSigner.from(rootWalletKeys, rootWalletKeys[signer], rootWalletKeys[cosigner]),
            bitgo_1.WalletUnspentSigner.from(rootWalletKeys, rootWalletKeys[cosigner], rootWalletKeys[signer]),
        ];
    }
    walletUnspentSigners.forEach((walletSigner, nSignature) => {
        unspents.forEach((u, i) => {
            if ((0, bitgo_1.isWalletUnspent)(u)) {
                (0, bitgo_1.signInputWithUnspent)(txb, i, u, walletSigner);
            }
            else {
                throw new Error(`unexpected unspent ${u.id}`);
            }
        });
    });
    return signatureTarget === 'fullsigned' ? txb.build() : txb.buildIncomplete();
}
exports.signTxBuilder = signTxBuilder;
function constructTransactionUsingTxBuilder(unspents, rootWalletKeys, params) {
    const txb = (0, bitgo_1.createTransactionBuilderForNetwork)(params.network);
    const total = BigInt((0, bitgo_1.unspentSum)(unspents, params.amountType));
    // Kinda weird, treating entire value as change, but tests the relevant paths
    txb.addOutput((0, bitgo_1.getWalletAddress)(rootWalletKeys, (0, bitgo_1.getInternalChainCode)(params.outputType), params.changeIndex, params.network), (0, bitgo_1.toTNumber)(total - params.fee, params.amountType));
    unspents.forEach((u) => {
        (0, bitgo_1.addToTransactionBuilder)(txb, u);
    });
    return signTxBuilder(txb, unspents, rootWalletKeys, params.signer, params.cosigner, params.signatureTarget).clone('bigint');
}
exports.constructTransactionUsingTxBuilder = constructTransactionUsingTxBuilder;
//# sourceMappingURL=data:application/json;base64,