"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.RpcClientWithWallet = exports.RpcClient = exports.RpcError = void 0;
const assert = require("assert");
const axios_1 = require("axios");
const debug_1 = require("debug");
const networks_1 = require("../../../src/networks");
const utxolib = require('../../../src');
const debug = (0, debug_1.default)('RpcClient');
function sleep(millis) {
    return new Promise((resolve) => {
        setTimeout(resolve, millis);
    });
}
class RpcError extends Error {
    constructor(rpcError) {
        super(`RPC error: ${rpcError.message} (code=${rpcError.code})`);
        this.rpcError = rpcError;
    }
    static isRpcErrorWithCode(e, code) {
        return e instanceof RpcError && e.rpcError.code === code;
    }
}
exports.RpcError = RpcError;
const BITCOIN_CORE_22_99 = '/Satoshi:22.99.0/';
class RpcClient {
    constructor(network, url, networkInfo) {
        this.network = network;
        this.url = url;
        this.networkInfo = networkInfo;
        this.id = 0;
    }
    /**
     * Poor man's Bluebird.map(arr, f, { concurrency })
     * Processes promises in batches of 16
     *
     * @param arr
     * @param f
     * @param [concurrency=8]
     */
    static async parallelMap(arr, f, { concurrency } = { concurrency: 16 }) {
        const rest = arr.splice(concurrency);
        const result = await Promise.all(arr.map((v, i) => f(v, i)));
        if (rest.length) {
            return [...result, ...(await this.parallelMap(rest, f))];
        }
        return result;
    }
    getUrl() {
        return this.url;
    }
    async exec(method, ...params) {
        try {
            debug('>', this.getUrl(), method, params);
            const response = await axios_1.default.post(this.getUrl(), {
                jsonrpc: '1.0',
                method,
                params,
                id: `${this.id++}`,
            });
            if (method === 'generate' || method === 'generatetoaddress') {
                debug('<', '[...]');
            }
            else {
                debug('<', response.data.result);
            }
            return response.data.result;
        }
        catch (e) {
            if (e.isAxiosError && e.response) {
                e = e;
                debug('< ERROR', e.response.statusText, e.response.data);
                e = e;
                const { error = {} } = e.response.data;
                throw new RpcError(error);
            }
            throw e;
        }
    }
    requiresWalletPath() {
        if (!this.networkInfo) {
            throw new Error(`networkInfo must be set`);
        }
        return this.networkInfo.subversion === BITCOIN_CORE_22_99;
    }
    withWallet(walletName) {
        if (!this.networkInfo) {
            throw new Error(`networkInfo must be set`);
        }
        return new RpcClientWithWallet(this.network, this.url, this.networkInfo, walletName);
    }
    async getHelp() {
        return this.exec('help');
    }
    async createWallet(walletName) {
        return this.exec('createwallet', walletName);
    }
    async loadWallet(walletName) {
        return this.exec('loadwallet', walletName);
    }
    async getNetworkInfo() {
        return this.exec('getnetworkinfo');
    }
    async getBlockCount() {
        return this.exec('getblockcount');
    }
    async getRawTransaction(txid) {
        return Buffer.from(await this.exec('getrawtransaction', txid), 'hex');
    }
    async getRawTransactionVerbose(txid) {
        const verbose = (0, networks_1.isZcash)(this.network) ? 1 : true;
        return await this.exec('getrawtransaction', txid, verbose);
    }
    async sendRawTransaction(tx) {
        return await this.exec('sendrawtransaction', tx.toString('hex'));
    }
    static async fromEnvvar(network) {
        const networkName = (0, networks_1.getNetworkName)(network);
        assert(networkName);
        const envKey = 'RPC_' + networkName.toUpperCase();
        const url = process.env[envKey];
        if (url === undefined) {
            throw new Error(`envvar ${envKey} not set`);
        }
        return this.forUrl(network, url);
    }
    static getSupportedNodeVersions(network) {
        switch ((0, networks_1.getMainnet)(network)) {
            case utxolib.networks.bitcoin:
                return ['/Satoshi:0.20.0/', '/Satoshi:0.21.1/', '/Satoshi:22.0.0/', BITCOIN_CORE_22_99];
            case utxolib.networks.bitcoincash:
                return ['/Bitcoin Cash Node:23.0.0(EB32.0)/'];
            case utxolib.networks.bitcoinsv:
                return ['/Bitcoin SV:1.0.5/'];
            case utxolib.networks.bitcoingold:
                return ['/Bitcoin Gold:0.17.3/'];
            case utxolib.networks.dash:
                return ['/Dash Core:0.16.1.1/'];
            case utxolib.networks.dogecoin:
                return ['/Shibetoshi:1.14.5/'];
            case utxolib.networks.ecash:
                return ['/Bitcoin ABC:0.26.9(EB32.0)/'];
            case utxolib.networks.litecoin:
                return ['/LitecoinCore:0.17.1/'];
            case utxolib.networks.zcash:
                return ['/MagicBean:4.7.0/'];
            default:
                return [];
        }
    }
    static async forUrl(network, url) {
        const networkName = (0, networks_1.getNetworkName)(network);
        const rpcClient = new RpcClient(network, url);
        const networkinfo = await rpcClient.getNetworkInfo();
        const versions = this.getSupportedNodeVersions(network);
        if (!versions.includes(networkinfo.subversion)) {
            throw new Error(`unsupported coin ${networkName} subversion=${networkinfo.subversion} versions=${versions}`);
        }
        return new RpcClient(network, url, networkinfo);
    }
    static async forUrlWait(network, url) {
        for (let i = 0; i < 600; i++) {
            try {
                return await this.forUrl(network, url);
            }
            catch (e) {
                console.error(`[${(0, networks_1.getNetworkName)(network)}] ${e}, waiting 1000 millis...`);
                await sleep(1000);
            }
        }
        throw new Error(`could not get RpcClient`);
    }
}
exports.RpcClient = RpcClient;
class RpcClientWithWallet extends RpcClient {
    constructor(network, url, networkInfo, walletName) {
        super(network, url, networkInfo);
        this.walletName = walletName;
    }
    getUrl() {
        if (this.requiresWalletPath()) {
            return super.getUrl() + '/wallet/' + this.walletName;
        }
        return super.getUrl();
    }
    async getWalletInfo() {
        return await this.exec('getwalletinfo');
    }
    async getBalance() {
        return await this.exec('getbalance');
    }
    async getNewAddress() {
        return this.exec('getnewaddress');
    }
    async sendToAddress(address, amount) {
        return this.exec('sendtoaddress', address, amount);
    }
    async generateToAddress(n, address) {
        switch (this.network) {
            case utxolib.networks.zcashTest:
                await this.exec('generate', n);
                await sleep(1000);
                await this.sendToAddress(address, 1);
                break;
            default:
                await this.exec('generatetoaddress', n, address);
        }
    }
}
exports.RpcClientWithWallet = RpcClientWithWallet;
//# sourceMappingURL=data:application/json;base64,