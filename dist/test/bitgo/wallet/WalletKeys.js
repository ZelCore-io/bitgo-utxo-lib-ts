"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const assert = require("assert");
const bitgo_1 = require("../../../src/bitgo");
const testutil_1 = require("../../../src/testutil");
describe('WalletKeys', function () {
    let defaultWalletKeys;
    let exoticWalletKeys;
    let defaultWalletKeysDerived;
    let exoticWalletKeysDerived;
    function mapBase58(k) {
        return k.triple.map((k) => k.toBase58());
    }
    before('setup derivations', function () {
        defaultWalletKeys = (0, testutil_1.getDefaultWalletKeys)();
        defaultWalletKeysDerived = defaultWalletKeys.deriveForChainAndIndex(1, 2);
        exoticWalletKeys = new bitgo_1.RootWalletKeys(defaultWalletKeys.triple, [
            '99/99',
            bitgo_1.RootWalletKeys.defaultPrefix,
            bitgo_1.RootWalletKeys.defaultPrefix,
        ]);
        exoticWalletKeysDerived = exoticWalletKeys.deriveForChainAndIndex(1, 2);
    });
    it('does not accept duplicate keys', function () {
        const [a, b, c] = defaultWalletKeys.triple;
        assert.throws(() => {
            new bitgo_1.WalletKeys([a, b, b]);
        });
        assert.throws(() => {
            new bitgo_1.WalletKeys([a, a, c]);
        });
    });
    function assertEqlDerivedPaths(root, derived, chain, index, expectedPaths) {
        const paths = root.triple.map((k) => root.getDerivationPath(k, chain, index));
        assert.deepStrictEqual(paths, expectedPaths);
        assert.deepStrictEqual(paths, derived.paths);
    }
    it('derives to expected values for default wallet keys', function () {
        assertEqlDerivedPaths(defaultWalletKeys, defaultWalletKeysDerived, 1, 2, ['0/0/1/2', '0/0/1/2', '0/0/1/2']);
        assert.deepStrictEqual(mapBase58(defaultWalletKeysDerived), [
            'xprv9zz8umnxxQR63smXBW8YkywRjpchgxuuUH1iJg5ViS8QwZmNuBCbkx69Bzyijwcvsthd3zF8FCy74FU3DC1gYKtzPinfPF5iWJwarkhHinS',
            'xprvA1gzohJxuwdy7UtoYwTA8pbskksjiywygp6LUJXW133TJn6ad2KX6XRGsV33nVYKqzsVZGq5h56u5NNkVFKmfMkn7Xqjen3MpZs8XdxABKQ',
            'xprv9zuZc2cWHuBL7PJyppMtjCtsRz5QKaGfrPKBgA1SsHMZHxNzC3ZaJYDSYzcuSwwf6duVWQvBs4CcwMknC9mQieFKqKpwc3Yo2hpusjMsZJi',
        ]);
    });
    it('derives to expected values for exotic wallet keys', function () {
        assertEqlDerivedPaths(exoticWalletKeys, exoticWalletKeysDerived, 1, 2, ['99/99/1/2', '0/0/1/2', '0/0/1/2']);
        assert.deepStrictEqual(mapBase58(exoticWalletKeysDerived), [
            'xprvA22MDSEU9wGJWzCGXQVFdYfcoTmhsXqQpMzGpLCG1Ad7txFp4bbbu1rckowNRVL96kH5rSWgmkaoJMgrgUuds7sQax5jdjqsXKauWAcvp3V',
            mapBase58(defaultWalletKeysDerived)[1],
            mapBase58(defaultWalletKeysDerived)[2],
        ]);
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiV2FsbGV0S2V5cy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3Rlc3QvYml0Z28vd2FsbGV0L1dhbGxldEtleXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxpQ0FBaUM7QUFFakMsOENBQW1GO0FBQ25GLG9EQUE2RDtBQUU3RCxRQUFRLENBQUMsWUFBWSxFQUFFO0lBQ3JCLElBQUksaUJBQWlDLENBQUM7SUFDdEMsSUFBSSxnQkFBZ0MsQ0FBQztJQUNyQyxJQUFJLHdCQUEyQyxDQUFDO0lBQ2hELElBQUksdUJBQTBDLENBQUM7SUFFL0MsU0FBUyxTQUFTLENBQUMsQ0FBYTtRQUM5QixPQUFPLENBQUMsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztJQUMzQyxDQUFDO0lBRUQsTUFBTSxDQUFDLG1CQUFtQixFQUFFO1FBQzFCLGlCQUFpQixHQUFHLElBQUEsK0JBQW9CLEdBQUUsQ0FBQztRQUMzQyx3QkFBd0IsR0FBRyxpQkFBaUIsQ0FBQyxzQkFBc0IsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFFMUUsZ0JBQWdCLEdBQUcsSUFBSSxzQkFBYyxDQUFDLGlCQUFpQixDQUFDLE1BQU0sRUFBRTtZQUM5RCxPQUFPO1lBQ1Asc0JBQWMsQ0FBQyxhQUFhO1lBQzVCLHNCQUFjLENBQUMsYUFBYTtTQUM3QixDQUFDLENBQUM7UUFDSCx1QkFBdUIsR0FBRyxnQkFBZ0IsQ0FBQyxzQkFBc0IsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFDMUUsQ0FBQyxDQUFDLENBQUM7SUFFSCxFQUFFLENBQUMsZ0NBQWdDLEVBQUU7UUFDbkMsTUFBTSxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLEdBQUcsaUJBQWlCLENBQUMsTUFBTSxDQUFDO1FBQzNDLE1BQU0sQ0FBQyxNQUFNLENBQUMsR0FBRyxFQUFFO1lBQ2pCLElBQUksa0JBQVUsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUM1QixDQUFDLENBQUMsQ0FBQztRQUNILE1BQU0sQ0FBQyxNQUFNLENBQUMsR0FBRyxFQUFFO1lBQ2pCLElBQUksa0JBQVUsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUM1QixDQUFDLENBQUMsQ0FBQztJQUNMLENBQUMsQ0FBQyxDQUFDO0lBRUgsU0FBUyxxQkFBcUIsQ0FDNUIsSUFBb0IsRUFDcEIsT0FBMEIsRUFDMUIsS0FBYSxFQUNiLEtBQWEsRUFDYixhQUF1QjtRQUV2QixNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLGlCQUFpQixDQUFDLENBQUMsRUFBRSxLQUFLLEVBQUUsS0FBSyxDQUFDLENBQUMsQ0FBQztRQUM5RSxNQUFNLENBQUMsZUFBZSxDQUFDLEtBQUssRUFBRSxhQUFhLENBQUMsQ0FBQztRQUM3QyxNQUFNLENBQUMsZUFBZSxDQUFDLEtBQUssRUFBRSxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDL0MsQ0FBQztJQUVELEVBQUUsQ0FBQyxvREFBb0QsRUFBRTtRQUN2RCxxQkFBcUIsQ0FBQyxpQkFBaUIsRUFBRSx3QkFBd0IsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsU0FBUyxFQUFFLFNBQVMsRUFBRSxTQUFTLENBQUMsQ0FBQyxDQUFDO1FBQzVHLE1BQU0sQ0FBQyxlQUFlLENBQUMsU0FBUyxDQUFDLHdCQUF3QixDQUFDLEVBQUU7WUFDMUQsaUhBQWlIO1lBQ2pILGlIQUFpSDtZQUNqSCxpSEFBaUg7U0FDbEgsQ0FBQyxDQUFDO0lBQ0wsQ0FBQyxDQUFDLENBQUM7SUFFSCxFQUFFLENBQUMsbURBQW1ELEVBQUU7UUFDdEQscUJBQXFCLENBQUMsZ0JBQWdCLEVBQUUsdUJBQXVCLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLFdBQVcsRUFBRSxTQUFTLEVBQUUsU0FBUyxDQUFDLENBQUMsQ0FBQztRQUM1RyxNQUFNLENBQUMsZUFBZSxDQUFDLFNBQVMsQ0FBQyx1QkFBdUIsQ0FBQyxFQUFFO1lBQ3pELGlIQUFpSDtZQUNqSCxTQUFTLENBQUMsd0JBQXdCLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDdEMsU0FBUyxDQUFDLHdCQUF3QixDQUFDLENBQUMsQ0FBQyxDQUFDO1NBQ3ZDLENBQUMsQ0FBQztJQUNMLENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBhc3NlcnQgZnJvbSAnYXNzZXJ0JztcclxuXHJcbmltcG9ydCB7IERlcml2ZWRXYWxsZXRLZXlzLCBSb290V2FsbGV0S2V5cywgV2FsbGV0S2V5cyB9IGZyb20gJy4uLy4uLy4uL3NyYy9iaXRnbyc7XHJcbmltcG9ydCB7IGdldERlZmF1bHRXYWxsZXRLZXlzIH0gZnJvbSAnLi4vLi4vLi4vc3JjL3Rlc3R1dGlsJztcclxuXHJcbmRlc2NyaWJlKCdXYWxsZXRLZXlzJywgZnVuY3Rpb24gKCkge1xyXG4gIGxldCBkZWZhdWx0V2FsbGV0S2V5czogUm9vdFdhbGxldEtleXM7XHJcbiAgbGV0IGV4b3RpY1dhbGxldEtleXM6IFJvb3RXYWxsZXRLZXlzO1xyXG4gIGxldCBkZWZhdWx0V2FsbGV0S2V5c0Rlcml2ZWQ6IERlcml2ZWRXYWxsZXRLZXlzO1xyXG4gIGxldCBleG90aWNXYWxsZXRLZXlzRGVyaXZlZDogRGVyaXZlZFdhbGxldEtleXM7XHJcblxyXG4gIGZ1bmN0aW9uIG1hcEJhc2U1OChrOiBXYWxsZXRLZXlzKTogc3RyaW5nW10ge1xyXG4gICAgcmV0dXJuIGsudHJpcGxlLm1hcCgoaykgPT4gay50b0Jhc2U1OCgpKTtcclxuICB9XHJcblxyXG4gIGJlZm9yZSgnc2V0dXAgZGVyaXZhdGlvbnMnLCBmdW5jdGlvbiAoKSB7XHJcbiAgICBkZWZhdWx0V2FsbGV0S2V5cyA9IGdldERlZmF1bHRXYWxsZXRLZXlzKCk7XHJcbiAgICBkZWZhdWx0V2FsbGV0S2V5c0Rlcml2ZWQgPSBkZWZhdWx0V2FsbGV0S2V5cy5kZXJpdmVGb3JDaGFpbkFuZEluZGV4KDEsIDIpO1xyXG5cclxuICAgIGV4b3RpY1dhbGxldEtleXMgPSBuZXcgUm9vdFdhbGxldEtleXMoZGVmYXVsdFdhbGxldEtleXMudHJpcGxlLCBbXHJcbiAgICAgICc5OS85OScsXHJcbiAgICAgIFJvb3RXYWxsZXRLZXlzLmRlZmF1bHRQcmVmaXgsXHJcbiAgICAgIFJvb3RXYWxsZXRLZXlzLmRlZmF1bHRQcmVmaXgsXHJcbiAgICBdKTtcclxuICAgIGV4b3RpY1dhbGxldEtleXNEZXJpdmVkID0gZXhvdGljV2FsbGV0S2V5cy5kZXJpdmVGb3JDaGFpbkFuZEluZGV4KDEsIDIpO1xyXG4gIH0pO1xyXG5cclxuICBpdCgnZG9lcyBub3QgYWNjZXB0IGR1cGxpY2F0ZSBrZXlzJywgZnVuY3Rpb24gKCkge1xyXG4gICAgY29uc3QgW2EsIGIsIGNdID0gZGVmYXVsdFdhbGxldEtleXMudHJpcGxlO1xyXG4gICAgYXNzZXJ0LnRocm93cygoKSA9PiB7XHJcbiAgICAgIG5ldyBXYWxsZXRLZXlzKFthLCBiLCBiXSk7XHJcbiAgICB9KTtcclxuICAgIGFzc2VydC50aHJvd3MoKCkgPT4ge1xyXG4gICAgICBuZXcgV2FsbGV0S2V5cyhbYSwgYSwgY10pO1xyXG4gICAgfSk7XHJcbiAgfSk7XHJcblxyXG4gIGZ1bmN0aW9uIGFzc2VydEVxbERlcml2ZWRQYXRocyhcclxuICAgIHJvb3Q6IFJvb3RXYWxsZXRLZXlzLFxyXG4gICAgZGVyaXZlZDogRGVyaXZlZFdhbGxldEtleXMsXHJcbiAgICBjaGFpbjogbnVtYmVyLFxyXG4gICAgaW5kZXg6IG51bWJlcixcclxuICAgIGV4cGVjdGVkUGF0aHM6IHN0cmluZ1tdXHJcbiAgKSB7XHJcbiAgICBjb25zdCBwYXRocyA9IHJvb3QudHJpcGxlLm1hcCgoaykgPT4gcm9vdC5nZXREZXJpdmF0aW9uUGF0aChrLCBjaGFpbiwgaW5kZXgpKTtcclxuICAgIGFzc2VydC5kZWVwU3RyaWN0RXF1YWwocGF0aHMsIGV4cGVjdGVkUGF0aHMpO1xyXG4gICAgYXNzZXJ0LmRlZXBTdHJpY3RFcXVhbChwYXRocywgZGVyaXZlZC5wYXRocyk7XHJcbiAgfVxyXG5cclxuICBpdCgnZGVyaXZlcyB0byBleHBlY3RlZCB2YWx1ZXMgZm9yIGRlZmF1bHQgd2FsbGV0IGtleXMnLCBmdW5jdGlvbiAoKSB7XHJcbiAgICBhc3NlcnRFcWxEZXJpdmVkUGF0aHMoZGVmYXVsdFdhbGxldEtleXMsIGRlZmF1bHRXYWxsZXRLZXlzRGVyaXZlZCwgMSwgMiwgWycwLzAvMS8yJywgJzAvMC8xLzInLCAnMC8wLzEvMiddKTtcclxuICAgIGFzc2VydC5kZWVwU3RyaWN0RXF1YWwobWFwQmFzZTU4KGRlZmF1bHRXYWxsZXRLZXlzRGVyaXZlZCksIFtcclxuICAgICAgJ3hwcnY5eno4dW1ueHhRUjYzc21YQlc4WWt5d1JqcGNoZ3h1dVVIMWlKZzVWaVM4UXdabU51QkNia3g2OUJ6eWlqd2N2c3RoZDN6RjhGQ3k3NEZVM0RDMWdZS3R6UGluZlBGNWlXSndhcmtoSGluUycsXHJcbiAgICAgICd4cHJ2QTFnem9oSnh1d2R5N1V0b1l3VEE4cGJza2tzaml5d3lncDZMVUpYVzEzM1RKbjZhZDJLWDZYUkdzVjMzblZZS3F6c1ZaR3E1aDU2dTVOTmtWRkttZk1rbjdYcWplbjNNcFpzOFhkeEFCS1EnLFxyXG4gICAgICAneHBydjl6dVpjMmNXSHVCTDdQSnlwcE10akN0c1J6NVFLYUdmclBLQmdBMVNzSE1aSHhOekMzWmFKWURTWXpjdVN3d2Y2ZHVWV1F2QnM0Q2N3TWtuQzltUWllRktxS3B3YzNZbzJocHVzak1zWkppJyxcclxuICAgIF0pO1xyXG4gIH0pO1xyXG5cclxuICBpdCgnZGVyaXZlcyB0byBleHBlY3RlZCB2YWx1ZXMgZm9yIGV4b3RpYyB3YWxsZXQga2V5cycsIGZ1bmN0aW9uICgpIHtcclxuICAgIGFzc2VydEVxbERlcml2ZWRQYXRocyhleG90aWNXYWxsZXRLZXlzLCBleG90aWNXYWxsZXRLZXlzRGVyaXZlZCwgMSwgMiwgWyc5OS85OS8xLzInLCAnMC8wLzEvMicsICcwLzAvMS8yJ10pO1xyXG4gICAgYXNzZXJ0LmRlZXBTdHJpY3RFcXVhbChtYXBCYXNlNTgoZXhvdGljV2FsbGV0S2V5c0Rlcml2ZWQpLCBbXHJcbiAgICAgICd4cHJ2QTIyTURTRVU5d0dKV3pDR1hRVkZkWWZjb1RtaHNYcVFwTXpHcExDRzFBZDd0eEZwNGJiYnUxcmNrb3dOUlZMOTZrSDVyU1dnbWthb0pNZ3JnVXVkczdzUWF4NWpkanFzWEthdVdBY3ZwM1YnLFxyXG4gICAgICBtYXBCYXNlNTgoZGVmYXVsdFdhbGxldEtleXNEZXJpdmVkKVsxXSxcclxuICAgICAgbWFwQmFzZTU4KGRlZmF1bHRXYWxsZXRLZXlzRGVyaXZlZClbMl0sXHJcbiAgICBdKTtcclxuICB9KTtcclxufSk7XHJcbiJdfQ==