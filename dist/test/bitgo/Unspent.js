"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const assert = require("assert");
const bitgo_1 = require("../../src/bitgo");
function mockUnspent(value) {
    return { value };
}
describe('unspentSum', function () {
    const unspents = [mockUnspent(123), mockUnspent(98765)];
    const bigUnspents = [mockUnspent(Number.MAX_SAFE_INTEGER)];
    const unspentsBig = [mockUnspent(BigInt(123)), mockUnspent(BigInt(98765))];
    it('sums number', function () {
        assert.strictEqual((0, bitgo_1.unspentSum)(unspents, 'number'), 123 + 98765);
    });
    it('sums bigint', function () {
        assert.strictEqual((0, bitgo_1.unspentSum)(unspentsBig, 'bigint'), BigInt(123 + 98765));
    });
    it('sums zero', function () {
        assert.strictEqual((0, bitgo_1.unspentSum)([], 'number'), 0);
        assert.strictEqual((0, bitgo_1.unspentSum)([], 'number'), 0);
    });
    it('throws on mixing number and bigint', function () {
        assert.throws(() => {
            (0, bitgo_1.unspentSum)(unspentsBig.concat(unspents), 'number');
        });
        assert.throws(() => {
            (0, bitgo_1.unspentSum)(unspents.concat(unspentsBig), 'bigint');
        });
    });
    it('throws on unsafe integer number', function () {
        assert.throws(() => {
            (0, bitgo_1.unspentSum)(bigUnspents.concat(unspents), 'number');
        });
    });
    it('throws on mismatch between unspent and amountType', function () {
        assert.throws(() => {
            (0, bitgo_1.unspentSum)(unspents, 'bigint');
        });
        assert.throws(() => {
            (0, bitgo_1.unspentSum)(unspentsBig, 'number');
        });
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVW5zcGVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3Rlc3QvYml0Z28vVW5zcGVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLGlDQUFrQztBQUNsQywyQ0FBNkM7QUFFN0MsU0FBUyxXQUFXLENBQWtDLEtBQWM7SUFDbEUsT0FBTyxFQUFFLEtBQUssRUFBRSxDQUFDO0FBQ25CLENBQUM7QUFDRCxRQUFRLENBQUMsWUFBWSxFQUFFO0lBQ3JCLE1BQU0sUUFBUSxHQUFHLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxFQUFFLFdBQVcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO0lBQ3hELE1BQU0sV0FBVyxHQUFHLENBQUMsV0FBVyxDQUFDLE1BQU0sQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDLENBQUM7SUFDM0QsTUFBTSxXQUFXLEdBQUcsQ0FBQyxXQUFXLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsV0FBVyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDM0UsRUFBRSxDQUFDLGFBQWEsRUFBRTtRQUNoQixNQUFNLENBQUMsV0FBVyxDQUFDLElBQUEsa0JBQVUsRUFBQyxRQUFRLEVBQUUsUUFBUSxDQUFDLEVBQUUsR0FBRyxHQUFHLEtBQUssQ0FBQyxDQUFDO0lBQ2xFLENBQUMsQ0FBQyxDQUFDO0lBQ0gsRUFBRSxDQUFDLGFBQWEsRUFBRTtRQUNoQixNQUFNLENBQUMsV0FBVyxDQUFDLElBQUEsa0JBQVUsRUFBQyxXQUFXLEVBQUUsUUFBUSxDQUFDLEVBQUUsTUFBTSxDQUFDLEdBQUcsR0FBRyxLQUFLLENBQUMsQ0FBQyxDQUFDO0lBQzdFLENBQUMsQ0FBQyxDQUFDO0lBQ0gsRUFBRSxDQUFDLFdBQVcsRUFBRTtRQUNkLE1BQU0sQ0FBQyxXQUFXLENBQUMsSUFBQSxrQkFBVSxFQUFDLEVBQUUsRUFBRSxRQUFRLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztRQUNoRCxNQUFNLENBQUMsV0FBVyxDQUFDLElBQUEsa0JBQVUsRUFBQyxFQUFFLEVBQUUsUUFBUSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFDbEQsQ0FBQyxDQUFDLENBQUM7SUFDSCxFQUFFLENBQUMsb0NBQW9DLEVBQUU7UUFDdkMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxHQUFHLEVBQUU7WUFDakIsSUFBQSxrQkFBVSxFQUFFLFdBQThDLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxFQUFFLFFBQVEsQ0FBQyxDQUFDO1FBQ3pGLENBQUMsQ0FBQyxDQUFDO1FBQ0gsTUFBTSxDQUFDLE1BQU0sQ0FBQyxHQUFHLEVBQUU7WUFDakIsSUFBQSxrQkFBVSxFQUFFLFFBQTJDLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxFQUFFLFFBQVEsQ0FBQyxDQUFDO1FBQ3pGLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQyxDQUFDLENBQUM7SUFDSCxFQUFFLENBQUMsaUNBQWlDLEVBQUU7UUFDcEMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxHQUFHLEVBQUU7WUFDakIsSUFBQSxrQkFBVSxFQUFDLFdBQVcsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLEVBQUUsUUFBUSxDQUFDLENBQUM7UUFDckQsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDLENBQUMsQ0FBQztJQUNILEVBQUUsQ0FBQyxtREFBbUQsRUFBRTtRQUN0RCxNQUFNLENBQUMsTUFBTSxDQUFDLEdBQUcsRUFBRTtZQUNqQixJQUFBLGtCQUFVLEVBQUMsUUFBUSxFQUFFLFFBQVEsQ0FBQyxDQUFDO1FBQ2pDLENBQUMsQ0FBQyxDQUFDO1FBQ0gsTUFBTSxDQUFDLE1BQU0sQ0FBQyxHQUFHLEVBQUU7WUFDakIsSUFBQSxrQkFBVSxFQUFDLFdBQVcsRUFBRSxRQUFRLENBQUMsQ0FBQztRQUNwQyxDQUFDLENBQUMsQ0FBQztJQUNMLENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgYXNzZXJ0ID0gcmVxdWlyZSgnYXNzZXJ0Jyk7XHJcbmltcG9ydCB7IHVuc3BlbnRTdW0gfSBmcm9tICcuLi8uLi9zcmMvYml0Z28nO1xyXG5cclxuZnVuY3Rpb24gbW9ja1Vuc3BlbnQ8VE51bWJlciBleHRlbmRzIG51bWJlciB8IGJpZ2ludD4odmFsdWU6IFROdW1iZXIpIHtcclxuICByZXR1cm4geyB2YWx1ZSB9O1xyXG59XHJcbmRlc2NyaWJlKCd1bnNwZW50U3VtJywgZnVuY3Rpb24gKCkge1xyXG4gIGNvbnN0IHVuc3BlbnRzID0gW21vY2tVbnNwZW50KDEyMyksIG1vY2tVbnNwZW50KDk4NzY1KV07XHJcbiAgY29uc3QgYmlnVW5zcGVudHMgPSBbbW9ja1Vuc3BlbnQoTnVtYmVyLk1BWF9TQUZFX0lOVEVHRVIpXTtcclxuICBjb25zdCB1bnNwZW50c0JpZyA9IFttb2NrVW5zcGVudChCaWdJbnQoMTIzKSksIG1vY2tVbnNwZW50KEJpZ0ludCg5ODc2NSkpXTtcclxuICBpdCgnc3VtcyBudW1iZXInLCBmdW5jdGlvbiAoKSB7XHJcbiAgICBhc3NlcnQuc3RyaWN0RXF1YWwodW5zcGVudFN1bSh1bnNwZW50cywgJ251bWJlcicpLCAxMjMgKyA5ODc2NSk7XHJcbiAgfSk7XHJcbiAgaXQoJ3N1bXMgYmlnaW50JywgZnVuY3Rpb24gKCkge1xyXG4gICAgYXNzZXJ0LnN0cmljdEVxdWFsKHVuc3BlbnRTdW0odW5zcGVudHNCaWcsICdiaWdpbnQnKSwgQmlnSW50KDEyMyArIDk4NzY1KSk7XHJcbiAgfSk7XHJcbiAgaXQoJ3N1bXMgemVybycsIGZ1bmN0aW9uICgpIHtcclxuICAgIGFzc2VydC5zdHJpY3RFcXVhbCh1bnNwZW50U3VtKFtdLCAnbnVtYmVyJyksIDApO1xyXG4gICAgYXNzZXJ0LnN0cmljdEVxdWFsKHVuc3BlbnRTdW0oW10sICdudW1iZXInKSwgMCk7XHJcbiAgfSk7XHJcbiAgaXQoJ3Rocm93cyBvbiBtaXhpbmcgbnVtYmVyIGFuZCBiaWdpbnQnLCBmdW5jdGlvbiAoKSB7XHJcbiAgICBhc3NlcnQudGhyb3dzKCgpID0+IHtcclxuICAgICAgdW5zcGVudFN1bSgodW5zcGVudHNCaWcgYXMgdW5rbm93biBhcyB7IHZhbHVlOiBudW1iZXIgfVtdKS5jb25jYXQodW5zcGVudHMpLCAnbnVtYmVyJyk7XHJcbiAgICB9KTtcclxuICAgIGFzc2VydC50aHJvd3MoKCkgPT4ge1xyXG4gICAgICB1bnNwZW50U3VtKCh1bnNwZW50cyBhcyB1bmtub3duIGFzIHsgdmFsdWU6IGJpZ2ludCB9W10pLmNvbmNhdCh1bnNwZW50c0JpZyksICdiaWdpbnQnKTtcclxuICAgIH0pO1xyXG4gIH0pO1xyXG4gIGl0KCd0aHJvd3Mgb24gdW5zYWZlIGludGVnZXIgbnVtYmVyJywgZnVuY3Rpb24gKCkge1xyXG4gICAgYXNzZXJ0LnRocm93cygoKSA9PiB7XHJcbiAgICAgIHVuc3BlbnRTdW0oYmlnVW5zcGVudHMuY29uY2F0KHVuc3BlbnRzKSwgJ251bWJlcicpO1xyXG4gICAgfSk7XHJcbiAgfSk7XHJcbiAgaXQoJ3Rocm93cyBvbiBtaXNtYXRjaCBiZXR3ZWVuIHVuc3BlbnQgYW5kIGFtb3VudFR5cGUnLCBmdW5jdGlvbiAoKSB7XHJcbiAgICBhc3NlcnQudGhyb3dzKCgpID0+IHtcclxuICAgICAgdW5zcGVudFN1bSh1bnNwZW50cywgJ2JpZ2ludCcpO1xyXG4gICAgfSk7XHJcbiAgICBhc3NlcnQudGhyb3dzKCgpID0+IHtcclxuICAgICAgdW5zcGVudFN1bSh1bnNwZW50c0JpZywgJ251bWJlcicpO1xyXG4gICAgfSk7XHJcbiAgfSk7XHJcbn0pO1xyXG4iXX0=