"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.isSegwit = exports.isInternalChainCode = exports.isExternalChainCode = exports.getInternalChainCode = exports.getExternalChainCode = exports.scriptTypeForChain = exports.toChainPair = exports.isChainCode = exports.chainCodes = exports.chainCodesP2trMusig2 = exports.chainCodesP2tr = exports.chainCodesP2wsh = exports.chainCodesP2shP2wsh = exports.chainCodesP2sh = void 0;
/**
 * All valid chain codes
 */
exports.chainCodesP2sh = [0, 1];
exports.chainCodesP2shP2wsh = [10, 11];
exports.chainCodesP2wsh = [20, 21];
exports.chainCodesP2tr = [30, 31];
exports.chainCodesP2trMusig2 = [40, 41];
exports.chainCodes = [
    ...exports.chainCodesP2sh,
    ...exports.chainCodesP2shP2wsh,
    ...exports.chainCodesP2wsh,
    ...exports.chainCodesP2tr,
    ...exports.chainCodesP2trMusig2,
];
function isChainCode(n) {
    return exports.chainCodes.includes(n);
}
exports.isChainCode = isChainCode;
const map = new Map([
    ['p2sh', exports.chainCodesP2sh],
    ['p2shP2wsh', exports.chainCodesP2shP2wsh],
    ['p2wsh', exports.chainCodesP2wsh],
    ['p2tr', exports.chainCodesP2tr],
    ['p2trMusig2', exports.chainCodesP2trMusig2],
].map(([k, v]) => [k, Object.freeze(v)]));
const pairs = [...map.values()];
/**
 * @return ChainCodePair for input
 */
function toChainPair(v) {
    let pair;
    if (Array.isArray(v)) {
        if (pairs.includes(v)) {
            pair = v;
        }
    }
    if (typeof v === 'string') {
        pair = map.get(v);
    }
    if (typeof v === 'number') {
        pair = pairs.find((p) => p.includes(v));
    }
    if (!pair) {
        throw new Error(`no pair for input ${v}`);
    }
    return pair;
}
exports.toChainPair = toChainPair;
/**
 * @return ScriptType2Of3 for input
 */
function scriptTypeForChain(chain) {
    for (const [scriptType, pair] of map.entries()) {
        if (pair.includes(chain)) {
            return scriptType;
        }
    }
    throw new Error(`invalid chain ${chain}`);
}
exports.scriptTypeForChain = scriptTypeForChain;
/**
 * @return chain code intended for external addresses
 */
function getExternalChainCode(v) {
    return toChainPair(v)[0];
}
exports.getExternalChainCode = getExternalChainCode;
/**
 * @return chain code intended for change outputs
 */
function getInternalChainCode(v) {
    return toChainPair(v)[1];
}
exports.getInternalChainCode = getInternalChainCode;
/**
 * @return true iff chain code is external
 */
function isExternalChainCode(v) {
    return toChainPair(v).indexOf(v) === 0;
}
exports.isExternalChainCode = isExternalChainCode;
/**
 * @return true iff chain code is internal
 */
function isInternalChainCode(v) {
    return toChainPair(v).indexOf(v) === 1;
}
exports.isInternalChainCode = isInternalChainCode;
/**
 * @return true iff chain code is a segwit address
 */
function isSegwit(v) {
    const segwitCodes = [
        ...exports.chainCodesP2shP2wsh,
        ...exports.chainCodesP2wsh,
        ...exports.chainCodesP2tr,
        ...exports.chainCodesP2trMusig2,
    ];
    return segwitCodes.includes(v);
}
exports.isSegwit = isSegwit;
//# sourceMappingURL=data:application/json;base64,