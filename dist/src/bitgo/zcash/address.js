"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.toOutputScript = exports.fromOutputScript = exports.toBase58Check = exports.fromBase58Check = void 0;
const assert = require("assert");
const bitcoinjs_lib_1 = require("bitcoinjs-lib");
const types = require("bitcoinjs-lib/src/types");
const networks_1 = require("../../networks");
const bs58check = require('bs58check');
const typeforce = require('typeforce');
function fromBase58Check(address, network) {
    const payload = bs58check.decode(address);
    const isZelcoreLegacyZcashUint8 = (0, networks_1.isZcash8BitUnit)(network) && payload.length === 21;
    const version = isZelcoreLegacyZcashUint8 ? payload.readUInt8(0) : payload.readUInt16BE(0);
    const hash = isZelcoreLegacyZcashUint8 ? payload.slice(1) : payload.slice(2);
    return { version, hash };
}
exports.fromBase58Check = fromBase58Check;
function toBase58Check(hash, version) {
    typeforce(types.tuple(types.Hash160bit, types.Number), arguments);
    const payload = Buffer.allocUnsafe(22);
    payload.writeUInt16BE(version, 0);
    hash.copy(payload, 2);
    return bs58check.encode(payload);
}
exports.toBase58Check = toBase58Check;
function fromOutputScript(outputScript, network) {
    assert((0, networks_1.isZcash)(network));
    let o;
    let prefix;
    try {
        o = bitcoinjs_lib_1.payments.p2pkh({ output: outputScript });
        prefix = network.pubKeyHash;
    }
    catch (e) { }
    try {
        o = bitcoinjs_lib_1.payments.p2sh({ output: outputScript });
        prefix = network.scriptHash;
    }
    catch (e) { }
    if (!o || !o.hash || prefix === undefined) {
        throw new Error(`unsupported outputScript`);
    }
    return toBase58Check(o.hash, prefix);
}
exports.fromOutputScript = fromOutputScript;
function toOutputScript(address, network) {
    assert((0, networks_1.isZcash)(network));
    const { version, hash } = fromBase58Check(address, network);
    if (version === network.pubKeyHash) {
        return bitcoinjs_lib_1.payments.p2pkh({ hash }).output;
    }
    if (version === network.scriptHash) {
        return bitcoinjs_lib_1.payments.p2sh({ hash }).output;
    }
    throw new Error(address + ' has no matching Script');
}
exports.toOutputScript = toOutputScript;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWRkcmVzcy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9iaXRnby96Y2FzaC9hZGRyZXNzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLGlDQUFpQztBQUNqQyxpREFBeUM7QUFDekMsaURBQWlEO0FBRWpELDZDQUFtRTtBQUNuRSxNQUFNLFNBQVMsR0FBRyxPQUFPLENBQUMsV0FBVyxDQUFDLENBQUM7QUFDdkMsTUFBTSxTQUFTLEdBQUcsT0FBTyxDQUFDLFdBQVcsQ0FBQyxDQUFDO0FBRXZDLFNBQWdCLGVBQWUsQ0FBQyxPQUFlLEVBQUUsT0FBZ0I7SUFDL0QsTUFBTSxPQUFPLEdBQUcsU0FBUyxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUMxQyxNQUFNLHlCQUF5QixHQUFHLElBQUEsMEJBQWUsRUFBQyxPQUFPLENBQUMsSUFBSSxPQUFPLENBQUMsTUFBTSxLQUFLLEVBQUUsQ0FBQztJQUNwRixNQUFNLE9BQU8sR0FBRyx5QkFBeUIsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMzRixNQUFNLElBQUksR0FBRyx5QkFBeUIsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQSxDQUFDLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUM1RSxPQUFPLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSxDQUFDO0FBQzNCLENBQUM7QUFORCwwQ0FNQztBQUVELFNBQWdCLGFBQWEsQ0FBQyxJQUFZLEVBQUUsT0FBZTtJQUN6RCxTQUFTLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsVUFBVSxFQUFFLEtBQUssQ0FBQyxNQUFNLENBQUMsRUFBRSxTQUFTLENBQUMsQ0FBQztJQUVsRSxNQUFNLE9BQU8sR0FBRyxNQUFNLENBQUMsV0FBVyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQ3ZDLE9BQU8sQ0FBQyxhQUFhLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBQ2xDLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBQ3RCLE9BQU8sU0FBUyxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQztBQUNuQyxDQUFDO0FBUEQsc0NBT0M7QUFFRCxTQUFnQixnQkFBZ0IsQ0FBQyxZQUFvQixFQUFFLE9BQWdCO0lBQ3JFLE1BQU0sQ0FBQyxJQUFBLGtCQUFPLEVBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQztJQUN6QixJQUFJLENBQUMsQ0FBQztJQUNOLElBQUksTUFBTSxDQUFDO0lBQ1gsSUFBSTtRQUNGLENBQUMsR0FBRyx3QkFBUSxDQUFDLEtBQUssQ0FBQyxFQUFFLE1BQU0sRUFBRSxZQUFZLEVBQUUsQ0FBQyxDQUFDO1FBQzdDLE1BQU0sR0FBRyxPQUFPLENBQUMsVUFBVSxDQUFDO0tBQzdCO0lBQUMsT0FBTyxDQUFDLEVBQUUsR0FBRTtJQUNkLElBQUk7UUFDRixDQUFDLEdBQUcsd0JBQVEsQ0FBQyxJQUFJLENBQUMsRUFBRSxNQUFNLEVBQUUsWUFBWSxFQUFFLENBQUMsQ0FBQztRQUM1QyxNQUFNLEdBQUcsT0FBTyxDQUFDLFVBQVUsQ0FBQztLQUM3QjtJQUFDLE9BQU8sQ0FBQyxFQUFFLEdBQUU7SUFDZCxJQUFJLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksSUFBSSxNQUFNLEtBQUssU0FBUyxFQUFFO1FBQ3pDLE1BQU0sSUFBSSxLQUFLLENBQUMsMEJBQTBCLENBQUMsQ0FBQztLQUM3QztJQUNELE9BQU8sYUFBYSxDQUFDLENBQUMsQ0FBQyxJQUFJLEVBQUUsTUFBTSxDQUFDLENBQUM7QUFDdkMsQ0FBQztBQWhCRCw0Q0FnQkM7QUFFRCxTQUFnQixjQUFjLENBQUMsT0FBZSxFQUFFLE9BQWdCO0lBQzlELE1BQU0sQ0FBQyxJQUFBLGtCQUFPLEVBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQztJQUN6QixNQUFNLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSxHQUFHLGVBQWUsQ0FBQyxPQUFPLEVBQUUsT0FBTyxDQUFDLENBQUM7SUFDNUQsSUFBSSxPQUFPLEtBQUssT0FBTyxDQUFDLFVBQVUsRUFBRTtRQUNsQyxPQUFPLHdCQUFRLENBQUMsS0FBSyxDQUFDLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQyxNQUFnQixDQUFDO0tBQ2xEO0lBQ0QsSUFBSSxPQUFPLEtBQUssT0FBTyxDQUFDLFVBQVUsRUFBRTtRQUNsQyxPQUFPLHdCQUFRLENBQUMsSUFBSSxDQUFDLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQyxNQUFnQixDQUFDO0tBQ2pEO0lBQ0QsTUFBTSxJQUFJLEtBQUssQ0FBQyxPQUFPLEdBQUcseUJBQXlCLENBQUMsQ0FBQztBQUN2RCxDQUFDO0FBVkQsd0NBVUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBhc3NlcnQgZnJvbSAnYXNzZXJ0JztcclxuaW1wb3J0IHsgcGF5bWVudHMgfSBmcm9tICdiaXRjb2luanMtbGliJztcclxuaW1wb3J0ICogYXMgdHlwZXMgZnJvbSAnYml0Y29pbmpzLWxpYi9zcmMvdHlwZXMnO1xyXG5pbXBvcnQgeyBCYXNlNThDaGVja1Jlc3VsdCB9IGZyb20gJ2JpdGNvaW5qcy1saWIvc3JjL2FkZHJlc3MnO1xyXG5pbXBvcnQgeyBpc1pjYXNoLCBOZXR3b3JrLCBpc1pjYXNoOEJpdFVuaXQgfSBmcm9tICcuLi8uLi9uZXR3b3Jrcyc7XHJcbmNvbnN0IGJzNThjaGVjayA9IHJlcXVpcmUoJ2JzNThjaGVjaycpO1xyXG5jb25zdCB0eXBlZm9yY2UgPSByZXF1aXJlKCd0eXBlZm9yY2UnKTtcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBmcm9tQmFzZTU4Q2hlY2soYWRkcmVzczogc3RyaW5nLCBuZXR3b3JrOiBOZXR3b3JrKTogQmFzZTU4Q2hlY2tSZXN1bHQge1xyXG4gIGNvbnN0IHBheWxvYWQgPSBiczU4Y2hlY2suZGVjb2RlKGFkZHJlc3MpO1xyXG4gIGNvbnN0IGlzWmVsY29yZUxlZ2FjeVpjYXNoVWludDggPSBpc1pjYXNoOEJpdFVuaXQobmV0d29yaykgJiYgcGF5bG9hZC5sZW5ndGggPT09IDIxO1xyXG4gIGNvbnN0IHZlcnNpb24gPSBpc1plbGNvcmVMZWdhY3laY2FzaFVpbnQ4ID8gcGF5bG9hZC5yZWFkVUludDgoMCkgOiBwYXlsb2FkLnJlYWRVSW50MTZCRSgwKTtcclxuICBjb25zdCBoYXNoID0gaXNaZWxjb3JlTGVnYWN5WmNhc2hVaW50OCA/IHBheWxvYWQuc2xpY2UoMSk6IHBheWxvYWQuc2xpY2UoMik7XHJcbiAgcmV0dXJuIHsgdmVyc2lvbiwgaGFzaCB9O1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gdG9CYXNlNThDaGVjayhoYXNoOiBCdWZmZXIsIHZlcnNpb246IG51bWJlcik6IHN0cmluZyB7XHJcbiAgdHlwZWZvcmNlKHR5cGVzLnR1cGxlKHR5cGVzLkhhc2gxNjBiaXQsIHR5cGVzLk51bWJlciksIGFyZ3VtZW50cyk7XHJcblxyXG4gIGNvbnN0IHBheWxvYWQgPSBCdWZmZXIuYWxsb2NVbnNhZmUoMjIpO1xyXG4gIHBheWxvYWQud3JpdGVVSW50MTZCRSh2ZXJzaW9uLCAwKTtcclxuICBoYXNoLmNvcHkocGF5bG9hZCwgMik7XHJcbiAgcmV0dXJuIGJzNThjaGVjay5lbmNvZGUocGF5bG9hZCk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBmcm9tT3V0cHV0U2NyaXB0KG91dHB1dFNjcmlwdDogQnVmZmVyLCBuZXR3b3JrOiBOZXR3b3JrKTogc3RyaW5nIHtcclxuICBhc3NlcnQoaXNaY2FzaChuZXR3b3JrKSk7XHJcbiAgbGV0IG87XHJcbiAgbGV0IHByZWZpeDtcclxuICB0cnkge1xyXG4gICAgbyA9IHBheW1lbnRzLnAycGtoKHsgb3V0cHV0OiBvdXRwdXRTY3JpcHQgfSk7XHJcbiAgICBwcmVmaXggPSBuZXR3b3JrLnB1YktleUhhc2g7XHJcbiAgfSBjYXRjaCAoZSkge31cclxuICB0cnkge1xyXG4gICAgbyA9IHBheW1lbnRzLnAyc2goeyBvdXRwdXQ6IG91dHB1dFNjcmlwdCB9KTtcclxuICAgIHByZWZpeCA9IG5ldHdvcmsuc2NyaXB0SGFzaDtcclxuICB9IGNhdGNoIChlKSB7fVxyXG4gIGlmICghbyB8fCAhby5oYXNoIHx8IHByZWZpeCA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICB0aHJvdyBuZXcgRXJyb3IoYHVuc3VwcG9ydGVkIG91dHB1dFNjcmlwdGApO1xyXG4gIH1cclxuICByZXR1cm4gdG9CYXNlNThDaGVjayhvLmhhc2gsIHByZWZpeCk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiB0b091dHB1dFNjcmlwdChhZGRyZXNzOiBzdHJpbmcsIG5ldHdvcms6IE5ldHdvcmspOiBCdWZmZXIge1xyXG4gIGFzc2VydChpc1pjYXNoKG5ldHdvcmspKTtcclxuICBjb25zdCB7IHZlcnNpb24sIGhhc2ggfSA9IGZyb21CYXNlNThDaGVjayhhZGRyZXNzLCBuZXR3b3JrKTtcclxuICBpZiAodmVyc2lvbiA9PT0gbmV0d29yay5wdWJLZXlIYXNoKSB7XHJcbiAgICByZXR1cm4gcGF5bWVudHMucDJwa2goeyBoYXNoIH0pLm91dHB1dCBhcyBCdWZmZXI7XHJcbiAgfVxyXG4gIGlmICh2ZXJzaW9uID09PSBuZXR3b3JrLnNjcmlwdEhhc2gpIHtcclxuICAgIHJldHVybiBwYXltZW50cy5wMnNoKHsgaGFzaCB9KS5vdXRwdXQgYXMgQnVmZmVyO1xyXG4gIH1cclxuICB0aHJvdyBuZXcgRXJyb3IoYWRkcmVzcyArICcgaGFzIG5vIG1hdGNoaW5nIFNjcmlwdCcpO1xyXG59XHJcbiJdfQ==