"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.toOutputScript = exports.fromOutputScript = exports.toBase58Check = exports.fromBase58Check = void 0;
const assert = require("assert");
const bitcoinjs_lib_1 = require("bitcoinjs-lib");
const types = require("bitcoinjs-lib/src/types");
const networks_1 = require("../../networks");
const bs58check = require('bs58check');
const typeforce = require('typeforce');
function fromBase58Check(address) {
    const payload = bs58check.decode(address);
    const version = payload.readUInt16BE(0);
    const hash = payload.slice(2);
    return { version, hash };
}
exports.fromBase58Check = fromBase58Check;
function toBase58Check(hash, version) {
    typeforce(types.tuple(types.Hash160bit, types.Number), arguments);
    const payload = Buffer.allocUnsafe(22);
    payload.writeUInt16BE(version, 0);
    hash.copy(payload, 2);
    return bs58check.encode(payload);
}
exports.toBase58Check = toBase58Check;
function fromOutputScript(outputScript, network) {
    assert((0, networks_1.isZcash)(network));
    let o;
    let prefix;
    try {
        o = bitcoinjs_lib_1.payments.p2pkh({ output: outputScript });
        prefix = network.pubKeyHash;
    }
    catch (e) { }
    try {
        o = bitcoinjs_lib_1.payments.p2sh({ output: outputScript });
        prefix = network.scriptHash;
    }
    catch (e) { }
    if (!o || !o.hash || prefix === undefined) {
        throw new Error(`unsupported outputScript`);
    }
    return toBase58Check(o.hash, prefix);
}
exports.fromOutputScript = fromOutputScript;
function toOutputScript(address, network) {
    assert((0, networks_1.isZcash)(network));
    const { version, hash } = fromBase58Check(address);
    if (version === network.pubKeyHash) {
        return bitcoinjs_lib_1.payments.p2pkh({ hash }).output;
    }
    if (version === network.scriptHash) {
        return bitcoinjs_lib_1.payments.p2sh({ hash }).output;
    }
    throw new Error(address + ' has no matching Script');
}
exports.toOutputScript = toOutputScript;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWRkcmVzcy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9iaXRnby96Y2FzaC9hZGRyZXNzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLGlDQUFpQztBQUNqQyxpREFBeUM7QUFDekMsaURBQWlEO0FBRWpELDZDQUFrRDtBQUNsRCxNQUFNLFNBQVMsR0FBRyxPQUFPLENBQUMsV0FBVyxDQUFDLENBQUM7QUFDdkMsTUFBTSxTQUFTLEdBQUcsT0FBTyxDQUFDLFdBQVcsQ0FBQyxDQUFDO0FBRXZDLFNBQWdCLGVBQWUsQ0FBQyxPQUFlO0lBQzdDLE1BQU0sT0FBTyxHQUFHLFNBQVMsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDMUMsTUFBTSxPQUFPLEdBQUcsT0FBTyxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUN4QyxNQUFNLElBQUksR0FBRyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzlCLE9BQU8sRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLENBQUM7QUFDM0IsQ0FBQztBQUxELDBDQUtDO0FBRUQsU0FBZ0IsYUFBYSxDQUFDLElBQVksRUFBRSxPQUFlO0lBQ3pELFNBQVMsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxVQUFVLEVBQUUsS0FBSyxDQUFDLE1BQU0sQ0FBQyxFQUFFLFNBQVMsQ0FBQyxDQUFDO0lBRWxFLE1BQU0sT0FBTyxHQUFHLE1BQU0sQ0FBQyxXQUFXLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDdkMsT0FBTyxDQUFDLGFBQWEsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFDbEMsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFDdEIsT0FBTyxTQUFTLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0FBQ25DLENBQUM7QUFQRCxzQ0FPQztBQUVELFNBQWdCLGdCQUFnQixDQUFDLFlBQW9CLEVBQUUsT0FBZ0I7SUFDckUsTUFBTSxDQUFDLElBQUEsa0JBQU8sRUFBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO0lBQ3pCLElBQUksQ0FBQyxDQUFDO0lBQ04sSUFBSSxNQUFNLENBQUM7SUFDWCxJQUFJO1FBQ0YsQ0FBQyxHQUFHLHdCQUFRLENBQUMsS0FBSyxDQUFDLEVBQUUsTUFBTSxFQUFFLFlBQVksRUFBRSxDQUFDLENBQUM7UUFDN0MsTUFBTSxHQUFHLE9BQU8sQ0FBQyxVQUFVLENBQUM7S0FDN0I7SUFBQyxPQUFPLENBQUMsRUFBRSxHQUFFO0lBQ2QsSUFBSTtRQUNGLENBQUMsR0FBRyx3QkFBUSxDQUFDLElBQUksQ0FBQyxFQUFFLE1BQU0sRUFBRSxZQUFZLEVBQUUsQ0FBQyxDQUFDO1FBQzVDLE1BQU0sR0FBRyxPQUFPLENBQUMsVUFBVSxDQUFDO0tBQzdCO0lBQUMsT0FBTyxDQUFDLEVBQUUsR0FBRTtJQUNkLElBQUksQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxJQUFJLE1BQU0sS0FBSyxTQUFTLEVBQUU7UUFDekMsTUFBTSxJQUFJLEtBQUssQ0FBQywwQkFBMEIsQ0FBQyxDQUFDO0tBQzdDO0lBQ0QsT0FBTyxhQUFhLENBQUMsQ0FBQyxDQUFDLElBQUksRUFBRSxNQUFNLENBQUMsQ0FBQztBQUN2QyxDQUFDO0FBaEJELDRDQWdCQztBQUVELFNBQWdCLGNBQWMsQ0FBQyxPQUFlLEVBQUUsT0FBZ0I7SUFDOUQsTUFBTSxDQUFDLElBQUEsa0JBQU8sRUFBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO0lBQ3pCLE1BQU0sRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLEdBQUcsZUFBZSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQ25ELElBQUksT0FBTyxLQUFLLE9BQU8sQ0FBQyxVQUFVLEVBQUU7UUFDbEMsT0FBTyx3QkFBUSxDQUFDLEtBQUssQ0FBQyxFQUFFLElBQUksRUFBRSxDQUFDLENBQUMsTUFBZ0IsQ0FBQztLQUNsRDtJQUNELElBQUksT0FBTyxLQUFLLE9BQU8sQ0FBQyxVQUFVLEVBQUU7UUFDbEMsT0FBTyx3QkFBUSxDQUFDLElBQUksQ0FBQyxFQUFFLElBQUksRUFBRSxDQUFDLENBQUMsTUFBZ0IsQ0FBQztLQUNqRDtJQUNELE1BQU0sSUFBSSxLQUFLLENBQUMsT0FBTyxHQUFHLHlCQUF5QixDQUFDLENBQUM7QUFDdkQsQ0FBQztBQVZELHdDQVVDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgYXNzZXJ0IGZyb20gJ2Fzc2VydCc7XHJcbmltcG9ydCB7IHBheW1lbnRzIH0gZnJvbSAnYml0Y29pbmpzLWxpYic7XHJcbmltcG9ydCAqIGFzIHR5cGVzIGZyb20gJ2JpdGNvaW5qcy1saWIvc3JjL3R5cGVzJztcclxuaW1wb3J0IHsgQmFzZTU4Q2hlY2tSZXN1bHQgfSBmcm9tICdiaXRjb2luanMtbGliL3NyYy9hZGRyZXNzJztcclxuaW1wb3J0IHsgaXNaY2FzaCwgTmV0d29yayB9IGZyb20gJy4uLy4uL25ldHdvcmtzJztcclxuY29uc3QgYnM1OGNoZWNrID0gcmVxdWlyZSgnYnM1OGNoZWNrJyk7XHJcbmNvbnN0IHR5cGVmb3JjZSA9IHJlcXVpcmUoJ3R5cGVmb3JjZScpO1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGZyb21CYXNlNThDaGVjayhhZGRyZXNzOiBzdHJpbmcpOiBCYXNlNThDaGVja1Jlc3VsdCB7XHJcbiAgY29uc3QgcGF5bG9hZCA9IGJzNThjaGVjay5kZWNvZGUoYWRkcmVzcyk7XHJcbiAgY29uc3QgdmVyc2lvbiA9IHBheWxvYWQucmVhZFVJbnQxNkJFKDApO1xyXG4gIGNvbnN0IGhhc2ggPSBwYXlsb2FkLnNsaWNlKDIpO1xyXG4gIHJldHVybiB7IHZlcnNpb24sIGhhc2ggfTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHRvQmFzZTU4Q2hlY2soaGFzaDogQnVmZmVyLCB2ZXJzaW9uOiBudW1iZXIpOiBzdHJpbmcge1xyXG4gIHR5cGVmb3JjZSh0eXBlcy50dXBsZSh0eXBlcy5IYXNoMTYwYml0LCB0eXBlcy5OdW1iZXIpLCBhcmd1bWVudHMpO1xyXG5cclxuICBjb25zdCBwYXlsb2FkID0gQnVmZmVyLmFsbG9jVW5zYWZlKDIyKTtcclxuICBwYXlsb2FkLndyaXRlVUludDE2QkUodmVyc2lvbiwgMCk7XHJcbiAgaGFzaC5jb3B5KHBheWxvYWQsIDIpO1xyXG4gIHJldHVybiBiczU4Y2hlY2suZW5jb2RlKHBheWxvYWQpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZnJvbU91dHB1dFNjcmlwdChvdXRwdXRTY3JpcHQ6IEJ1ZmZlciwgbmV0d29yazogTmV0d29yayk6IHN0cmluZyB7XHJcbiAgYXNzZXJ0KGlzWmNhc2gobmV0d29yaykpO1xyXG4gIGxldCBvO1xyXG4gIGxldCBwcmVmaXg7XHJcbiAgdHJ5IHtcclxuICAgIG8gPSBwYXltZW50cy5wMnBraCh7IG91dHB1dDogb3V0cHV0U2NyaXB0IH0pO1xyXG4gICAgcHJlZml4ID0gbmV0d29yay5wdWJLZXlIYXNoO1xyXG4gIH0gY2F0Y2ggKGUpIHt9XHJcbiAgdHJ5IHtcclxuICAgIG8gPSBwYXltZW50cy5wMnNoKHsgb3V0cHV0OiBvdXRwdXRTY3JpcHQgfSk7XHJcbiAgICBwcmVmaXggPSBuZXR3b3JrLnNjcmlwdEhhc2g7XHJcbiAgfSBjYXRjaCAoZSkge31cclxuICBpZiAoIW8gfHwgIW8uaGFzaCB8fCBwcmVmaXggPT09IHVuZGVmaW5lZCkge1xyXG4gICAgdGhyb3cgbmV3IEVycm9yKGB1bnN1cHBvcnRlZCBvdXRwdXRTY3JpcHRgKTtcclxuICB9XHJcbiAgcmV0dXJuIHRvQmFzZTU4Q2hlY2soby5oYXNoLCBwcmVmaXgpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gdG9PdXRwdXRTY3JpcHQoYWRkcmVzczogc3RyaW5nLCBuZXR3b3JrOiBOZXR3b3JrKTogQnVmZmVyIHtcclxuICBhc3NlcnQoaXNaY2FzaChuZXR3b3JrKSk7XHJcbiAgY29uc3QgeyB2ZXJzaW9uLCBoYXNoIH0gPSBmcm9tQmFzZTU4Q2hlY2soYWRkcmVzcyk7XHJcbiAgaWYgKHZlcnNpb24gPT09IG5ldHdvcmsucHViS2V5SGFzaCkge1xyXG4gICAgcmV0dXJuIHBheW1lbnRzLnAycGtoKHsgaGFzaCB9KS5vdXRwdXQgYXMgQnVmZmVyO1xyXG4gIH1cclxuICBpZiAodmVyc2lvbiA9PT0gbmV0d29yay5zY3JpcHRIYXNoKSB7XHJcbiAgICByZXR1cm4gcGF5bWVudHMucDJzaCh7IGhhc2ggfSkub3V0cHV0IGFzIEJ1ZmZlcjtcclxuICB9XHJcbiAgdGhyb3cgbmV3IEVycm9yKGFkZHJlc3MgKyAnIGhhcyBubyBtYXRjaGluZyBTY3JpcHQnKTtcclxufVxyXG4iXX0=