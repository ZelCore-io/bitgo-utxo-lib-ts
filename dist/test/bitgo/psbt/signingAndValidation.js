"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const assert = require("assert");
const mocha_1 = require("mocha");
const bs58check = require("bs58check");
const testutil_1 = require("../../../src/testutil");
const bitgo_1 = require("../../../src/bitgo");
const src_1 = require("../../../src");
const outputScripts_1 = require("../../../src/bitgo/outputScripts");
function getScriptTypes() {
    return [...bitgo_1.outputScripts.scriptTypes2Of3, 'p2shP2pk'];
}
const walletKeys = (0, testutil_1.getDefaultWalletKeys)();
function runTest(scriptType, signerName, cosignerName, network) {
    const signer = walletKeys[signerName];
    const cosigner = walletKeys[cosignerName];
    const networkName = (0, src_1.getNetworkName)(network);
    const signingKeys = [
        signerName === 'user' || (cosignerName === 'user' && scriptType !== 'p2shP2pk'),
        signerName === 'backup' || (cosignerName === 'backup' && scriptType !== 'p2shP2pk'),
        signerName === 'bitgo' || (cosignerName === 'bitgo' && scriptType !== 'p2shP2pk'),
    ];
    (0, mocha_1.describe)(`UtxoPsbt ${[
        `scriptType=${scriptType}`,
        `network=${networkName}`,
        `signer=${signerName}`,
        `cosigner=${cosignerName}`,
    ].join(',')}`, function () {
        let psbt;
        before('create transaction', async function () {
            // Build a fully hydrated UtxoPsbt
            psbt = (0, bitgo_1.createPsbtForNetwork)({ network });
            psbt.updateGlobal({
                globalXpub: walletKeys.triple.map((bip32) => {
                    const extendedPubkey = bip32.neutered().toBase58();
                    return {
                        extendedPubkey: bs58check.decode(extendedPubkey),
                        masterFingerprint: bip32.fingerprint,
                        path: 'm',
                    };
                }),
            });
            // Add the inputs
            if (scriptType === 'p2shP2pk') {
                const unspent = (0, testutil_1.mockReplayProtectionUnspent)(network, BigInt(1e8), { key: signer });
                const { redeemScript } = (0, outputScripts_1.createOutputScriptP2shP2pk)(signer.publicKey);
                assert(redeemScript);
                (0, bitgo_1.addReplayProtectionUnspentToPsbt)(psbt, unspent, redeemScript);
            }
            else {
                const unspents = (0, testutil_1.mockUnspents)(walletKeys, [scriptType], BigInt(1e8), network);
                unspents.forEach((unspent) => (0, bitgo_1.addWalletUnspentToPsbt)(psbt, unspent, walletKeys, signerName, cosignerName, {
                    isReplaceableByFee: true,
                }));
            }
            // Add the outputs
            (0, bitgo_1.addWalletOutputToPsbt)(psbt, walletKeys, (0, bitgo_1.getInternalChainCode)('p2sh'), 0, BigInt(1e8 - 10000));
        });
        (0, mocha_1.it)('can go from unsigned to fully signed', async function () {
            if (scriptType === 'p2trMusig2' && signerName === 'user' && cosignerName === 'bitgo') {
                psbt.setAllInputsMusig2NonceHD(signer);
                psbt.setAllInputsMusig2NonceHD(cosigner);
            }
            assert.ok(psbt.getSignatureValidationArray(0).every((res) => !res));
            if (scriptType === 'p2shP2pk') {
                psbt.signAllInputs(signer);
            }
            else {
                psbt.signAllInputsHD(signer);
                psbt.signAllInputsHD(cosigner);
            }
            assert(psbt.validateSignaturesOfAllInputs());
            assert.deepStrictEqual(psbt.getSignatureValidationArray(0), signingKeys);
            psbt.finalizeAllInputs();
            const tx = psbt.extractTransaction();
            assert(tx);
            if (scriptType === 'p2shP2pk') {
                tx.ins.forEach((input) => assert.strictEqual(input.sequence, bitgo_1.TX_INPUT_SEQUENCE_NUMBER_FINAL));
            }
            else {
                tx.ins.forEach((input) => assert.strictEqual(input.sequence, bitgo_1.MAX_BIP125_RBF_SEQUENCE));
            }
        });
    });
}
getScriptTypes().forEach((t) => {
    runTest(t, 'user', 'bitgo', src_1.networks.bitcoin);
    runTest(t, 'backup', 'user', src_1.networks.bitcoin);
});
//# sourceMappingURL=data:application/json;base64,