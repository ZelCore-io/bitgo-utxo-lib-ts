"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const assert = require("assert");
const src_1 = require("../../../src");
const bitgo_1 = require("../../../src/bitgo");
const testutil_1 = require("../../../src/testutil");
const transaction_util_1 = require("../../transaction_util");
const mock_1 = require("../../../src/testutil/mock");
const CHANGE_INDEX = 100;
const FEE = BigInt(100);
function getScriptTypes2Of3() {
    // FIXME(BG-66941): p2trMusig2 signing does not work in this test suite yet
    //  because the test suite is written with TransactionBuilder
    return bitgo_1.outputScripts.scriptTypes2Of3.filter((scriptType) => scriptType !== 'p2trMusig2');
}
describe('WalletUnspent', function () {
    const network = src_1.networks.bitcoin;
    const walletKeys = (0, testutil_1.getDefaultWalletKeys)();
    const hash = Buffer.alloc(32).fill(0xff);
    hash[0] = 0; // show endianness
    const input = { hash, index: 0 };
    const expectedOutPoint = {
        txid: 'ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00',
        vout: 0,
    };
    it('parses and formats txid', function () {
        assert.deepStrictEqual((0, bitgo_1.getOutputIdForInput)(input), expectedOutPoint);
        assert.deepStrictEqual((0, bitgo_1.formatOutputId)(expectedOutPoint), 'ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00:0');
        assert.deepStrictEqual((0, bitgo_1.parseOutputId)((0, bitgo_1.formatOutputId)(expectedOutPoint)), expectedOutPoint);
    });
    it('identifies wallet unspents', function () {
        const unspent = {
            id: (0, bitgo_1.formatOutputId)(expectedOutPoint),
            address: (0, bitgo_1.getWalletAddress)(walletKeys, 0, 0, network),
            value: 1e8,
        };
        assert.strictEqual((0, bitgo_1.isWalletUnspent)(unspent), false);
        assert.strictEqual((0, bitgo_1.isWalletUnspent)({ ...unspent, chain: 0, index: 0 }), true);
    });
    function constructAndSignTransactionUsingPsbt(unspents, signer, cosigner, outputType) {
        const psbt = (0, bitgo_1.createPsbtForNetwork)({ network });
        const total = BigInt((0, bitgo_1.unspentSum)(unspents, 'bigint'));
        (0, bitgo_1.addWalletOutputToPsbt)(psbt, walletKeys, (0, bitgo_1.getInternalChainCode)(outputType), CHANGE_INDEX, total - FEE);
        unspents.forEach((u) => {
            if ((0, bitgo_1.isWalletUnspent)(u)) {
                (0, bitgo_1.addWalletUnspentToPsbt)(psbt, u, walletKeys, signer, cosigner);
            }
            else {
                throw new Error(`invalid unspent`);
            }
        });
        // TODO: Test rederiving scripts from PSBT and keys only
        psbt.signAllInputsHD(walletKeys[signer]);
        psbt.signAllInputsHD(walletKeys[cosigner]);
        assert(psbt.validateSignaturesOfAllInputs());
        psbt.finalizeAllInputs();
        // extract transaction has a return type of Transaction instead of UtxoTransaction
        const tx = psbt.extractTransaction();
        const psbt2 = (0, bitgo_1.createPsbtFromTransaction)(tx, unspents.map((u) => ({ ...(0, bitgo_1.toPrevOutput)(u, network), prevTx: u.prevTx })));
        assert(psbt2.validateSignaturesOfAllInputs());
        return tx;
    }
    function constructAndSignTransactionUsingTransactionBuilder(unspents, signer, cosigner, amountType = 'number', outputType) {
        const txb = (0, bitgo_1.createTransactionBuilderForNetwork)(network);
        const total = BigInt((0, bitgo_1.unspentSum)(unspents, amountType));
        // Kinda weird, treating entire value as change, but tests the relevant paths
        txb.addOutput((0, bitgo_1.getWalletAddress)(walletKeys, (0, bitgo_1.getInternalChainCode)(outputType), CHANGE_INDEX, network), (0, bitgo_1.toTNumber)(total - FEE, amountType));
        unspents.forEach((u) => {
            (0, bitgo_1.addToTransactionBuilder)(txb, u);
        });
        unspents.forEach((u, i) => {
            if ((0, mock_1.isReplayProtectionUnspent)(u, network)) {
                (0, bitgo_1.signInputP2shP2pk)(txb, i, mock_1.replayProtectionKeyPair);
            }
        });
        [
            bitgo_1.WalletUnspentSigner.from(walletKeys, walletKeys[signer], walletKeys[cosigner]),
            bitgo_1.WalletUnspentSigner.from(walletKeys, walletKeys[cosigner], walletKeys[signer]),
        ].forEach((walletSigner, nSignature) => {
            unspents.forEach((u, i) => {
                if ((0, bitgo_1.isWalletUnspent)(u)) {
                    (0, bitgo_1.signInputWithUnspent)(txb, i, u, walletSigner);
                }
                else if ((0, mock_1.isReplayProtectionUnspent)(u, network)) {
                    return;
                }
                else {
                    throw new Error(`unexpected unspent ${u.id}`);
                }
            });
            const tx = nSignature === 0 ? txb.buildIncomplete() : txb.build();
            // Verify each signature for the unspent
            unspents.forEach((u, i) => {
                if ((0, mock_1.isReplayProtectionUnspent)(u, network)) {
                    // signature verification not implemented for replay protection unspents
                    return;
                }
                assert.deepStrictEqual((0, bitgo_1.verifySignatureWithUnspent)(tx, i, unspents, walletKeys), walletKeys.triple.map((k) => k === walletKeys[signer] || (nSignature === 1 && k === walletKeys[cosigner])));
            });
        });
        return txb.build();
    }
    function validateLockTimeAndSequence(transaction) {
        // locktime should default to 0 and sequence to 0xffffffff for all inputs
        assert.deepStrictEqual(transaction.locktime, 0);
        const inputs = transaction.ins;
        for (const input of inputs) {
            assert.deepStrictEqual(input.sequence, 0xffffffff);
        }
    }
    function runTestSignUnspents({ inputScriptTypes, outputScriptType, signer, cosigner, amountType, testOutputAmount, }) {
        it(`can be signed [inputs=${inputScriptTypes} signer=${signer} cosigner=${cosigner} amountType=${amountType}]`, function () {
            const unspents = inputScriptTypes.map((t, i) => {
                if (bitgo_1.outputScripts.isScriptType2Of3(t)) {
                    return (0, mock_1.mockWalletUnspent)(network, testOutputAmount, {
                        keys: walletKeys,
                        chain: (0, bitgo_1.getExternalChainCode)(t),
                        vout: i,
                    });
                }
                if (t === 'p2shP2pk') {
                    return (0, mock_1.mockReplayProtectionUnspent)(network, (0, bitgo_1.toTNumber)(1000, amountType));
                }
                throw new Error(`invalid input type ${t}`);
            });
            const txbTransaction = constructAndSignTransactionUsingTransactionBuilder(unspents, signer, cosigner, amountType, outputScriptType);
            validateLockTimeAndSequence(txbTransaction);
            if (amountType === 'bigint') {
                if (inputScriptTypes.includes('p2shP2pk')) {
                    // FIMXE(BG-47824): add p2shP2pk support for Psbt
                    return;
                }
                const psbtTransaction = constructAndSignTransactionUsingPsbt(unspents, signer, cosigner, outputScriptType);
                assert.deepStrictEqual(txbTransaction.toBuffer(), psbtTransaction.toBuffer());
                validateLockTimeAndSequence(psbtTransaction);
            }
        });
    }
    function getInputScripts() {
        return getScriptTypes2Of3().flatMap((t) => [
            [t, t],
            [t, t, 'p2shP2pk'],
        ]);
    }
    function getSignerPairs() {
        const keyNames = ['user', 'backup', 'bitgo'];
        return keyNames.flatMap((signer) => keyNames.flatMap((cosigner) => (signer === cosigner ? [] : [[signer, cosigner]])));
    }
    getInputScripts().forEach((inputScriptTypes) => {
        getSignerPairs().forEach(([signer, cosigner]) => {
            runTestSignUnspents({
                inputScriptTypes,
                outputScriptType: 'p2sh',
                signer,
                cosigner,
                amountType: 'number',
                testOutputAmount: transaction_util_1.defaultTestOutputAmount,
            });
            runTestSignUnspents({
                inputScriptTypes,
                outputScriptType: 'p2sh',
                signer,
                cosigner,
                amountType: 'bigint',
                testOutputAmount: BigInt('10000000000000000'),
            });
        });
    });
});
//# sourceMappingURL=data:application/json;base64,