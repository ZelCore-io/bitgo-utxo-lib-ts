"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getTransactionStages = exports.getFullSignedTransaction2Of3 = exports.getFullSignedTransactionP2shP2pk = exports.getHalfSignedTransaction2Of3 = exports.getUnsignedTransaction2Of3 = exports.getTransactionBuilder = exports.getPrevOutputs = exports.getPrevOutput = exports.mockTransactionId = exports.defaultTestOutputAmount = exports.parseTransactionRoundTrip = exports.getSignKeyCombinations = void 0;
const assert = require("assert");
const src_1 = require("../src");
const outputScripts_1 = require("../src/bitgo/outputScripts");
const bitgo_1 = require("../src/bitgo");
const outputScripts_util_1 = require("./integration_local_rpc/generate/outputScripts.util");
const fixtures_1 = require("./integration_local_rpc/generate/fixtures");
function getSignKeyCombinations(length) {
    if (length === 0) {
        return [];
    }
    if (length === 1) {
        return fixtures_1.fixtureKeys.map((k) => [k]);
    }
    return getSignKeyCombinations(length - 1)
        .map((head) => fixtures_1.fixtureKeys.filter((k) => !head.includes(k)).map((k) => [...head, k]))
        .reduce((all, keys) => [...all, ...keys]);
}
exports.getSignKeyCombinations = getSignKeyCombinations;
function parseTransactionRoundTrip(buf, network, { inputs, amountType = 'number', version, roundTripPsbt = true, } = {}) {
    const tx = (0, bitgo_1.createTransactionFromBuffer)(buf, network, { version, amountType });
    assert.strictEqual(tx.byteLength(), buf.length);
    assert.strictEqual(tx.toBuffer().toString('hex'), buf.toString('hex'));
    // Test `Transaction.clone()` implementation
    assert.strictEqual(tx.clone().toBuffer().toString('hex'), buf.toString('hex'));
    if (inputs) {
        const bigintTx = tx.clone('bigint');
        const bigintInputs = inputs.map((input) => ({ ...input, value: BigInt(input.value) }));
        if (roundTripPsbt) {
            // Test UtxoPsbt.fromTransaction() implementation
            assert.strictEqual(bitgo_1.UtxoPsbt.fromTransaction(bigintTx, bigintInputs)
                .finalizeAllInputs()
                .extractTransaction()
                .toBuffer()
                .toString('hex'), buf.toString('hex'));
            // Test UtxoPsbt.toBuffer() and UtxoPsbt.fromBuffer() implementation
            assert.strictEqual((0, bitgo_1.createPsbtFromBuffer)((0, bitgo_1.createPsbtFromTransaction)(bigintTx, bigintInputs).toBuffer(), network)
                .finalizeAllInputs()
                .extractTransaction()
                .toBuffer()
                .toString('hex'), buf.toString('hex'));
        }
        // Test `TransactionBuilder.fromTransaction()` implementation
        assert.strictEqual((0, bitgo_1.createTransactionBuilderFromTransaction)(tx, inputs).build().toBuffer().toString('hex'), buf.toString('hex'));
    }
    return tx;
}
exports.parseTransactionRoundTrip = parseTransactionRoundTrip;
exports.defaultTestOutputAmount = 1e8;
function mockTransactionId(v = 0xff) {
    return Buffer.alloc(32).fill(v).toString('hex');
}
exports.mockTransactionId = mockTransactionId;
function getPrevOutput(scriptType, value, network, vout = 0, { keys = fixtures_1.fixtureKeys, prevTx, } = {}) {
    const script = (0, outputScripts_1.isScriptType2Of3)(scriptType)
        ? (0, outputScripts_1.createOutputScript2of3)(keys.map((k) => k.publicKey), scriptType).scriptPubKey
        : (0, outputScripts_1.createOutputScriptP2shP2pk)(keys[0].publicKey).scriptPubKey;
    if (prevTx === true) {
        const txb = (0, bitgo_1.createTransactionBuilderForNetwork)(network);
        txb.addInput(Buffer.alloc(32).fill(1), 0);
        txb.addOutput(script, value);
        prevTx = txb.buildIncomplete();
    }
    return {
        txid: prevTx ? prevTx.getId() : mockTransactionId(),
        vout,
        script,
        value,
        prevTx: prevTx ? prevTx.toBuffer() : undefined,
    };
}
exports.getPrevOutput = getPrevOutput;
function getPrevOutputs(scriptType, value, network, { keys = fixtures_1.fixtureKeys, prevTx } = {}) {
    return [getPrevOutput(scriptType, value, network, 0, { keys, prevTx })];
}
exports.getPrevOutputs = getPrevOutputs;
function getTransactionBuilder(keys, halfSigners, scriptType, network, { amountType = 'number', outputAmount = exports.defaultTestOutputAmount, prevOutputs = getPrevOutputs(scriptType, (0, bitgo_1.toTNumber)(outputAmount, amountType), network), } = {}) {
    const txBuilder = (0, bitgo_1.createTransactionBuilderForNetwork)(network);
    prevOutputs.forEach(({ txid, vout }) => {
        txBuilder.addInput(txid, vout);
    });
    const recipientScript = (0, outputScripts_util_1.createScriptPubKey)(fixtures_1.fixtureKeys, 'p2pkh', src_1.networks.bitcoin);
    txBuilder.addOutput(recipientScript, (0, bitgo_1.toTNumber)(BigInt(outputAmount) - BigInt(1000), amountType));
    const pubkeys = keys.map((k) => k.publicKey);
    assert((0, bitgo_1.isTriple)(pubkeys));
    prevOutputs.forEach(({ value }, vin) => {
        halfSigners.forEach(({ signer, cosigner }) => {
            if (scriptType === 'p2shP2pk') {
                (0, bitgo_1.signInputP2shP2pk)(txBuilder, vin, signer);
            }
            else {
                if (!cosigner) {
                    throw new Error(`must set cosigner`);
                }
                (0, bitgo_1.signInput2Of3)(txBuilder, vin, scriptType, pubkeys, signer, cosigner.publicKey, value);
            }
        });
    });
    return txBuilder;
}
exports.getTransactionBuilder = getTransactionBuilder;
function getUnsignedTransaction2Of3(keys, scriptType, network, params = {}) {
    return getTransactionBuilder(keys, [], scriptType, network, params).buildIncomplete();
}
exports.getUnsignedTransaction2Of3 = getUnsignedTransaction2Of3;
function getHalfSignedTransaction2Of3(keys, signer1, signer2, scriptType, network, opts = {}) {
    return getTransactionBuilder(keys, [{ signer: signer1, cosigner: signer2 }], scriptType, network, opts).buildIncomplete();
}
exports.getHalfSignedTransaction2Of3 = getHalfSignedTransaction2Of3;
function getFullSignedTransactionP2shP2pk(keys, signer1, network, opts = {}) {
    return getTransactionBuilder(keys, [{ signer: signer1 }], 'p2shP2pk', network, opts).build();
}
exports.getFullSignedTransactionP2shP2pk = getFullSignedTransactionP2shP2pk;
function getFullSignedTransaction2Of3(keys, signer1, signer2, scriptType, network, opts = {}) {
    return getTransactionBuilder(keys, [
        { signer: signer1, cosigner: signer2 },
        { signer: signer2, cosigner: signer1 },
    ], scriptType, network, opts).build();
}
exports.getFullSignedTransaction2Of3 = getFullSignedTransaction2Of3;
function getTransactionStages(keys, signer1, signer2, scriptType, network, opts) {
    const halfSigned = getHalfSignedTransaction2Of3(keys, signer1, signer2, scriptType, network, opts);
    const fullSigned = scriptType === 'p2shP2pk'
        ? halfSigned
        : getFullSignedTransaction2Of3(keys, signer1, signer2, scriptType, network, opts);
    return {
        unsigned: getUnsignedTransaction2Of3(keys, scriptType, network, opts),
        halfSigned,
        fullSigned,
    };
}
exports.getTransactionStages = getTransactionStages;
//# sourceMappingURL=data:application/json;base64,