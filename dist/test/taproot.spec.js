"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const assert = require("assert");
const ecpair_1 = require("ecpair");
const src_1 = require("../src");
const taproot_1 = require("../src/taproot");
const ECPair = (0, ecpair_1.ECPairFactory)(src_1.ecc);
describe('taproot utils', () => {
    describe('musig key aggregation', () => {
        // Expected values for the test cases assertions below are derived from the
        // MuSig2 implementation example code in secp256k1-zkp.
        // https://github.com/jonasnick/secp256k1-zkp/blob/musig2/src/modules/musig/example.c
        it('aggregates 2 pubkeys', () => {
            const aggregatePubkey = src_1.taproot.aggregateMuSigPubkeys(src_1.ecc, [
                Buffer.from('b2eea3c2431bdda9003b30e385f6a59a74fddb39f4aa927f95ad7a6c147c9f6c', 'hex'),
                Buffer.from('d37c98a14d3a749e45a15bcc6836552a7458632f5bc46dca197011e031d6014f', 'hex'),
            ]);
            assert.strictEqual(Buffer.from(aggregatePubkey).toString('hex'), '0ae195f849375eb836fa9f11dd8a44643f424e2671df6e63a2ad9becb853a9fe');
        });
        it('aggregates 3 unsorted pubkeys', () => {
            const aggregatePubkey = src_1.taproot.aggregateMuSigPubkeys(src_1.ecc, [
                Buffer.from('c03b14ebd188344d78ed45a0e4857fc65c7e25f50e0c0d84938220ef37da63d6', 'hex'),
                Buffer.from('8f3bb821cf276d78199fc26f5b7d912e30326a2d21f856ee1c653a896f4e5334', 'hex'),
                Buffer.from('95f6fd0d52f4be09a076a99b77e34dc005eec62bb7cec50ade968dd2f597fc52', 'hex'),
            ]);
            assert.strictEqual(Buffer.from(aggregatePubkey).toString('hex'), '349740502d79dd7a1253235da3b203de6e7717f487a8d1807e683bdfe7bd17ec');
        });
        it('throws an error if no keys are provided', () => {
            assert.throws(() => src_1.taproot.aggregateMuSigPubkeys(src_1.ecc, []));
        });
        it('throws an error if a single key is provided', () => {
            assert.throws(() => src_1.taproot.aggregateMuSigPubkeys(src_1.ecc, [ECPair.makeRandom().publicKey]));
        });
    });
    describe('taptree construction', () => {
        // Expected values for test case assertions below are derived from code and
        // examples provided by the Bitcoin Optech taproot workshop exercises:
        // https://github.com/bitcoinops/taproot-workshop
        const internalPubKey = Buffer.from('af455f4989d122e9185f8c351dbaecd13adca3eef8a9d38ef8ffed6867e342e3', 'hex');
        it('serializes script size', () => {
            const u8 = Buffer.allocUnsafe(0x01);
            const u16 = Buffer.allocUnsafe(0x0101);
            const u32 = Buffer.allocUnsafe(0x010101);
            const u8SerSize = src_1.taproot.serializeScriptSize(u8);
            const u16SerSize = src_1.taproot.serializeScriptSize(u16);
            const u32SerSize = src_1.taproot.serializeScriptSize(u32);
            assert.strictEqual(u8SerSize.toString('hex'), '01');
            assert.strictEqual(u16SerSize.toString('hex'), 'fd0101');
            assert.strictEqual(u32SerSize.toString('hex'), 'fe01010100');
        });
        it('hashes a tap leaf', () => {
            const pubkey = Buffer.from('3627a049c3dd937b1ef01432a54f2e31642be754764f5a677c174576fb02571e', 'hex');
            const script = Buffer.concat([
                new Uint8Array([32]),
                pubkey,
                new Uint8Array([0xac]), // OP_CHECKSIG
            ]);
            const tapLeafHash = src_1.taproot.hashTapLeaf(script);
            assert.strictEqual(tapLeafHash.toString('hex'), '17e20b19dc7e8093c4278d3bf42447a2334546f874ba1693c9d7bc4d81db15c4');
        });
        it('hashes a tap branch', () => {
            const child1 = Buffer.from('f248f2fee0977d141e19e0fddae1cfcdcede1a34a77ebc53c8fe96f346c7f7fc', 'hex');
            const child2 = Buffer.from('72e4cc6e974cae355cf72476edeff8e9a2877ad67cfa4f12bad6f178c6918b9c', 'hex');
            const tapBranchHash = src_1.taproot.hashTapBranch(child1, child2);
            assert.strictEqual(tapBranchHash.toString('hex'), '3009565ab85ceb87d3dfdedc469ec205b2ea139a148af1dcbcc1addf8f1b68a4');
        });
        it('taptweaks a pubkey', () => {
            const taptreeRoot = Buffer.from('dde870346c0f5f1f1c2341041520baa4e252723474c6969f432c2af98251ac01', 'hex');
            const taprootPubkey = src_1.taproot.tapTweakPubkey(src_1.ecc, internalPubKey, taptreeRoot);
            assert.strictEqual(Buffer.from(taprootPubkey.xOnlyPubkey).toString('hex'), 'b23960be1cb56ed0f9044ded73d758f466493cf9e2a6ce139a04fac8d630a601');
            const outputScript = (0, taproot_1.createTaprootOutputScript)({ internalPubKey, taptreeRoot });
            const outputKey = (0, taproot_1.getTaprootOutputKey)(outputScript);
            assert.ok(outputKey.equals(taprootPubkey.xOnlyPubkey));
        });
        it('builds a weighted taptree from scripts and tweaks a pubkey with it', () => {
            const scriptA = Buffer.from('2052b319d011c12225b8f9c63349e7b0e78118a1cb7e406fc70e3e08862b49d10aac', 'hex');
            const scriptB = Buffer.from('20622e61f750f10e597b18a3bb4e5dea88548508b8cb37bfc0fb7af20f7a417d6aac', 'hex');
            const scriptC = Buffer.from('2092a7d17376802e183fc49fb93d4c9b0a4d1cf845c005debbcc9cd57550a6f617ac', 'hex');
            const tapTree = src_1.taproot.getHuffmanTaptree([scriptA, scriptB, scriptC], [1, 1, 2]);
            const tapTreeRoot = tapTree.root;
            const taprootPubkey = src_1.taproot.tapTweakPubkey(src_1.ecc, internalPubKey, tapTreeRoot);
            assert.strictEqual(Buffer.from(taprootPubkey.xOnlyPubkey).toString('hex'), '4c537b89b6763b2c415dee24f75a4c80b48bea926361fbf7636cbf9025c46128');
        });
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGFwcm9vdC5zcGVjLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vdGVzdC90YXByb290LnNwZWMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxpQ0FBaUM7QUFDakMsbUNBQWtEO0FBQ2xELGdDQUFzQztBQUN0Qyw0Q0FBZ0Y7QUFFaEYsTUFBTSxNQUFNLEdBQWMsSUFBQSxzQkFBYSxFQUFDLFNBQUcsQ0FBQyxDQUFDO0FBRTdDLFFBQVEsQ0FBQyxlQUFlLEVBQUUsR0FBRyxFQUFFO0lBQzdCLFFBQVEsQ0FBQyx1QkFBdUIsRUFBRSxHQUFHLEVBQUU7UUFDckMsMkVBQTJFO1FBQzNFLHVEQUF1RDtRQUN2RCxxRkFBcUY7UUFFckYsRUFBRSxDQUFDLHNCQUFzQixFQUFFLEdBQUcsRUFBRTtZQUM5QixNQUFNLGVBQWUsR0FBRyxhQUFPLENBQUMscUJBQXFCLENBQUMsU0FBRyxFQUFFO2dCQUN6RCxNQUFNLENBQUMsSUFBSSxDQUFDLGtFQUFrRSxFQUFFLEtBQUssQ0FBQztnQkFDdEYsTUFBTSxDQUFDLElBQUksQ0FBQyxrRUFBa0UsRUFBRSxLQUFLLENBQUM7YUFDdkYsQ0FBQyxDQUFDO1lBRUgsTUFBTSxDQUFDLFdBQVcsQ0FDaEIsTUFBTSxDQUFDLElBQUksQ0FBQyxlQUFlLENBQUMsQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLEVBQzVDLGtFQUFrRSxDQUNuRSxDQUFDO1FBQ0osQ0FBQyxDQUFDLENBQUM7UUFFSCxFQUFFLENBQUMsK0JBQStCLEVBQUUsR0FBRyxFQUFFO1lBQ3ZDLE1BQU0sZUFBZSxHQUFHLGFBQU8sQ0FBQyxxQkFBcUIsQ0FBQyxTQUFHLEVBQUU7Z0JBQ3pELE1BQU0sQ0FBQyxJQUFJLENBQUMsa0VBQWtFLEVBQUUsS0FBSyxDQUFDO2dCQUN0RixNQUFNLENBQUMsSUFBSSxDQUFDLGtFQUFrRSxFQUFFLEtBQUssQ0FBQztnQkFDdEYsTUFBTSxDQUFDLElBQUksQ0FBQyxrRUFBa0UsRUFBRSxLQUFLLENBQUM7YUFDdkYsQ0FBQyxDQUFDO1lBRUgsTUFBTSxDQUFDLFdBQVcsQ0FDaEIsTUFBTSxDQUFDLElBQUksQ0FBQyxlQUFlLENBQUMsQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLEVBQzVDLGtFQUFrRSxDQUNuRSxDQUFDO1FBQ0osQ0FBQyxDQUFDLENBQUM7UUFFSCxFQUFFLENBQUMseUNBQXlDLEVBQUUsR0FBRyxFQUFFO1lBQ2pELE1BQU0sQ0FBQyxNQUFNLENBQUMsR0FBRyxFQUFFLENBQUMsYUFBTyxDQUFDLHFCQUFxQixDQUFDLFNBQUcsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBQzlELENBQUMsQ0FBQyxDQUFDO1FBRUgsRUFBRSxDQUFDLDZDQUE2QyxFQUFFLEdBQUcsRUFBRTtZQUNyRCxNQUFNLENBQUMsTUFBTSxDQUFDLEdBQUcsRUFBRSxDQUFDLGFBQU8sQ0FBQyxxQkFBcUIsQ0FBQyxTQUFHLEVBQUUsQ0FBQyxNQUFNLENBQUMsVUFBVSxFQUFFLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQzNGLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQyxDQUFDLENBQUM7SUFFSCxRQUFRLENBQUMsc0JBQXNCLEVBQUUsR0FBRyxFQUFFO1FBQ3BDLDJFQUEyRTtRQUMzRSxzRUFBc0U7UUFDdEUsaURBQWlEO1FBRWpELE1BQU0sY0FBYyxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsa0VBQWtFLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFFOUcsRUFBRSxDQUFDLHdCQUF3QixFQUFFLEdBQUcsRUFBRTtZQUNoQyxNQUFNLEVBQUUsR0FBRyxNQUFNLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQ3BDLE1BQU0sR0FBRyxHQUFHLE1BQU0sQ0FBQyxXQUFXLENBQUMsTUFBTSxDQUFDLENBQUM7WUFDdkMsTUFBTSxHQUFHLEdBQUcsTUFBTSxDQUFDLFdBQVcsQ0FBQyxRQUFRLENBQUMsQ0FBQztZQUV6QyxNQUFNLFNBQVMsR0FBRyxhQUFPLENBQUMsbUJBQW1CLENBQUMsRUFBRSxDQUFDLENBQUM7WUFDbEQsTUFBTSxVQUFVLEdBQUcsYUFBTyxDQUFDLG1CQUFtQixDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBQ3BELE1BQU0sVUFBVSxHQUFHLGFBQU8sQ0FBQyxtQkFBbUIsQ0FBQyxHQUFHLENBQUMsQ0FBQztZQUVwRCxNQUFNLENBQUMsV0FBVyxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUM7WUFDcEQsTUFBTSxDQUFDLFdBQVcsQ0FBQyxVQUFVLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxFQUFFLFFBQVEsQ0FBQyxDQUFDO1lBQ3pELE1BQU0sQ0FBQyxXQUFXLENBQUMsVUFBVSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsRUFBRSxZQUFZLENBQUMsQ0FBQztRQUMvRCxDQUFDLENBQUMsQ0FBQztRQUVILEVBQUUsQ0FBQyxtQkFBbUIsRUFBRSxHQUFHLEVBQUU7WUFDM0IsTUFBTSxNQUFNLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxrRUFBa0UsRUFBRSxLQUFLLENBQUMsQ0FBQztZQUV0RyxNQUFNLE1BQU0sR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDO2dCQUMzQixJQUFJLFVBQVUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDO2dCQUNwQixNQUFNO2dCQUNOLElBQUksVUFBVSxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxjQUFjO2FBQ3ZDLENBQUMsQ0FBQztZQUVILE1BQU0sV0FBVyxHQUFHLGFBQU8sQ0FBQyxXQUFXLENBQUMsTUFBTSxDQUFDLENBQUM7WUFFaEQsTUFBTSxDQUFDLFdBQVcsQ0FDaEIsV0FBVyxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsRUFDM0Isa0VBQWtFLENBQ25FLENBQUM7UUFDSixDQUFDLENBQUMsQ0FBQztRQUVILEVBQUUsQ0FBQyxxQkFBcUIsRUFBRSxHQUFHLEVBQUU7WUFDN0IsTUFBTSxNQUFNLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxrRUFBa0UsRUFBRSxLQUFLLENBQUMsQ0FBQztZQUN0RyxNQUFNLE1BQU0sR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLGtFQUFrRSxFQUFFLEtBQUssQ0FBQyxDQUFDO1lBRXRHLE1BQU0sYUFBYSxHQUFHLGFBQU8sQ0FBQyxhQUFhLENBQUMsTUFBTSxFQUFFLE1BQU0sQ0FBQyxDQUFDO1lBRTVELE1BQU0sQ0FBQyxXQUFXLENBQ2hCLGFBQWEsQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLEVBQzdCLGtFQUFrRSxDQUNuRSxDQUFDO1FBQ0osQ0FBQyxDQUFDLENBQUM7UUFFSCxFQUFFLENBQUMsb0JBQW9CLEVBQUUsR0FBRyxFQUFFO1lBQzVCLE1BQU0sV0FBVyxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsa0VBQWtFLEVBQUUsS0FBSyxDQUFDLENBQUM7WUFFM0csTUFBTSxhQUFhLEdBQUcsYUFBTyxDQUFDLGNBQWMsQ0FBQyxTQUFHLEVBQUUsY0FBYyxFQUFFLFdBQVcsQ0FBQyxDQUFDO1lBRS9FLE1BQU0sQ0FBQyxXQUFXLENBQ2hCLE1BQU0sQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLFdBQVcsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsRUFDdEQsa0VBQWtFLENBQ25FLENBQUM7WUFFRixNQUFNLFlBQVksR0FBRyxJQUFBLG1DQUF5QixFQUFDLEVBQUUsY0FBYyxFQUFFLFdBQVcsRUFBRSxDQUFDLENBQUM7WUFDaEYsTUFBTSxTQUFTLEdBQUcsSUFBQSw2QkFBbUIsRUFBQyxZQUFZLENBQUMsQ0FBQztZQUNwRCxNQUFNLENBQUMsRUFBRSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsYUFBYSxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUM7UUFDekQsQ0FBQyxDQUFDLENBQUM7UUFFSCxFQUFFLENBQUMsb0VBQW9FLEVBQUUsR0FBRyxFQUFFO1lBQzVFLE1BQU0sT0FBTyxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsc0VBQXNFLEVBQUUsS0FBSyxDQUFDLENBQUM7WUFDM0csTUFBTSxPQUFPLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxzRUFBc0UsRUFBRSxLQUFLLENBQUMsQ0FBQztZQUMzRyxNQUFNLE9BQU8sR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLHNFQUFzRSxFQUFFLEtBQUssQ0FBQyxDQUFDO1lBRTNHLE1BQU0sT0FBTyxHQUFHLGFBQU8sQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDLE9BQU8sRUFBRSxPQUFPLEVBQUUsT0FBTyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDbEYsTUFBTSxXQUFXLEdBQUcsT0FBTyxDQUFDLElBQUksQ0FBQztZQUVqQyxNQUFNLGFBQWEsR0FBRyxhQUFPLENBQUMsY0FBYyxDQUFDLFNBQUcsRUFBRSxjQUFjLEVBQUUsV0FBVyxDQUFDLENBQUM7WUFFL0UsTUFBTSxDQUFDLFdBQVcsQ0FDaEIsTUFBTSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsV0FBVyxDQUFDLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxFQUN0RCxrRUFBa0UsQ0FDbkUsQ0FBQztRQUNKLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQyxDQUFDLENBQUM7QUFDTCxDQUFDLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIGFzc2VydCBmcm9tICdhc3NlcnQnO1xyXG5pbXBvcnQgeyBFQ1BhaXJBUEksIEVDUGFpckZhY3RvcnkgfSBmcm9tICdlY3BhaXInO1xyXG5pbXBvcnQgeyBlY2MsIHRhcHJvb3QgfSBmcm9tICcuLi9zcmMnO1xyXG5pbXBvcnQgeyBjcmVhdGVUYXByb290T3V0cHV0U2NyaXB0LCBnZXRUYXByb290T3V0cHV0S2V5IH0gZnJvbSAnLi4vc3JjL3RhcHJvb3QnO1xyXG5cclxuY29uc3QgRUNQYWlyOiBFQ1BhaXJBUEkgPSBFQ1BhaXJGYWN0b3J5KGVjYyk7XHJcblxyXG5kZXNjcmliZSgndGFwcm9vdCB1dGlscycsICgpID0+IHtcclxuICBkZXNjcmliZSgnbXVzaWcga2V5IGFnZ3JlZ2F0aW9uJywgKCkgPT4ge1xyXG4gICAgLy8gRXhwZWN0ZWQgdmFsdWVzIGZvciB0aGUgdGVzdCBjYXNlcyBhc3NlcnRpb25zIGJlbG93IGFyZSBkZXJpdmVkIGZyb20gdGhlXHJcbiAgICAvLyBNdVNpZzIgaW1wbGVtZW50YXRpb24gZXhhbXBsZSBjb2RlIGluIHNlY3AyNTZrMS16a3AuXHJcbiAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vam9uYXNuaWNrL3NlY3AyNTZrMS16a3AvYmxvYi9tdXNpZzIvc3JjL21vZHVsZXMvbXVzaWcvZXhhbXBsZS5jXHJcblxyXG4gICAgaXQoJ2FnZ3JlZ2F0ZXMgMiBwdWJrZXlzJywgKCkgPT4ge1xyXG4gICAgICBjb25zdCBhZ2dyZWdhdGVQdWJrZXkgPSB0YXByb290LmFnZ3JlZ2F0ZU11U2lnUHVia2V5cyhlY2MsIFtcclxuICAgICAgICBCdWZmZXIuZnJvbSgnYjJlZWEzYzI0MzFiZGRhOTAwM2IzMGUzODVmNmE1OWE3NGZkZGIzOWY0YWE5MjdmOTVhZDdhNmMxNDdjOWY2YycsICdoZXgnKSxcclxuICAgICAgICBCdWZmZXIuZnJvbSgnZDM3Yzk4YTE0ZDNhNzQ5ZTQ1YTE1YmNjNjgzNjU1MmE3NDU4NjMyZjViYzQ2ZGNhMTk3MDExZTAzMWQ2MDE0ZicsICdoZXgnKSxcclxuICAgICAgXSk7XHJcblxyXG4gICAgICBhc3NlcnQuc3RyaWN0RXF1YWwoXHJcbiAgICAgICAgQnVmZmVyLmZyb20oYWdncmVnYXRlUHVia2V5KS50b1N0cmluZygnaGV4JyksXHJcbiAgICAgICAgJzBhZTE5NWY4NDkzNzVlYjgzNmZhOWYxMWRkOGE0NDY0M2Y0MjRlMjY3MWRmNmU2M2EyYWQ5YmVjYjg1M2E5ZmUnXHJcbiAgICAgICk7XHJcbiAgICB9KTtcclxuXHJcbiAgICBpdCgnYWdncmVnYXRlcyAzIHVuc29ydGVkIHB1YmtleXMnLCAoKSA9PiB7XHJcbiAgICAgIGNvbnN0IGFnZ3JlZ2F0ZVB1YmtleSA9IHRhcHJvb3QuYWdncmVnYXRlTXVTaWdQdWJrZXlzKGVjYywgW1xyXG4gICAgICAgIEJ1ZmZlci5mcm9tKCdjMDNiMTRlYmQxODgzNDRkNzhlZDQ1YTBlNDg1N2ZjNjVjN2UyNWY1MGUwYzBkODQ5MzgyMjBlZjM3ZGE2M2Q2JywgJ2hleCcpLFxyXG4gICAgICAgIEJ1ZmZlci5mcm9tKCc4ZjNiYjgyMWNmMjc2ZDc4MTk5ZmMyNmY1YjdkOTEyZTMwMzI2YTJkMjFmODU2ZWUxYzY1M2E4OTZmNGU1MzM0JywgJ2hleCcpLFxyXG4gICAgICAgIEJ1ZmZlci5mcm9tKCc5NWY2ZmQwZDUyZjRiZTA5YTA3NmE5OWI3N2UzNGRjMDA1ZWVjNjJiYjdjZWM1MGFkZTk2OGRkMmY1OTdmYzUyJywgJ2hleCcpLFxyXG4gICAgICBdKTtcclxuXHJcbiAgICAgIGFzc2VydC5zdHJpY3RFcXVhbChcclxuICAgICAgICBCdWZmZXIuZnJvbShhZ2dyZWdhdGVQdWJrZXkpLnRvU3RyaW5nKCdoZXgnKSxcclxuICAgICAgICAnMzQ5NzQwNTAyZDc5ZGQ3YTEyNTMyMzVkYTNiMjAzZGU2ZTc3MTdmNDg3YThkMTgwN2U2ODNiZGZlN2JkMTdlYydcclxuICAgICAgKTtcclxuICAgIH0pO1xyXG5cclxuICAgIGl0KCd0aHJvd3MgYW4gZXJyb3IgaWYgbm8ga2V5cyBhcmUgcHJvdmlkZWQnLCAoKSA9PiB7XHJcbiAgICAgIGFzc2VydC50aHJvd3MoKCkgPT4gdGFwcm9vdC5hZ2dyZWdhdGVNdVNpZ1B1YmtleXMoZWNjLCBbXSkpO1xyXG4gICAgfSk7XHJcblxyXG4gICAgaXQoJ3Rocm93cyBhbiBlcnJvciBpZiBhIHNpbmdsZSBrZXkgaXMgcHJvdmlkZWQnLCAoKSA9PiB7XHJcbiAgICAgIGFzc2VydC50aHJvd3MoKCkgPT4gdGFwcm9vdC5hZ2dyZWdhdGVNdVNpZ1B1YmtleXMoZWNjLCBbRUNQYWlyLm1ha2VSYW5kb20oKS5wdWJsaWNLZXldKSk7XHJcbiAgICB9KTtcclxuICB9KTtcclxuXHJcbiAgZGVzY3JpYmUoJ3RhcHRyZWUgY29uc3RydWN0aW9uJywgKCkgPT4ge1xyXG4gICAgLy8gRXhwZWN0ZWQgdmFsdWVzIGZvciB0ZXN0IGNhc2UgYXNzZXJ0aW9ucyBiZWxvdyBhcmUgZGVyaXZlZCBmcm9tIGNvZGUgYW5kXHJcbiAgICAvLyBleGFtcGxlcyBwcm92aWRlZCBieSB0aGUgQml0Y29pbiBPcHRlY2ggdGFwcm9vdCB3b3Jrc2hvcCBleGVyY2lzZXM6XHJcbiAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vYml0Y29pbm9wcy90YXByb290LXdvcmtzaG9wXHJcblxyXG4gICAgY29uc3QgaW50ZXJuYWxQdWJLZXkgPSBCdWZmZXIuZnJvbSgnYWY0NTVmNDk4OWQxMjJlOTE4NWY4YzM1MWRiYWVjZDEzYWRjYTNlZWY4YTlkMzhlZjhmZmVkNjg2N2UzNDJlMycsICdoZXgnKTtcclxuXHJcbiAgICBpdCgnc2VyaWFsaXplcyBzY3JpcHQgc2l6ZScsICgpID0+IHtcclxuICAgICAgY29uc3QgdTggPSBCdWZmZXIuYWxsb2NVbnNhZmUoMHgwMSk7XHJcbiAgICAgIGNvbnN0IHUxNiA9IEJ1ZmZlci5hbGxvY1Vuc2FmZSgweDAxMDEpO1xyXG4gICAgICBjb25zdCB1MzIgPSBCdWZmZXIuYWxsb2NVbnNhZmUoMHgwMTAxMDEpO1xyXG5cclxuICAgICAgY29uc3QgdThTZXJTaXplID0gdGFwcm9vdC5zZXJpYWxpemVTY3JpcHRTaXplKHU4KTtcclxuICAgICAgY29uc3QgdTE2U2VyU2l6ZSA9IHRhcHJvb3Quc2VyaWFsaXplU2NyaXB0U2l6ZSh1MTYpO1xyXG4gICAgICBjb25zdCB1MzJTZXJTaXplID0gdGFwcm9vdC5zZXJpYWxpemVTY3JpcHRTaXplKHUzMik7XHJcblxyXG4gICAgICBhc3NlcnQuc3RyaWN0RXF1YWwodThTZXJTaXplLnRvU3RyaW5nKCdoZXgnKSwgJzAxJyk7XHJcbiAgICAgIGFzc2VydC5zdHJpY3RFcXVhbCh1MTZTZXJTaXplLnRvU3RyaW5nKCdoZXgnKSwgJ2ZkMDEwMScpO1xyXG4gICAgICBhc3NlcnQuc3RyaWN0RXF1YWwodTMyU2VyU2l6ZS50b1N0cmluZygnaGV4JyksICdmZTAxMDEwMTAwJyk7XHJcbiAgICB9KTtcclxuXHJcbiAgICBpdCgnaGFzaGVzIGEgdGFwIGxlYWYnLCAoKSA9PiB7XHJcbiAgICAgIGNvbnN0IHB1YmtleSA9IEJ1ZmZlci5mcm9tKCczNjI3YTA0OWMzZGQ5MzdiMWVmMDE0MzJhNTRmMmUzMTY0MmJlNzU0NzY0ZjVhNjc3YzE3NDU3NmZiMDI1NzFlJywgJ2hleCcpO1xyXG5cclxuICAgICAgY29uc3Qgc2NyaXB0ID0gQnVmZmVyLmNvbmNhdChbXHJcbiAgICAgICAgbmV3IFVpbnQ4QXJyYXkoWzMyXSksIC8vIHB1c2ggMzIgYnl0ZSBwdWIga2V5XHJcbiAgICAgICAgcHVia2V5LFxyXG4gICAgICAgIG5ldyBVaW50OEFycmF5KFsweGFjXSksIC8vIE9QX0NIRUNLU0lHXHJcbiAgICAgIF0pO1xyXG5cclxuICAgICAgY29uc3QgdGFwTGVhZkhhc2ggPSB0YXByb290Lmhhc2hUYXBMZWFmKHNjcmlwdCk7XHJcblxyXG4gICAgICBhc3NlcnQuc3RyaWN0RXF1YWwoXHJcbiAgICAgICAgdGFwTGVhZkhhc2gudG9TdHJpbmcoJ2hleCcpLFxyXG4gICAgICAgICcxN2UyMGIxOWRjN2U4MDkzYzQyNzhkM2JmNDI0NDdhMjMzNDU0NmY4NzRiYTE2OTNjOWQ3YmM0ZDgxZGIxNWM0J1xyXG4gICAgICApO1xyXG4gICAgfSk7XHJcblxyXG4gICAgaXQoJ2hhc2hlcyBhIHRhcCBicmFuY2gnLCAoKSA9PiB7XHJcbiAgICAgIGNvbnN0IGNoaWxkMSA9IEJ1ZmZlci5mcm9tKCdmMjQ4ZjJmZWUwOTc3ZDE0MWUxOWUwZmRkYWUxY2ZjZGNlZGUxYTM0YTc3ZWJjNTNjOGZlOTZmMzQ2YzdmN2ZjJywgJ2hleCcpO1xyXG4gICAgICBjb25zdCBjaGlsZDIgPSBCdWZmZXIuZnJvbSgnNzJlNGNjNmU5NzRjYWUzNTVjZjcyNDc2ZWRlZmY4ZTlhMjg3N2FkNjdjZmE0ZjEyYmFkNmYxNzhjNjkxOGI5YycsICdoZXgnKTtcclxuXHJcbiAgICAgIGNvbnN0IHRhcEJyYW5jaEhhc2ggPSB0YXByb290Lmhhc2hUYXBCcmFuY2goY2hpbGQxLCBjaGlsZDIpO1xyXG5cclxuICAgICAgYXNzZXJ0LnN0cmljdEVxdWFsKFxyXG4gICAgICAgIHRhcEJyYW5jaEhhc2gudG9TdHJpbmcoJ2hleCcpLFxyXG4gICAgICAgICczMDA5NTY1YWI4NWNlYjg3ZDNkZmRlZGM0NjllYzIwNWIyZWExMzlhMTQ4YWYxZGNiY2MxYWRkZjhmMWI2OGE0J1xyXG4gICAgICApO1xyXG4gICAgfSk7XHJcblxyXG4gICAgaXQoJ3RhcHR3ZWFrcyBhIHB1YmtleScsICgpID0+IHtcclxuICAgICAgY29uc3QgdGFwdHJlZVJvb3QgPSBCdWZmZXIuZnJvbSgnZGRlODcwMzQ2YzBmNWYxZjFjMjM0MTA0MTUyMGJhYTRlMjUyNzIzNDc0YzY5NjlmNDMyYzJhZjk4MjUxYWMwMScsICdoZXgnKTtcclxuXHJcbiAgICAgIGNvbnN0IHRhcHJvb3RQdWJrZXkgPSB0YXByb290LnRhcFR3ZWFrUHVia2V5KGVjYywgaW50ZXJuYWxQdWJLZXksIHRhcHRyZWVSb290KTtcclxuXHJcbiAgICAgIGFzc2VydC5zdHJpY3RFcXVhbChcclxuICAgICAgICBCdWZmZXIuZnJvbSh0YXByb290UHVia2V5LnhPbmx5UHVia2V5KS50b1N0cmluZygnaGV4JyksXHJcbiAgICAgICAgJ2IyMzk2MGJlMWNiNTZlZDBmOTA0NGRlZDczZDc1OGY0NjY0OTNjZjllMmE2Y2UxMzlhMDRmYWM4ZDYzMGE2MDEnXHJcbiAgICAgICk7XHJcblxyXG4gICAgICBjb25zdCBvdXRwdXRTY3JpcHQgPSBjcmVhdGVUYXByb290T3V0cHV0U2NyaXB0KHsgaW50ZXJuYWxQdWJLZXksIHRhcHRyZWVSb290IH0pO1xyXG4gICAgICBjb25zdCBvdXRwdXRLZXkgPSBnZXRUYXByb290T3V0cHV0S2V5KG91dHB1dFNjcmlwdCk7XHJcbiAgICAgIGFzc2VydC5vayhvdXRwdXRLZXkuZXF1YWxzKHRhcHJvb3RQdWJrZXkueE9ubHlQdWJrZXkpKTtcclxuICAgIH0pO1xyXG5cclxuICAgIGl0KCdidWlsZHMgYSB3ZWlnaHRlZCB0YXB0cmVlIGZyb20gc2NyaXB0cyBhbmQgdHdlYWtzIGEgcHVia2V5IHdpdGggaXQnLCAoKSA9PiB7XHJcbiAgICAgIGNvbnN0IHNjcmlwdEEgPSBCdWZmZXIuZnJvbSgnMjA1MmIzMTlkMDExYzEyMjI1YjhmOWM2MzM0OWU3YjBlNzgxMThhMWNiN2U0MDZmYzcwZTNlMDg4NjJiNDlkMTBhYWMnLCAnaGV4Jyk7XHJcbiAgICAgIGNvbnN0IHNjcmlwdEIgPSBCdWZmZXIuZnJvbSgnMjA2MjJlNjFmNzUwZjEwZTU5N2IxOGEzYmI0ZTVkZWE4ODU0ODUwOGI4Y2IzN2JmYzBmYjdhZjIwZjdhNDE3ZDZhYWMnLCAnaGV4Jyk7XHJcbiAgICAgIGNvbnN0IHNjcmlwdEMgPSBCdWZmZXIuZnJvbSgnMjA5MmE3ZDE3Mzc2ODAyZTE4M2ZjNDlmYjkzZDRjOWIwYTRkMWNmODQ1YzAwNWRlYmJjYzljZDU3NTUwYTZmNjE3YWMnLCAnaGV4Jyk7XHJcblxyXG4gICAgICBjb25zdCB0YXBUcmVlID0gdGFwcm9vdC5nZXRIdWZmbWFuVGFwdHJlZShbc2NyaXB0QSwgc2NyaXB0Qiwgc2NyaXB0Q10sIFsxLCAxLCAyXSk7XHJcbiAgICAgIGNvbnN0IHRhcFRyZWVSb290ID0gdGFwVHJlZS5yb290O1xyXG5cclxuICAgICAgY29uc3QgdGFwcm9vdFB1YmtleSA9IHRhcHJvb3QudGFwVHdlYWtQdWJrZXkoZWNjLCBpbnRlcm5hbFB1YktleSwgdGFwVHJlZVJvb3QpO1xyXG5cclxuICAgICAgYXNzZXJ0LnN0cmljdEVxdWFsKFxyXG4gICAgICAgIEJ1ZmZlci5mcm9tKHRhcHJvb3RQdWJrZXkueE9ubHlQdWJrZXkpLnRvU3RyaW5nKCdoZXgnKSxcclxuICAgICAgICAnNGM1MzdiODliNjc2M2IyYzQxNWRlZTI0Zjc1YTRjODBiNDhiZWE5MjYzNjFmYmY3NjM2Y2JmOTAyNWM0NjEyOCdcclxuICAgICAgKTtcclxuICAgIH0pO1xyXG4gIH0pO1xyXG59KTtcclxuIl19