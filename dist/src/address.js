"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.toBech32 = exports.fromBech32 = exports.fromBase58Check = exports.toBase58Check = exports.toOutputScript = exports.fromOutputScript = void 0;
const bitcoinjs = require("bitcoinjs-lib");
const zcashAddress = require("../src/bitgo/zcash/address");
const grsAddress = require("groestlcoinjs-lib/src/address");
const networks_1 = require("./networks");
const index_1 = require("./index");
function fromOutputScript(outputScript, network) {
    if ((0, networks_1.isValidNetwork)(network) && (0, networks_1.isZcash)(network)) {
        return zcashAddress.fromOutputScript(outputScript, network);
    }
    if ((0, networks_1.isValidNetwork)(network) && (0, networks_1.isGroestlcoin)(network)) {
        return grsAddress.fromOutputScript(outputScript);
    }
    // We added p2tr payments from our forked bitcoinjs-lib to utxo-lib instead. Our bitcoinjs fork will no longer have
    // p2tr support so utxo-lib should take care of retrieving a p2tr address from outputScript and bitcoinjs-lib can
    // handle the other type of payments.
    try {
        return index_1.p2trPayments.p2tr({ output: outputScript, network }).address;
    }
    catch (e) {
        // noop. try the bitcoinjs method
    }
    return bitcoinjs.address.fromOutputScript(outputScript, network);
}
exports.fromOutputScript = fromOutputScript;
function toOutputScript(address, network) {
    if ((0, networks_1.isValidNetwork)(network) && (0, networks_1.isZcash)(network)) {
        return zcashAddress.toOutputScript(address, network);
    }
    if ((0, networks_1.isValidNetwork)(network) && (0, networks_1.isGroestlcoin)(network)) {
        return grsAddress.toOutputScript(address);
    }
    return bitcoinjs.address.toOutputScript(address, network);
}
exports.toOutputScript = toOutputScript;
function toBase58Check(hash, version, network) {
    if ((0, networks_1.isValidNetwork)(network) && (0, networks_1.isZcash)(network)) {
        return zcashAddress.toBase58Check(hash, version);
    }
    if ((0, networks_1.isValidNetwork)(network) && (0, networks_1.isGroestlcoin)(network)) {
        return grsAddress.toBase58GrsCheck(hash, version);
    }
    return bitcoinjs.address.toBase58Check(hash, version);
}
exports.toBase58Check = toBase58Check;
function fromBase58Check(address, network) {
    if ((0, networks_1.isValidNetwork)(network) && (0, networks_1.isZcash)(network)) {
        return zcashAddress.fromBase58Check(address, network);
    }
    if ((0, networks_1.isValidNetwork)(network) && (0, networks_1.isGroestlcoin)(network)) {
        return grsAddress.fromBase58GrsCheck(address);
    }
    return bitcoinjs.address.fromBase58Check(address);
}
exports.fromBase58Check = fromBase58Check;
_a = bitcoinjs.address, exports.fromBech32 = _a.fromBech32, exports.toBech32 = _a.toBech32;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWRkcmVzcy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9hZGRyZXNzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSwyQ0FBMkM7QUFHM0MsMkRBQTJEO0FBQzNELDREQUE0RDtBQUM1RCx5Q0FBNkU7QUFDN0UsbUNBQXVDO0FBRXZDLFNBQWdCLGdCQUFnQixDQUFDLFlBQW9CLEVBQUUsT0FBZ0I7SUFDckUsSUFBSSxJQUFBLHlCQUFjLEVBQUMsT0FBTyxDQUFDLElBQUksSUFBQSxrQkFBTyxFQUFDLE9BQU8sQ0FBQyxFQUFFO1FBQy9DLE9BQU8sWUFBWSxDQUFDLGdCQUFnQixDQUFDLFlBQVksRUFBRSxPQUFPLENBQUMsQ0FBQztLQUM3RDtJQUNELElBQUksSUFBQSx5QkFBYyxFQUFDLE9BQU8sQ0FBQyxJQUFJLElBQUEsd0JBQWEsRUFBQyxPQUFPLENBQUMsRUFBRTtRQUNyRCxPQUFPLFVBQVUsQ0FBQyxnQkFBZ0IsQ0FBQyxZQUFZLENBQUMsQ0FBQztLQUNsRDtJQUNELG1IQUFtSDtJQUNuSCxpSEFBaUg7SUFDakgscUNBQXFDO0lBQ3JDLElBQUk7UUFDRixPQUFPLG9CQUFZLENBQUMsSUFBSSxDQUFDLEVBQUUsTUFBTSxFQUFFLFlBQVksRUFBRSxPQUFPLEVBQUUsQ0FBQyxDQUFDLE9BQWlCLENBQUM7S0FDL0U7SUFBQyxPQUFPLENBQUMsRUFBRTtRQUNWLGlDQUFpQztLQUNsQztJQUVELE9BQU8sU0FBUyxDQUFDLE9BQU8sQ0FBQyxnQkFBZ0IsQ0FBQyxZQUFZLEVBQUUsT0FBNEIsQ0FBQyxDQUFDO0FBQ3hGLENBQUM7QUFqQkQsNENBaUJDO0FBRUQsU0FBZ0IsY0FBYyxDQUFDLE9BQWUsRUFBRSxPQUFnQjtJQUM5RCxJQUFJLElBQUEseUJBQWMsRUFBQyxPQUFPLENBQUMsSUFBSSxJQUFBLGtCQUFPLEVBQUMsT0FBTyxDQUFDLEVBQUU7UUFDL0MsT0FBTyxZQUFZLENBQUMsY0FBYyxDQUFDLE9BQU8sRUFBRSxPQUFPLENBQUMsQ0FBQztLQUN0RDtJQUNELElBQUksSUFBQSx5QkFBYyxFQUFDLE9BQU8sQ0FBQyxJQUFJLElBQUEsd0JBQWEsRUFBQyxPQUFPLENBQUMsRUFBRTtRQUNyRCxPQUFPLFVBQVUsQ0FBQyxjQUFjLENBQUMsT0FBTyxDQUFDLENBQUM7S0FDM0M7SUFDRCxPQUFPLFNBQVMsQ0FBQyxPQUFPLENBQUMsY0FBYyxDQUFDLE9BQU8sRUFBRSxPQUE0QixDQUFDLENBQUM7QUFDakYsQ0FBQztBQVJELHdDQVFDO0FBRUQsU0FBZ0IsYUFBYSxDQUFDLElBQVksRUFBRSxPQUFlLEVBQUUsT0FBZ0I7SUFDM0UsSUFBSSxJQUFBLHlCQUFjLEVBQUMsT0FBTyxDQUFDLElBQUksSUFBQSxrQkFBTyxFQUFDLE9BQU8sQ0FBQyxFQUFFO1FBQy9DLE9BQU8sWUFBWSxDQUFDLGFBQWEsQ0FBQyxJQUFJLEVBQUUsT0FBTyxDQUFDLENBQUM7S0FDbEQ7SUFDRCxJQUFJLElBQUEseUJBQWMsRUFBQyxPQUFPLENBQUMsSUFBSSxJQUFBLHdCQUFhLEVBQUMsT0FBTyxDQUFDLEVBQUU7UUFDckQsT0FBTyxVQUFVLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxFQUFFLE9BQU8sQ0FBQyxDQUFDO0tBQ25EO0lBQ0QsT0FBTyxTQUFTLENBQUMsT0FBTyxDQUFDLGFBQWEsQ0FBQyxJQUFJLEVBQUUsT0FBTyxDQUFDLENBQUM7QUFDeEQsQ0FBQztBQVJELHNDQVFDO0FBRUQsU0FBZ0IsZUFBZSxDQUFDLE9BQWUsRUFBRSxPQUFnQjtJQUMvRCxJQUFJLElBQUEseUJBQWMsRUFBQyxPQUFPLENBQUMsSUFBSSxJQUFBLGtCQUFPLEVBQUMsT0FBTyxDQUFDLEVBQUU7UUFDL0MsT0FBTyxZQUFZLENBQUMsZUFBZSxDQUFDLE9BQU8sRUFBRSxPQUFPLENBQUMsQ0FBQztLQUN2RDtJQUNELElBQUksSUFBQSx5QkFBYyxFQUFDLE9BQU8sQ0FBQyxJQUFJLElBQUEsd0JBQWEsRUFBQyxPQUFPLENBQUMsRUFBRTtRQUNyRCxPQUFPLFVBQVUsQ0FBQyxrQkFBa0IsQ0FBQyxPQUFPLENBQUMsQ0FBQztLQUMvQztJQUNELE9BQU8sU0FBUyxDQUFDLE9BQU8sQ0FBQyxlQUFlLENBQUMsT0FBTyxDQUFDLENBQUM7QUFDcEQsQ0FBQztBQVJELDBDQVFDO0FBRVksS0FBMkIsU0FBUyxDQUFDLE9BQU8sRUFBMUMsa0JBQVUsa0JBQUUsZ0JBQVEsZUFBdUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBiaXRjb2luanMgZnJvbSAnYml0Y29pbmpzLWxpYic7XHJcbmltcG9ydCB7IEJhc2U1OENoZWNrUmVzdWx0LCBCZWNoMzJSZXN1bHQgfSBmcm9tICdiaXRjb2luanMtbGliL3NyYy9hZGRyZXNzJztcclxuXHJcbmltcG9ydCAqIGFzIHpjYXNoQWRkcmVzcyBmcm9tICcuLi9zcmMvYml0Z28vemNhc2gvYWRkcmVzcyc7XHJcbmltcG9ydCAqIGFzIGdyc0FkZHJlc3MgZnJvbSAnZ3JvZXN0bGNvaW5qcy1saWIvc3JjL2FkZHJlc3MnO1xyXG5pbXBvcnQgeyBpc1ZhbGlkTmV0d29yaywgaXNaY2FzaCwgaXNHcm9lc3RsY29pbiwgTmV0d29yayB9IGZyb20gJy4vbmV0d29ya3MnO1xyXG5pbXBvcnQgeyBwMnRyUGF5bWVudHMgfSBmcm9tICcuL2luZGV4JztcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBmcm9tT3V0cHV0U2NyaXB0KG91dHB1dFNjcmlwdDogQnVmZmVyLCBuZXR3b3JrOiBOZXR3b3JrKTogc3RyaW5nIHtcclxuICBpZiAoaXNWYWxpZE5ldHdvcmsobmV0d29yaykgJiYgaXNaY2FzaChuZXR3b3JrKSkge1xyXG4gICAgcmV0dXJuIHpjYXNoQWRkcmVzcy5mcm9tT3V0cHV0U2NyaXB0KG91dHB1dFNjcmlwdCwgbmV0d29yayk7XHJcbiAgfVxyXG4gIGlmIChpc1ZhbGlkTmV0d29yayhuZXR3b3JrKSAmJiBpc0dyb2VzdGxjb2luKG5ldHdvcmspKSB7XHJcbiAgICByZXR1cm4gZ3JzQWRkcmVzcy5mcm9tT3V0cHV0U2NyaXB0KG91dHB1dFNjcmlwdCk7XHJcbiAgfVxyXG4gIC8vIFdlIGFkZGVkIHAydHIgcGF5bWVudHMgZnJvbSBvdXIgZm9ya2VkIGJpdGNvaW5qcy1saWIgdG8gdXR4by1saWIgaW5zdGVhZC4gT3VyIGJpdGNvaW5qcyBmb3JrIHdpbGwgbm8gbG9uZ2VyIGhhdmVcclxuICAvLyBwMnRyIHN1cHBvcnQgc28gdXR4by1saWIgc2hvdWxkIHRha2UgY2FyZSBvZiByZXRyaWV2aW5nIGEgcDJ0ciBhZGRyZXNzIGZyb20gb3V0cHV0U2NyaXB0IGFuZCBiaXRjb2luanMtbGliIGNhblxyXG4gIC8vIGhhbmRsZSB0aGUgb3RoZXIgdHlwZSBvZiBwYXltZW50cy5cclxuICB0cnkge1xyXG4gICAgcmV0dXJuIHAydHJQYXltZW50cy5wMnRyKHsgb3V0cHV0OiBvdXRwdXRTY3JpcHQsIG5ldHdvcmsgfSkuYWRkcmVzcyBhcyBzdHJpbmc7XHJcbiAgfSBjYXRjaCAoZSkge1xyXG4gICAgLy8gbm9vcC4gdHJ5IHRoZSBiaXRjb2luanMgbWV0aG9kXHJcbiAgfVxyXG5cclxuICByZXR1cm4gYml0Y29pbmpzLmFkZHJlc3MuZnJvbU91dHB1dFNjcmlwdChvdXRwdXRTY3JpcHQsIG5ldHdvcmsgYXMgYml0Y29pbmpzLk5ldHdvcmspO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gdG9PdXRwdXRTY3JpcHQoYWRkcmVzczogc3RyaW5nLCBuZXR3b3JrOiBOZXR3b3JrKTogQnVmZmVyIHtcclxuICBpZiAoaXNWYWxpZE5ldHdvcmsobmV0d29yaykgJiYgaXNaY2FzaChuZXR3b3JrKSkge1xyXG4gICAgcmV0dXJuIHpjYXNoQWRkcmVzcy50b091dHB1dFNjcmlwdChhZGRyZXNzLCBuZXR3b3JrKTtcclxuICB9XHJcbiAgaWYgKGlzVmFsaWROZXR3b3JrKG5ldHdvcmspICYmIGlzR3JvZXN0bGNvaW4obmV0d29yaykpIHtcclxuICAgIHJldHVybiBncnNBZGRyZXNzLnRvT3V0cHV0U2NyaXB0KGFkZHJlc3MpO1xyXG4gIH1cclxuICByZXR1cm4gYml0Y29pbmpzLmFkZHJlc3MudG9PdXRwdXRTY3JpcHQoYWRkcmVzcywgbmV0d29yayBhcyBiaXRjb2luanMuTmV0d29yayk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiB0b0Jhc2U1OENoZWNrKGhhc2g6IEJ1ZmZlciwgdmVyc2lvbjogbnVtYmVyLCBuZXR3b3JrOiBOZXR3b3JrKTogc3RyaW5nIHtcclxuICBpZiAoaXNWYWxpZE5ldHdvcmsobmV0d29yaykgJiYgaXNaY2FzaChuZXR3b3JrKSkge1xyXG4gICAgcmV0dXJuIHpjYXNoQWRkcmVzcy50b0Jhc2U1OENoZWNrKGhhc2gsIHZlcnNpb24pO1xyXG4gIH1cclxuICBpZiAoaXNWYWxpZE5ldHdvcmsobmV0d29yaykgJiYgaXNHcm9lc3RsY29pbihuZXR3b3JrKSkge1xyXG4gICAgcmV0dXJuIGdyc0FkZHJlc3MudG9CYXNlNThHcnNDaGVjayhoYXNoLCB2ZXJzaW9uKTtcclxuICB9XHJcbiAgcmV0dXJuIGJpdGNvaW5qcy5hZGRyZXNzLnRvQmFzZTU4Q2hlY2soaGFzaCwgdmVyc2lvbik7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBmcm9tQmFzZTU4Q2hlY2soYWRkcmVzczogc3RyaW5nLCBuZXR3b3JrOiBOZXR3b3JrKTogQmFzZTU4Q2hlY2tSZXN1bHQge1xyXG4gIGlmIChpc1ZhbGlkTmV0d29yayhuZXR3b3JrKSAmJiBpc1pjYXNoKG5ldHdvcmspKSB7XHJcbiAgICByZXR1cm4gemNhc2hBZGRyZXNzLmZyb21CYXNlNThDaGVjayhhZGRyZXNzLCBuZXR3b3JrKTtcclxuICB9XHJcbiAgaWYgKGlzVmFsaWROZXR3b3JrKG5ldHdvcmspICYmIGlzR3JvZXN0bGNvaW4obmV0d29yaykpIHtcclxuICAgIHJldHVybiBncnNBZGRyZXNzLmZyb21CYXNlNThHcnNDaGVjayhhZGRyZXNzKTtcclxuICB9XHJcbiAgcmV0dXJuIGJpdGNvaW5qcy5hZGRyZXNzLmZyb21CYXNlNThDaGVjayhhZGRyZXNzKTtcclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IHsgZnJvbUJlY2gzMiwgdG9CZWNoMzIgfSA9IGJpdGNvaW5qcy5hZGRyZXNzO1xyXG5cclxuZXhwb3J0IHsgQmFzZTU4Q2hlY2tSZXN1bHQsIEJlY2gzMlJlc3VsdCB9O1xyXG4iXX0=