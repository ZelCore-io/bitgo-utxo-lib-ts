"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Contains third-party test fixtures for nonstandard address formats
 */
const assert = require("assert");
const src_1 = require("../../src");
const address_1 = require("../../src/address");
const addressFormat_1 = require("../../src/addressFormat");
const fixtures_1 = require("./bitcoincash/fixtures");
function getTestVectors(network) {
    switch ((0, src_1.getMainnet)(network)) {
        case src_1.networks.bitcoincash:
            return (0, fixtures_1.getTestVectorsBitcoinCashAddressTranslations)(network);
        default:
            return [];
    }
}
(0, src_1.getNetworkList)().forEach((network) => {
    const vectors = getTestVectors(network);
    if (!vectors.length) {
        return;
    }
    describe(`custom address formats [${(0, src_1.getNetworkName)(network)}]`, function () {
        vectors.forEach((v) => {
            it(`supports custom format for address [${v.input}]`, function () {
                const script = (0, addressFormat_1.toOutputScriptWithFormat)(v.input, v.format, network);
                assert.deepStrictEqual((0, addressFormat_1.toOutputScriptWithFormat)(v.input, v.format, network), script);
                assert.deepStrictEqual((0, addressFormat_1.fromOutputScriptWithFormat)(script, v.format, network), v.output);
                assert.deepStrictEqual((0, addressFormat_1.toOutputScriptAndFormat)(v.input, network), [v.format, script]);
                assert.deepStrictEqual((0, addressFormat_1.toOutputScriptTryFormats)(v.input, network), script);
                assert.deepStrictEqual((0, addressFormat_1.toCanonicalFormat)(v.input, network), (0, address_1.fromOutputScript)(script, network));
            });
        });
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWRkcmVzc0Zvcm1hdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3Rlc3QvYWRkcmVzcy9hZGRyZXNzRm9ybWF0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUE7O0dBRUc7QUFDSCxpQ0FBaUM7QUFDakMsbUNBQTBGO0FBQzFGLCtDQUFxRDtBQUNyRCwyREFPaUM7QUFDakMscURBQXNGO0FBcUJ0RixTQUFTLGNBQWMsQ0FBQyxPQUFnQjtJQUN0QyxRQUFRLElBQUEsZ0JBQVUsRUFBQyxPQUFPLENBQUMsRUFBRTtRQUMzQixLQUFLLGNBQVEsQ0FBQyxXQUFXO1lBQ3ZCLE9BQU8sSUFBQSx1REFBNEMsRUFBQyxPQUFPLENBQUMsQ0FBQztRQUMvRDtZQUNFLE9BQU8sRUFBRSxDQUFDO0tBQ2I7QUFDSCxDQUFDO0FBRUQsSUFBQSxvQkFBYyxHQUFFLENBQUMsT0FBTyxDQUFDLENBQUMsT0FBTyxFQUFFLEVBQUU7SUFDbkMsTUFBTSxPQUFPLEdBQUcsY0FBYyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQ3hDLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxFQUFFO1FBQ25CLE9BQU87S0FDUjtJQUNELFFBQVEsQ0FBQywyQkFBMkIsSUFBQSxvQkFBYyxFQUFDLE9BQU8sQ0FBQyxHQUFHLEVBQUU7UUFDOUQsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFO1lBQ3BCLEVBQUUsQ0FBQyx1Q0FBdUMsQ0FBQyxDQUFDLEtBQUssR0FBRyxFQUFFO2dCQUNwRCxNQUFNLE1BQU0sR0FBRyxJQUFBLHdDQUF3QixFQUFDLENBQUMsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDLE1BQU0sRUFBRSxPQUFPLENBQUMsQ0FBQztnQkFDcEUsTUFBTSxDQUFDLGVBQWUsQ0FBQyxJQUFBLHdDQUF3QixFQUFDLENBQUMsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDLE1BQU0sRUFBRSxPQUFPLENBQUMsRUFBRSxNQUFNLENBQUMsQ0FBQztnQkFDckYsTUFBTSxDQUFDLGVBQWUsQ0FBQyxJQUFBLDBDQUEwQixFQUFDLE1BQU0sRUFBRSxDQUFDLENBQUMsTUFBTSxFQUFFLE9BQU8sQ0FBQyxFQUFFLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQztnQkFDeEYsTUFBTSxDQUFDLGVBQWUsQ0FBQyxJQUFBLHVDQUF1QixFQUFDLENBQUMsQ0FBQyxLQUFLLEVBQUUsT0FBTyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsTUFBTSxFQUFFLE1BQU0sQ0FBQyxDQUFDLENBQUM7Z0JBQ3RGLE1BQU0sQ0FBQyxlQUFlLENBQUMsSUFBQSx3Q0FBd0IsRUFBQyxDQUFDLENBQUMsS0FBSyxFQUFFLE9BQU8sQ0FBQyxFQUFFLE1BQU0sQ0FBQyxDQUFDO2dCQUMzRSxNQUFNLENBQUMsZUFBZSxDQUFDLElBQUEsaUNBQWlCLEVBQUMsQ0FBQyxDQUFDLEtBQUssRUFBRSxPQUFPLENBQUMsRUFBRSxJQUFBLDBCQUFnQixFQUFDLE1BQU0sRUFBRSxPQUFPLENBQUMsQ0FBQyxDQUFDO1lBQ2pHLENBQUMsQ0FBQyxDQUFDO1FBQ0wsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDLENBQUMsQ0FBQztBQUNMLENBQUMsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXHJcbiAqIENvbnRhaW5zIHRoaXJkLXBhcnR5IHRlc3QgZml4dHVyZXMgZm9yIG5vbnN0YW5kYXJkIGFkZHJlc3MgZm9ybWF0c1xyXG4gKi9cclxuaW1wb3J0ICogYXMgYXNzZXJ0IGZyb20gJ2Fzc2VydCc7XHJcbmltcG9ydCB7IGdldE1haW5uZXQsIGdldE5ldHdvcmtMaXN0LCBnZXROZXR3b3JrTmFtZSwgTmV0d29yaywgbmV0d29ya3MgfSBmcm9tICcuLi8uLi9zcmMnO1xyXG5pbXBvcnQgeyBmcm9tT3V0cHV0U2NyaXB0IH0gZnJvbSAnLi4vLi4vc3JjL2FkZHJlc3MnO1xyXG5pbXBvcnQge1xyXG4gIEFkZHJlc3NGb3JtYXQsXHJcbiAgZnJvbU91dHB1dFNjcmlwdFdpdGhGb3JtYXQsXHJcbiAgdG9DYW5vbmljYWxGb3JtYXQsXHJcbiAgdG9PdXRwdXRTY3JpcHRBbmRGb3JtYXQsXHJcbiAgdG9PdXRwdXRTY3JpcHRUcnlGb3JtYXRzLFxyXG4gIHRvT3V0cHV0U2NyaXB0V2l0aEZvcm1hdCxcclxufSBmcm9tICcuLi8uLi9zcmMvYWRkcmVzc0Zvcm1hdCc7XHJcbmltcG9ydCB7IGdldFRlc3RWZWN0b3JzQml0Y29pbkNhc2hBZGRyZXNzVHJhbnNsYXRpb25zIH0gZnJvbSAnLi9iaXRjb2luY2FzaC9maXh0dXJlcyc7XHJcblxyXG5leHBvcnQgdHlwZSBUZXN0VmVjdG9yID0ge1xyXG4gIC8qKiBhZGRyZXNzIG5ldHdvcmsgKi9cclxuICBuZXR3b3JrOiBOZXR3b3JrO1xyXG4gIC8qKiBuZXR3b3JrLXNwZWNpZmljIGFkZHJlc3MgZm9ybWF0ICovXHJcbiAgZm9ybWF0OiBBZGRyZXNzRm9ybWF0O1xyXG4gIC8qKiBoYXNoIChwMnNoIG9yIHAycGtoKSAqL1xyXG4gIHBheWxvYWQ6IEJ1ZmZlcjtcclxuICAvKiogYWRkcmVzcyBwYXJzZWFibGUgd2l0aCBgZm9ybWF0YCAqL1xyXG4gIGlucHV0OiBzdHJpbmc7XHJcbiAgLyoqXHJcbiAgICogQWRkcmVzcyBmb3JtYXR0ZWQgd2l0aCBgZm9ybWF0YC5cclxuICAgKlxyXG4gICAqIENlcnRhaW4gZm9ybWF0cyBhbGxvdyBub24tY2Fub25pY2FsIHJlcHJlc2VudGF0aW9uc1xyXG4gICAqIChmb3IgaW5zdGFuY2UgY2FzaGFkZHIgYWxsb3dzIHVwcGVyY2FzZSBhbmQgdW5wcmVmaXhlZCBhZGRyZXNzZXMpXHJcbiAgICogaW4gdGhlc2UgY2FzZXMgYGlucHV0YCBhbmQgYG91dHB1dGAgY2FuIGJlIGRpZmZlcmVudCBmb3IgdGhlIHNhbWUgZm9ybWF0LlxyXG4gICAqL1xyXG4gIG91dHB1dDogc3RyaW5nO1xyXG59O1xyXG5cclxuZnVuY3Rpb24gZ2V0VGVzdFZlY3RvcnMobmV0d29yazogTmV0d29yayk6IFRlc3RWZWN0b3JbXSB7XHJcbiAgc3dpdGNoIChnZXRNYWlubmV0KG5ldHdvcmspKSB7XHJcbiAgICBjYXNlIG5ldHdvcmtzLmJpdGNvaW5jYXNoOlxyXG4gICAgICByZXR1cm4gZ2V0VGVzdFZlY3RvcnNCaXRjb2luQ2FzaEFkZHJlc3NUcmFuc2xhdGlvbnMobmV0d29yayk7XHJcbiAgICBkZWZhdWx0OlxyXG4gICAgICByZXR1cm4gW107XHJcbiAgfVxyXG59XHJcblxyXG5nZXROZXR3b3JrTGlzdCgpLmZvckVhY2goKG5ldHdvcmspID0+IHtcclxuICBjb25zdCB2ZWN0b3JzID0gZ2V0VGVzdFZlY3RvcnMobmV0d29yayk7XHJcbiAgaWYgKCF2ZWN0b3JzLmxlbmd0aCkge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuICBkZXNjcmliZShgY3VzdG9tIGFkZHJlc3MgZm9ybWF0cyBbJHtnZXROZXR3b3JrTmFtZShuZXR3b3JrKX1dYCwgZnVuY3Rpb24gKCkge1xyXG4gICAgdmVjdG9ycy5mb3JFYWNoKCh2KSA9PiB7XHJcbiAgICAgIGl0KGBzdXBwb3J0cyBjdXN0b20gZm9ybWF0IGZvciBhZGRyZXNzIFske3YuaW5wdXR9XWAsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBjb25zdCBzY3JpcHQgPSB0b091dHB1dFNjcmlwdFdpdGhGb3JtYXQodi5pbnB1dCwgdi5mb3JtYXQsIG5ldHdvcmspO1xyXG4gICAgICAgIGFzc2VydC5kZWVwU3RyaWN0RXF1YWwodG9PdXRwdXRTY3JpcHRXaXRoRm9ybWF0KHYuaW5wdXQsIHYuZm9ybWF0LCBuZXR3b3JrKSwgc2NyaXB0KTtcclxuICAgICAgICBhc3NlcnQuZGVlcFN0cmljdEVxdWFsKGZyb21PdXRwdXRTY3JpcHRXaXRoRm9ybWF0KHNjcmlwdCwgdi5mb3JtYXQsIG5ldHdvcmspLCB2Lm91dHB1dCk7XHJcbiAgICAgICAgYXNzZXJ0LmRlZXBTdHJpY3RFcXVhbCh0b091dHB1dFNjcmlwdEFuZEZvcm1hdCh2LmlucHV0LCBuZXR3b3JrKSwgW3YuZm9ybWF0LCBzY3JpcHRdKTtcclxuICAgICAgICBhc3NlcnQuZGVlcFN0cmljdEVxdWFsKHRvT3V0cHV0U2NyaXB0VHJ5Rm9ybWF0cyh2LmlucHV0LCBuZXR3b3JrKSwgc2NyaXB0KTtcclxuICAgICAgICBhc3NlcnQuZGVlcFN0cmljdEVxdWFsKHRvQ2Fub25pY2FsRm9ybWF0KHYuaW5wdXQsIG5ldHdvcmspLCBmcm9tT3V0cHV0U2NyaXB0KHNjcmlwdCwgbmV0d29yaykpO1xyXG4gICAgICB9KTtcclxuICAgIH0pO1xyXG4gIH0pO1xyXG59KTtcclxuIl19