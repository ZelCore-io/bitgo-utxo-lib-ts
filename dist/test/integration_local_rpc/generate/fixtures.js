"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.fixtureKeys = exports.writeTransactionFixtureWithInputs = exports.readFixture = exports.writeFixture = exports.wipeFixtures = exports.getFixtureDir = exports.getProtocolVersions = void 0;
const assert = require("assert");
const fs = require("fs-extra");
const path = require("path");
const src_1 = require("../../../src");
const testutil_1 = require("../../../src/testutil");
const RpcClient_1 = require("./RpcClient");
const bitgo_1 = require("../../../src/bitgo");
function getProtocolVersions(network) {
    switch ((0, src_1.getMainnet)(network)) {
        case src_1.networks.zcash:
            // FIXME: re-enable protocol version 500
            // return [400, 450, 500];
            return [400, 450];
        default:
            return [(0, bitgo_1.getDefaultTransactionVersion)(network)];
    }
}
exports.getProtocolVersions = getProtocolVersions;
function getFixtureDir(protocol) {
    const networkName = (0, src_1.getNetworkName)(protocol.network);
    assert(networkName);
    return path.join(__dirname, '..', 'fixtures', networkName, `v${protocol.version}`);
}
exports.getFixtureDir = getFixtureDir;
async function wipeFixtures(protocol) {
    try {
        await fs.remove(getFixtureDir(protocol));
    }
    catch (e) {
        if (e.code === 'ENOENT') {
            return;
        }
    }
}
exports.wipeFixtures = wipeFixtures;
async function writeFixture(protocol, filename, content) {
    await fs.mkdir(getFixtureDir(protocol), { recursive: true });
    await fs.writeFile(path.join(getFixtureDir(protocol), filename), JSON.stringify(content, null, 2));
}
exports.writeFixture = writeFixture;
async function readFixture(protocol, filename) {
    return JSON.parse(await fs.readFile(path.join(getFixtureDir(protocol), filename), 'utf8'));
}
exports.readFixture = readFixture;
async function writeTransactionFixtureWithInputs(rpc, protocol, filename, txid) {
    const transaction = await rpc.getRawTransactionVerbose(txid);
    const inputTransactionIds = transaction.vin.reduce((all, input) => (all.includes(input.txid) ? all : [...all, input.txid]), []);
    const inputs = await RpcClient_1.RpcClient.parallelMap(inputTransactionIds, (inputTxid) => rpc.getRawTransactionVerbose(inputTxid));
    assert.strictEqual(inputs.length, inputTransactionIds.length);
    await writeFixture(protocol, filename, {
        transaction,
        inputs,
    });
}
exports.writeTransactionFixtureWithInputs = writeTransactionFixtureWithInputs;
exports.fixtureKeys = (0, testutil_1.getKeyTriple)('rpctest');
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZml4dHVyZXMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi90ZXN0L2ludGVncmF0aW9uX2xvY2FsX3JwYy9nZW5lcmF0ZS9maXh0dXJlcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSxpQ0FBaUM7QUFDakMsK0JBQStCO0FBQy9CLDZCQUE2QjtBQUU3QixzQ0FBNkU7QUFDN0Usb0RBQXFEO0FBQ3JELDJDQUF3QztBQUV4Qyw4Q0FBa0U7QUFPbEUsU0FBZ0IsbUJBQW1CLENBQUMsT0FBZ0I7SUFDbEQsUUFBUSxJQUFBLGdCQUFVLEVBQUMsT0FBTyxDQUFDLEVBQUU7UUFDM0IsS0FBSyxjQUFRLENBQUMsS0FBSztZQUNqQix3Q0FBd0M7WUFDeEMsMEJBQTBCO1lBQzFCLE9BQU8sQ0FBQyxHQUFHLEVBQUUsR0FBRyxDQUFDLENBQUM7UUFDcEI7WUFDRSxPQUFPLENBQUMsSUFBQSxvQ0FBNEIsRUFBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO0tBQ2xEO0FBQ0gsQ0FBQztBQVRELGtEQVNDO0FBRUQsU0FBZ0IsYUFBYSxDQUFDLFFBQWtCO0lBQzlDLE1BQU0sV0FBVyxHQUFHLElBQUEsb0JBQWMsRUFBQyxRQUFRLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDckQsTUFBTSxDQUFDLFdBQVcsQ0FBQyxDQUFDO0lBQ3BCLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsSUFBSSxFQUFFLFVBQVUsRUFBRSxXQUFXLEVBQUUsSUFBSSxRQUFRLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQztBQUNyRixDQUFDO0FBSkQsc0NBSUM7QUFFTSxLQUFLLFVBQVUsWUFBWSxDQUFDLFFBQWtCO0lBQ25ELElBQUk7UUFDRixNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsYUFBYSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7S0FDMUM7SUFBQyxPQUFPLENBQUMsRUFBRTtRQUNWLElBQUksQ0FBQyxDQUFDLElBQUksS0FBSyxRQUFRLEVBQUU7WUFDdkIsT0FBTztTQUNSO0tBQ0Y7QUFDSCxDQUFDO0FBUkQsb0NBUUM7QUFFTSxLQUFLLFVBQVUsWUFBWSxDQUFDLFFBQWtCLEVBQUUsUUFBZ0IsRUFBRSxPQUFnQjtJQUN2RixNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsYUFBYSxDQUFDLFFBQVEsQ0FBQyxFQUFFLEVBQUUsU0FBUyxFQUFFLElBQUksRUFBRSxDQUFDLENBQUM7SUFDN0QsTUFBTSxFQUFFLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLFFBQVEsQ0FBQyxFQUFFLFFBQVEsQ0FBQyxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsT0FBTyxFQUFFLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ3JHLENBQUM7QUFIRCxvQ0FHQztBQUVNLEtBQUssVUFBVSxXQUFXLENBQUksUUFBa0IsRUFBRSxRQUFnQjtJQUN2RSxPQUFPLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLFFBQVEsQ0FBQyxFQUFFLFFBQVEsQ0FBQyxFQUFFLE1BQU0sQ0FBQyxDQUFDLENBQUM7QUFDN0YsQ0FBQztBQUZELGtDQUVDO0FBT00sS0FBSyxVQUFVLGlDQUFpQyxDQUNyRCxHQUFjLEVBQ2QsUUFBa0IsRUFDbEIsUUFBZ0IsRUFDaEIsSUFBWTtJQUVaLE1BQU0sV0FBVyxHQUFHLE1BQU0sR0FBRyxDQUFDLHdCQUF3QixDQUFDLElBQUksQ0FBQyxDQUFDO0lBQzdELE1BQU0sbUJBQW1CLEdBQUcsV0FBVyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQ2hELENBQUMsR0FBYSxFQUFFLEtBQUssRUFBRSxFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxFQUFFLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUNqRixFQUFFLENBQ0gsQ0FBQztJQUNGLE1BQU0sTUFBTSxHQUFHLE1BQU0scUJBQVMsQ0FBQyxXQUFXLENBQUMsbUJBQW1CLEVBQUUsQ0FBQyxTQUFTLEVBQUUsRUFBRSxDQUM1RSxHQUFHLENBQUMsd0JBQXdCLENBQUMsU0FBUyxDQUFDLENBQ3hDLENBQUM7SUFDRixNQUFNLENBQUMsV0FBVyxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsbUJBQW1CLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDOUQsTUFBTSxZQUFZLENBQUMsUUFBUSxFQUFFLFFBQVEsRUFBRTtRQUNyQyxXQUFXO1FBQ1gsTUFBTTtLQUNQLENBQUMsQ0FBQztBQUNMLENBQUM7QUFuQkQsOEVBbUJDO0FBRVksUUFBQSxXQUFXLEdBQUcsSUFBQSx1QkFBWSxFQUFDLFNBQVMsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgYXNzZXJ0IGZyb20gJ2Fzc2VydCc7XHJcbmltcG9ydCAqIGFzIGZzIGZyb20gJ2ZzLWV4dHJhJztcclxuaW1wb3J0ICogYXMgcGF0aCBmcm9tICdwYXRoJztcclxuXHJcbmltcG9ydCB7IG5ldHdvcmtzLCBOZXR3b3JrLCBnZXROZXR3b3JrTmFtZSwgZ2V0TWFpbm5ldCB9IGZyb20gJy4uLy4uLy4uL3NyYyc7XHJcbmltcG9ydCB7IGdldEtleVRyaXBsZSB9IGZyb20gJy4uLy4uLy4uL3NyYy90ZXN0dXRpbCc7XHJcbmltcG9ydCB7IFJwY0NsaWVudCB9IGZyb20gJy4vUnBjQ2xpZW50JztcclxuaW1wb3J0IHsgUnBjVHJhbnNhY3Rpb24gfSBmcm9tICcuL1JwY1R5cGVzJztcclxuaW1wb3J0IHsgZ2V0RGVmYXVsdFRyYW5zYWN0aW9uVmVyc2lvbiB9IGZyb20gJy4uLy4uLy4uL3NyYy9iaXRnbyc7XHJcblxyXG5leHBvcnQgdHlwZSBQcm90b2NvbCA9IHtcclxuICBuZXR3b3JrOiBOZXR3b3JrO1xyXG4gIHZlcnNpb246IG51bWJlcjtcclxufTtcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBnZXRQcm90b2NvbFZlcnNpb25zKG5ldHdvcms6IE5ldHdvcmspOiBudW1iZXJbXSB7XHJcbiAgc3dpdGNoIChnZXRNYWlubmV0KG5ldHdvcmspKSB7XHJcbiAgICBjYXNlIG5ldHdvcmtzLnpjYXNoOlxyXG4gICAgICAvLyBGSVhNRTogcmUtZW5hYmxlIHByb3RvY29sIHZlcnNpb24gNTAwXHJcbiAgICAgIC8vIHJldHVybiBbNDAwLCA0NTAsIDUwMF07XHJcbiAgICAgIHJldHVybiBbNDAwLCA0NTBdO1xyXG4gICAgZGVmYXVsdDpcclxuICAgICAgcmV0dXJuIFtnZXREZWZhdWx0VHJhbnNhY3Rpb25WZXJzaW9uKG5ldHdvcmspXTtcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBnZXRGaXh0dXJlRGlyKHByb3RvY29sOiBQcm90b2NvbCk6IHN0cmluZyB7XHJcbiAgY29uc3QgbmV0d29ya05hbWUgPSBnZXROZXR3b3JrTmFtZShwcm90b2NvbC5uZXR3b3JrKTtcclxuICBhc3NlcnQobmV0d29ya05hbWUpO1xyXG4gIHJldHVybiBwYXRoLmpvaW4oX19kaXJuYW1lLCAnLi4nLCAnZml4dHVyZXMnLCBuZXR3b3JrTmFtZSwgYHYke3Byb3RvY29sLnZlcnNpb259YCk7XHJcbn1cclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiB3aXBlRml4dHVyZXMocHJvdG9jb2w6IFByb3RvY29sKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgdHJ5IHtcclxuICAgIGF3YWl0IGZzLnJlbW92ZShnZXRGaXh0dXJlRGlyKHByb3RvY29sKSk7XHJcbiAgfSBjYXRjaCAoZSkge1xyXG4gICAgaWYgKGUuY29kZSA9PT0gJ0VOT0VOVCcpIHtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHdyaXRlRml4dHVyZShwcm90b2NvbDogUHJvdG9jb2wsIGZpbGVuYW1lOiBzdHJpbmcsIGNvbnRlbnQ6IHVua25vd24pOiBQcm9taXNlPHZvaWQ+IHtcclxuICBhd2FpdCBmcy5ta2RpcihnZXRGaXh0dXJlRGlyKHByb3RvY29sKSwgeyByZWN1cnNpdmU6IHRydWUgfSk7XHJcbiAgYXdhaXQgZnMud3JpdGVGaWxlKHBhdGguam9pbihnZXRGaXh0dXJlRGlyKHByb3RvY29sKSwgZmlsZW5hbWUpLCBKU09OLnN0cmluZ2lmeShjb250ZW50LCBudWxsLCAyKSk7XHJcbn1cclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiByZWFkRml4dHVyZTxUPihwcm90b2NvbDogUHJvdG9jb2wsIGZpbGVuYW1lOiBzdHJpbmcpOiBQcm9taXNlPFQ+IHtcclxuICByZXR1cm4gSlNPTi5wYXJzZShhd2FpdCBmcy5yZWFkRmlsZShwYXRoLmpvaW4oZ2V0Rml4dHVyZURpcihwcm90b2NvbCksIGZpbGVuYW1lKSwgJ3V0ZjgnKSk7XHJcbn1cclxuXHJcbmV4cG9ydCB0eXBlIFRyYW5zYWN0aW9uRml4dHVyZVdpdGhJbnB1dHMgPSB7XHJcbiAgdHJhbnNhY3Rpb246IFJwY1RyYW5zYWN0aW9uO1xyXG4gIGlucHV0czogUnBjVHJhbnNhY3Rpb25bXTtcclxufTtcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiB3cml0ZVRyYW5zYWN0aW9uRml4dHVyZVdpdGhJbnB1dHMoXHJcbiAgcnBjOiBScGNDbGllbnQsXHJcbiAgcHJvdG9jb2w6IFByb3RvY29sLFxyXG4gIGZpbGVuYW1lOiBzdHJpbmcsXHJcbiAgdHhpZDogc3RyaW5nXHJcbik6IFByb21pc2U8dm9pZD4ge1xyXG4gIGNvbnN0IHRyYW5zYWN0aW9uID0gYXdhaXQgcnBjLmdldFJhd1RyYW5zYWN0aW9uVmVyYm9zZSh0eGlkKTtcclxuICBjb25zdCBpbnB1dFRyYW5zYWN0aW9uSWRzID0gdHJhbnNhY3Rpb24udmluLnJlZHVjZShcclxuICAgIChhbGw6IHN0cmluZ1tdLCBpbnB1dCkgPT4gKGFsbC5pbmNsdWRlcyhpbnB1dC50eGlkKSA/IGFsbCA6IFsuLi5hbGwsIGlucHV0LnR4aWRdKSxcclxuICAgIFtdXHJcbiAgKTtcclxuICBjb25zdCBpbnB1dHMgPSBhd2FpdCBScGNDbGllbnQucGFyYWxsZWxNYXAoaW5wdXRUcmFuc2FjdGlvbklkcywgKGlucHV0VHhpZCkgPT5cclxuICAgIHJwYy5nZXRSYXdUcmFuc2FjdGlvblZlcmJvc2UoaW5wdXRUeGlkKVxyXG4gICk7XHJcbiAgYXNzZXJ0LnN0cmljdEVxdWFsKGlucHV0cy5sZW5ndGgsIGlucHV0VHJhbnNhY3Rpb25JZHMubGVuZ3RoKTtcclxuICBhd2FpdCB3cml0ZUZpeHR1cmUocHJvdG9jb2wsIGZpbGVuYW1lLCB7XHJcbiAgICB0cmFuc2FjdGlvbixcclxuICAgIGlucHV0cyxcclxuICB9KTtcclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IGZpeHR1cmVLZXlzID0gZ2V0S2V5VHJpcGxlKCdycGN0ZXN0Jyk7XHJcbiJdfQ==