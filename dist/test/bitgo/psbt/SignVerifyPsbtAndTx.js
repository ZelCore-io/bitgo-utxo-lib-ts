"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const assert = require("assert");
const bitgo_1 = require("../../../src/bitgo");
const testutil_1 = require("../../../src/testutil");
const src_1 = require("../../../src");
const outputScripts_1 = require("../../../src/bitgo/outputScripts");
const rootWalletKeys = (0, testutil_1.getDefaultWalletKeys)();
const signs = ['unsigned', 'halfsigned', 'fullsigned'];
const neutratedRootWalletKeys = new bitgo_1.RootWalletKeys(rootWalletKeys.triple.map((bip32) => bip32.neutered()), rootWalletKeys.derivationPrefixes);
const psbtInputs = testutil_1.inputScriptTypes.map((scriptType) => ({ scriptType, value: BigInt(1000) }));
const psbtOutputs = testutil_1.outputScriptTypes.map((scriptType) => ({ scriptType, value: BigInt(900) }));
const txInputs = testutil_1.txnInputScriptTypes.map((scriptType) => ({ scriptType, value: BigInt(1000) }));
const txOutputs = testutil_1.txnOutputScriptTypes.map((scriptType) => ({ scriptType, value: BigInt(900) }));
function getSigValidArray(scriptType, sign) {
    if (scriptType === 'p2shP2pk' || sign === 'unsigned') {
        return [false, false, false];
    }
    if (sign === 'halfsigned') {
        return [true, false, false];
    }
    return scriptType === 'p2trMusig2' ? [true, true, false] : [true, false, true];
}
function signCount(sign) {
    return sign === 'unsigned' ? 0 : sign === 'halfsigned' ? 1 : 2;
}
function runPsbt(network, sign, inputs, outputs) {
    const coin = (0, src_1.getNetworkName)(network);
    const signatureCount = signCount(sign);
    describe(`psbt build, sign and verify for ${coin} ${sign}`, function () {
        it(`getSignatureValidationArray with globalXpub ${coin} ${sign}`, function () {
            const psbt = (0, testutil_1.constructPsbt)(inputs, outputs, network, rootWalletKeys, sign);
            (0, bitgo_1.addXpubsToPsbt)(psbt, neutratedRootWalletKeys);
            psbt.data.inputs.forEach((input, inputIndex) => {
                const isP2shP2pk = inputs[inputIndex].scriptType === 'p2shP2pk';
                const expectedSigValid = getSigValidArray(inputs[inputIndex].scriptType, sign);
                psbt.getSignatureValidationArray(inputIndex).forEach((sv, i) => {
                    if (isP2shP2pk && sign !== 'unsigned' && i === 0) {
                        assert.strictEqual(sv, true);
                    }
                    else {
                        assert.strictEqual(sv, expectedSigValid[i]);
                    }
                });
            });
        });
        it(`getSignatureValidationArray with rootNodes ${coin} ${sign}`, function () {
            const psbt = (0, testutil_1.constructPsbt)(inputs, outputs, network, rootWalletKeys, sign);
            (0, bitgo_1.addXpubsToPsbt)(psbt, neutratedRootWalletKeys);
            psbt.data.inputs.forEach((input, inputIndex) => {
                const isP2shP2pk = inputs[inputIndex].scriptType === 'p2shP2pk';
                const expectedSigValid = getSigValidArray(inputs[inputIndex].scriptType, sign);
                psbt.getSignatureValidationArray(inputIndex, { rootNodes: neutratedRootWalletKeys.triple }).forEach((sv, i) => {
                    if (isP2shP2pk && sign !== 'unsigned' && i === 0) {
                        assert.strictEqual(sv, true);
                    }
                    else {
                        assert.strictEqual(sv, expectedSigValid[i]);
                    }
                });
            });
        });
        it(`getSignatureValidationArrayPsbt  ${coin} ${sign}`, function () {
            const psbt = (0, testutil_1.constructPsbt)(inputs, outputs, network, rootWalletKeys, sign);
            const sigValidations = (0, bitgo_1.getSignatureValidationArrayPsbt)(psbt, neutratedRootWalletKeys);
            psbt.data.inputs.forEach((input, inputIndex) => {
                const expectedSigValid = getSigValidArray(inputs[inputIndex].scriptType, sign);
                const sigValid = sigValidations.find((sv) => sv[0] === inputIndex);
                assert.ok(sigValid);
                sigValid[1].forEach((sv, i) => assert.strictEqual(sv, expectedSigValid[i]));
            });
        });
        it(`psbt signature counts ${coin} ${sign}`, function () {
            const psbt = (0, testutil_1.constructPsbt)(inputs, outputs, network, rootWalletKeys, sign);
            const counts = (0, bitgo_1.getStrictSignatureCounts)(psbt);
            const countsFromInputs = (0, bitgo_1.getStrictSignatureCounts)(psbt.data.inputs);
            assert.strictEqual(counts.length, psbt.data.inputs.length);
            assert.strictEqual(countsFromInputs.length, psbt.data.inputs.length);
            psbt.data.inputs.forEach((input, inputIndex) => {
                const expectedCount = inputs[inputIndex].scriptType === 'p2shP2pk' && signatureCount > 0 ? 1 : signatureCount;
                assert.strictEqual((0, bitgo_1.getPsbtInputSignatureCount)(input), expectedCount);
                assert.strictEqual((0, bitgo_1.getStrictSignatureCount)(input), expectedCount);
                assert.strictEqual(counts[inputIndex], expectedCount);
                assert.strictEqual(countsFromInputs[inputIndex], expectedCount);
            });
            if (sign === 'fullsigned') {
                const tx = psbt.finalizeAllInputs().extractTransaction();
                const counts = (0, bitgo_1.getStrictSignatureCounts)(tx);
                const countsFromIns = (0, bitgo_1.getStrictSignatureCounts)(tx.ins);
                tx.ins.forEach((input, inputIndex) => {
                    const expectedCount = inputs[inputIndex].scriptType === 'p2shP2pk' ? 1 : signatureCount;
                    assert.strictEqual((0, bitgo_1.getStrictSignatureCount)(input), expectedCount);
                    assert.strictEqual(counts[inputIndex], expectedCount);
                    assert.strictEqual(countsFromIns[inputIndex], expectedCount);
                });
            }
        });
    });
}
function runTx(network, sign, inputs, outputs) {
    const coin = (0, src_1.getNetworkName)(network);
    const signatureCount = signCount(sign);
    describe(`tx build, sign and verify for ${coin} ${sign}`, function () {
        it(`tx signature counts ${coin} ${sign}`, function () {
            const txb = (0, testutil_1.constructTxnBuilder)(inputs, outputs, network, rootWalletKeys, sign);
            const tx = sign === 'fullsigned' ? txb.build() : txb.buildIncomplete();
            const counts = (0, bitgo_1.getStrictSignatureCounts)(tx);
            const countsFromIns = (0, bitgo_1.getStrictSignatureCounts)(tx.ins);
            assert.strictEqual(counts.length, tx.ins.length);
            assert.strictEqual(countsFromIns.length, tx.ins.length);
            tx.ins.forEach((input, inputIndex) => {
                const expectedCount = inputs[inputIndex].scriptType === 'p2shP2pk' && signatureCount > 0 ? 1 : signatureCount;
                assert.strictEqual((0, bitgo_1.getStrictSignatureCount)(input), expectedCount);
                assert.strictEqual(counts[inputIndex], expectedCount);
                assert.strictEqual(countsFromIns[inputIndex], expectedCount);
            });
        });
    });
}
signs.forEach((sign) => {
    (0, src_1.getNetworkList)()
        .filter((v) => (0, src_1.isMainnet)(v) && v !== src_1.networks.bitcoinsv)
        .forEach((network) => {
        const supportedPsbtInputs = psbtInputs.filter((input) => (0, outputScripts_1.isSupportedScriptType)(network, input.scriptType === 'taprootKeyPathSpend' ? 'p2trMusig2' : input.scriptType));
        const supportedPsbtOutputs = psbtOutputs.filter((output) => (0, outputScripts_1.isSupportedScriptType)(network, output.scriptType));
        runPsbt(network, sign, supportedPsbtInputs, supportedPsbtOutputs);
        const supportedTxInputs = txInputs.filter((input) => (0, outputScripts_1.isSupportedScriptType)(network, input.scriptType));
        const supportedTxOutputs = txOutputs.filter((output) => (0, outputScripts_1.isSupportedScriptType)(network, output.scriptType));
        runTx(network, sign, supportedTxInputs, supportedTxOutputs);
    });
});
//# sourceMappingURL=data:application/json;base64,