"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const assert = require("assert");
const vectors = require("./fixtures/vectorsZip0244.json");
const bitgo_1 = require("../../../src/bitgo");
const src_1 = require("../../../src");
function parseHashType(hashTypeStr) {
    return hashTypeStr.split('|').reduce((v, str) => {
        if (str in src_1.Transaction) {
            return v | src_1.Transaction[str];
        }
        throw new Error(`invalid hashType ${str}`);
    }, 0);
}
function runVector(v, i) {
    const [txHex, txid, 
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    authDigest, transparentInput, pubScriptHex, amount, ...sigHashHex /* sighash_all, sighash_none, sighash_single, sighash_all_anyone, sighash_none_anyone, sighash_single_anyone */] = v;
    describe(`Vector ${i}, txid=${txid}`, function () {
        let tx;
        before('parse', function () {
            try {
                tx = bitgo_1.ZcashTransaction.fromBuffer(Buffer.from(txHex, 'hex'), false, 'number', src_1.networks.zcash);
            }
            catch (e) {
                if (e instanceof bitgo_1.UnsupportedTransactionError) {
                    this.skip();
                }
                throw e;
            }
        });
        it('has expected txid', function () {
            // getId() returns the reversed hash
            assert.strictEqual(tx.getHash().toString('hex'), txid);
        });
        [
            'SIGHASH_ALL',
            'SIGHASH_NONE',
            'SIGHASH_SINGLE',
            'SIGHASH_ALL|SIGHASH_ANYONECANPAY',
            'SIGHASH_NONE|SIGHASH_ANYONECANPAY',
            'SIGHASH_SINGLE|SIGHASH_ANYONECANPAY',
        ].forEach((hashTypeStr, i) => {
            if (sigHashHex[i] === null) {
                return;
            }
            const hashType = parseHashType(hashTypeStr);
            it(`has expected value for ${hashTypeStr} ${hashType}`, function () {
                assert.strictEqual(tx
                    .hashForSignatureByNetwork(transparentInput !== null && transparentInput !== void 0 ? transparentInput : undefined, pubScriptHex ? Buffer.from(pubScriptHex, 'hex') : Buffer.of(), amount, hashType)
                    .toString('hex'), sigHashHex[i]);
            });
        });
    });
}
describe('ZcashTransaction ZIP-0244', function () {
    vectors
        .filter((v) => v.length > 1)
        .forEach((v, i) => {
        runVector(v, i);
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFzaFppcDAyNDQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi90ZXN0L2JpdGdvL3pjYXNoL2hhc2haaXAwMjQ0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsaUNBQWlDO0FBQ2pDLDBEQUEwRDtBQUMxRCw4Q0FBbUY7QUFDbkYsc0NBQXFEO0FBaUJyRCxTQUFTLGFBQWEsQ0FBQyxXQUFtQjtJQUN4QyxPQUFPLFdBQVcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLEdBQUcsRUFBRSxFQUFFO1FBQzlDLElBQUksR0FBRyxJQUFJLGlCQUFXLEVBQUU7WUFDdEIsT0FBTyxDQUFDLEdBQUcsaUJBQVcsQ0FBQyxHQUFHLENBQUMsQ0FBQztTQUM3QjtRQUNELE1BQU0sSUFBSSxLQUFLLENBQUMsb0JBQW9CLEdBQUcsRUFBRSxDQUFDLENBQUM7SUFDN0MsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO0FBQ1IsQ0FBQztBQUVELFNBQVMsU0FBUyxDQUFDLENBQVMsRUFBRSxDQUFTO0lBQ3JDLE1BQU0sQ0FDSixLQUFLLEVBQ0wsSUFBSTtJQUNKLDZEQUE2RDtJQUM3RCxVQUFVLEVBQ1YsZ0JBQWdCLEVBQ2hCLFlBQVksRUFDWixNQUFNLEVBQ04sR0FBRyxVQUFVLENBQUMsK0dBQStHLENBQzlILEdBQUcsQ0FBQyxDQUFDO0lBRU4sUUFBUSxDQUFDLFVBQVUsQ0FBQyxVQUFVLElBQUksRUFBRSxFQUFFO1FBQ3BDLElBQUksRUFBb0IsQ0FBQztRQUN6QixNQUFNLENBQUMsT0FBTyxFQUFFO1lBQ2QsSUFBSTtnQkFDRixFQUFFLEdBQUcsd0JBQWdCLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLEtBQUssQ0FBQyxFQUFFLEtBQUssRUFBRSxRQUFRLEVBQUUsY0FBUSxDQUFDLEtBQUssQ0FBQyxDQUFDO2FBQzlGO1lBQUMsT0FBTyxDQUFDLEVBQUU7Z0JBQ1YsSUFBSSxDQUFDLFlBQVksbUNBQTJCLEVBQUU7b0JBQzVDLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQztpQkFDYjtnQkFDRCxNQUFNLENBQUMsQ0FBQzthQUNUO1FBQ0gsQ0FBQyxDQUFDLENBQUM7UUFFSCxFQUFFLENBQUMsbUJBQW1CLEVBQUU7WUFDdEIsb0NBQW9DO1lBQ3BDLE1BQU0sQ0FBQyxXQUFXLENBQUMsRUFBRSxDQUFDLE9BQU8sRUFBRSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQztRQUN6RCxDQUFDLENBQUMsQ0FBQztRQUVIO1lBQ0UsYUFBYTtZQUNiLGNBQWM7WUFDZCxnQkFBZ0I7WUFDaEIsa0NBQWtDO1lBQ2xDLG1DQUFtQztZQUNuQyxxQ0FBcUM7U0FDdEMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxFQUFFLEVBQUU7WUFDM0IsSUFBSSxVQUFVLENBQUMsQ0FBQyxDQUFDLEtBQUssSUFBSSxFQUFFO2dCQUMxQixPQUFPO2FBQ1I7WUFDRCxNQUFNLFFBQVEsR0FBRyxhQUFhLENBQUMsV0FBVyxDQUFDLENBQUM7WUFDNUMsRUFBRSxDQUFDLDBCQUEwQixXQUFXLElBQUksUUFBUSxFQUFFLEVBQUU7Z0JBQ3RELE1BQU0sQ0FBQyxXQUFXLENBQ2hCLEVBQUU7cUJBQ0MseUJBQXlCLENBQ3hCLGdCQUFnQixhQUFoQixnQkFBZ0IsY0FBaEIsZ0JBQWdCLEdBQUksU0FBUyxFQUM3QixZQUFZLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsWUFBWSxFQUFFLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsRUFBRSxFQUFFLEVBQzdELE1BQU0sRUFDTixRQUFRLENBQ1Q7cUJBQ0EsUUFBUSxDQUFDLEtBQUssQ0FBQyxFQUNsQixVQUFVLENBQUMsQ0FBQyxDQUFDLENBQ2QsQ0FBQztZQUNKLENBQUMsQ0FBQyxDQUFDO1FBQ0wsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDLENBQUMsQ0FBQztBQUNMLENBQUM7QUFFRCxRQUFRLENBQUMsMkJBQTJCLEVBQUU7SUFDcEMsT0FBTztTQUNKLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUM7U0FDM0IsT0FBTyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFO1FBQ2hCLFNBQVMsQ0FBQyxDQUFXLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFDNUIsQ0FBQyxDQUFDLENBQUM7QUFDUCxDQUFDLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIGFzc2VydCBmcm9tICdhc3NlcnQnO1xyXG5pbXBvcnQgKiBhcyB2ZWN0b3JzIGZyb20gJy4vZml4dHVyZXMvdmVjdG9yc1ppcDAyNDQuanNvbic7XHJcbmltcG9ydCB7IFVuc3VwcG9ydGVkVHJhbnNhY3Rpb25FcnJvciwgWmNhc2hUcmFuc2FjdGlvbiB9IGZyb20gJy4uLy4uLy4uL3NyYy9iaXRnbyc7XHJcbmltcG9ydCB7IFRyYW5zYWN0aW9uLCBuZXR3b3JrcyB9IGZyb20gJy4uLy4uLy4uL3NyYyc7XHJcblxyXG50eXBlIFZlY3RvciA9IFtcclxuICB0eDogc3RyaW5nLFxyXG4gIHR4aWQ6IHN0cmluZyxcclxuICBhdXRoX2RpZ2VzdDogc3RyaW5nLFxyXG4gIHRyYW5zcGFyZW50X2lucHV0OiBudW1iZXIsXHJcbiAgc2NyaXB0X2NvZGU6IHN0cmluZyxcclxuICBhbW91bnQ6IG51bWJlcixcclxuICBzaWdoYXNoX2FsbDogc3RyaW5nLFxyXG4gIHNpZ2hhc2hfbm9uZTogc3RyaW5nLFxyXG4gIHNpZ2hhc2hfc2luZ2xlOiBzdHJpbmcsXHJcbiAgc2lnaGFzaF9hbGxfYW55b25lOiBzdHJpbmcsXHJcbiAgc2lnaGFzaF9ub25lX2FueW9uZTogc3RyaW5nLFxyXG4gIHNpZ2hhc2hfc2luZ2xlX2FueW9uZTogc3RyaW5nXHJcbl07XHJcblxyXG5mdW5jdGlvbiBwYXJzZUhhc2hUeXBlKGhhc2hUeXBlU3RyOiBzdHJpbmcpOiBudW1iZXIge1xyXG4gIHJldHVybiBoYXNoVHlwZVN0ci5zcGxpdCgnfCcpLnJlZHVjZSgodiwgc3RyKSA9PiB7XHJcbiAgICBpZiAoc3RyIGluIFRyYW5zYWN0aW9uKSB7XHJcbiAgICAgIHJldHVybiB2IHwgVHJhbnNhY3Rpb25bc3RyXTtcclxuICAgIH1cclxuICAgIHRocm93IG5ldyBFcnJvcihgaW52YWxpZCBoYXNoVHlwZSAke3N0cn1gKTtcclxuICB9LCAwKTtcclxufVxyXG5cclxuZnVuY3Rpb24gcnVuVmVjdG9yKHY6IFZlY3RvciwgaTogbnVtYmVyKSB7XHJcbiAgY29uc3QgW1xyXG4gICAgdHhIZXgsXHJcbiAgICB0eGlkLFxyXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby11bnVzZWQtdmFyc1xyXG4gICAgYXV0aERpZ2VzdCxcclxuICAgIHRyYW5zcGFyZW50SW5wdXQsXHJcbiAgICBwdWJTY3JpcHRIZXgsXHJcbiAgICBhbW91bnQsXHJcbiAgICAuLi5zaWdIYXNoSGV4IC8qIHNpZ2hhc2hfYWxsLCBzaWdoYXNoX25vbmUsIHNpZ2hhc2hfc2luZ2xlLCBzaWdoYXNoX2FsbF9hbnlvbmUsIHNpZ2hhc2hfbm9uZV9hbnlvbmUsIHNpZ2hhc2hfc2luZ2xlX2FueW9uZSAqL1xyXG4gIF0gPSB2O1xyXG5cclxuICBkZXNjcmliZShgVmVjdG9yICR7aX0sIHR4aWQ9JHt0eGlkfWAsIGZ1bmN0aW9uICgpIHtcclxuICAgIGxldCB0eDogWmNhc2hUcmFuc2FjdGlvbjtcclxuICAgIGJlZm9yZSgncGFyc2UnLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgIHRyeSB7XHJcbiAgICAgICAgdHggPSBaY2FzaFRyYW5zYWN0aW9uLmZyb21CdWZmZXIoQnVmZmVyLmZyb20odHhIZXgsICdoZXgnKSwgZmFsc2UsICdudW1iZXInLCBuZXR3b3Jrcy56Y2FzaCk7XHJcbiAgICAgIH0gY2F0Y2ggKGUpIHtcclxuICAgICAgICBpZiAoZSBpbnN0YW5jZW9mIFVuc3VwcG9ydGVkVHJhbnNhY3Rpb25FcnJvcikge1xyXG4gICAgICAgICAgdGhpcy5za2lwKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRocm93IGU7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG5cclxuICAgIGl0KCdoYXMgZXhwZWN0ZWQgdHhpZCcsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgLy8gZ2V0SWQoKSByZXR1cm5zIHRoZSByZXZlcnNlZCBoYXNoXHJcbiAgICAgIGFzc2VydC5zdHJpY3RFcXVhbCh0eC5nZXRIYXNoKCkudG9TdHJpbmcoJ2hleCcpLCB0eGlkKTtcclxuICAgIH0pO1xyXG5cclxuICAgIFtcclxuICAgICAgJ1NJR0hBU0hfQUxMJyxcclxuICAgICAgJ1NJR0hBU0hfTk9ORScsXHJcbiAgICAgICdTSUdIQVNIX1NJTkdMRScsXHJcbiAgICAgICdTSUdIQVNIX0FMTHxTSUdIQVNIX0FOWU9ORUNBTlBBWScsXHJcbiAgICAgICdTSUdIQVNIX05PTkV8U0lHSEFTSF9BTllPTkVDQU5QQVknLFxyXG4gICAgICAnU0lHSEFTSF9TSU5HTEV8U0lHSEFTSF9BTllPTkVDQU5QQVknLFxyXG4gICAgXS5mb3JFYWNoKChoYXNoVHlwZVN0ciwgaSkgPT4ge1xyXG4gICAgICBpZiAoc2lnSGFzaEhleFtpXSA9PT0gbnVsbCkge1xyXG4gICAgICAgIHJldHVybjtcclxuICAgICAgfVxyXG4gICAgICBjb25zdCBoYXNoVHlwZSA9IHBhcnNlSGFzaFR5cGUoaGFzaFR5cGVTdHIpO1xyXG4gICAgICBpdChgaGFzIGV4cGVjdGVkIHZhbHVlIGZvciAke2hhc2hUeXBlU3RyfSAke2hhc2hUeXBlfWAsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBhc3NlcnQuc3RyaWN0RXF1YWwoXHJcbiAgICAgICAgICB0eFxyXG4gICAgICAgICAgICAuaGFzaEZvclNpZ25hdHVyZUJ5TmV0d29yayhcclxuICAgICAgICAgICAgICB0cmFuc3BhcmVudElucHV0ID8/IHVuZGVmaW5lZCxcclxuICAgICAgICAgICAgICBwdWJTY3JpcHRIZXggPyBCdWZmZXIuZnJvbShwdWJTY3JpcHRIZXgsICdoZXgnKSA6IEJ1ZmZlci5vZigpLFxyXG4gICAgICAgICAgICAgIGFtb3VudCxcclxuICAgICAgICAgICAgICBoYXNoVHlwZVxyXG4gICAgICAgICAgICApXHJcbiAgICAgICAgICAgIC50b1N0cmluZygnaGV4JyksXHJcbiAgICAgICAgICBzaWdIYXNoSGV4W2ldXHJcbiAgICAgICAgKTtcclxuICAgICAgfSk7XHJcbiAgICB9KTtcclxuICB9KTtcclxufVxyXG5cclxuZGVzY3JpYmUoJ1pjYXNoVHJhbnNhY3Rpb24gWklQLTAyNDQnLCBmdW5jdGlvbiAoKSB7XHJcbiAgdmVjdG9yc1xyXG4gICAgLmZpbHRlcigodikgPT4gdi5sZW5ndGggPiAxKVxyXG4gICAgLmZvckVhY2goKHYsIGkpID0+IHtcclxuICAgICAgcnVuVmVjdG9yKHYgYXMgVmVjdG9yLCBpKTtcclxuICAgIH0pO1xyXG59KTtcclxuIl19